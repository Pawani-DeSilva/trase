require('dotenv').config({ silent: true });

const fetch = require('node-fetch');
const path = require('path');
const writeFileSync = require('fs').writeFileSync;

const getCartoUrl = endpoint =>
  `https://${process.env.CARTO_ACCOUNT}.carto.com/${endpoint}?api_key=${process.env.CARTO_TOKEN}`;

function classifyTemplates(templates) {
  const getTemplates = (existingTemplates = []) =>
    templates.reduce(
      (acc, next) => {
        const exists = existingTemplates.find(t => next.name === t);
        return {
          ...acc,
          toUpdate: exists ? [...acc.toUpdate, next] : acc.toUpdate,
          toCreate: !exists ? [...acc.toCreate, next] : acc.toCreate
        };
      },
      { toUpdate: [], toCreate: [] }
    );

  return fetch(getCartoUrl('api/v1/map/named'))
    .then(res => res.json())
    .then(data => getTemplates(data.template_ids))
    .catch(e => console.error(e));
}

function readEnv() {
  const flag = process.argv[2];
  if (!flag || !flag.startsWith('--env=')) {
    throw new Error('You need to define --env');
  }
  return flag.split('--env=')[1];
}

function getTemplatesByEnvironment() {
  const env = readEnv();
  // eslint-disable-next-line
  const templates = require(`./templates.${env}.json`);
  return templates.map(template => ({
    ...template,
    name: `${template.name}__${env}`,
    id: template.name
  }));
}

function update(templates) {
  const updates = templates.map(template =>
    fetch(getCartoUrl(`api/v1/map/named/${template.name}`), {
      method: 'PUT',
      body: JSON.stringify(template),
      headers: {
        'Content-Type': 'application/json'
      }
    })
  );
  return Promise.all(updates);
}

function create(templates) {
  const updates = templates.map(template =>
    fetch(getCartoUrl('api/v1/map/named'), {
      method: 'POST',
      body: JSON.stringify(template),
      headers: {
        'Content-Type': 'application/json'
      }
    })
  );
  return Promise.all(updates);
}

function instanciate(templates) {
  const updates = templates.map(template =>
    fetch(getCartoUrl(`api/v1/map/named/${template.name}`), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(res => res.json())
      .catch(console.error)
  );
  return Promise.all(updates);
}

function saveTemplates(templates, namedMaps) {
  const file = path.join(
    __dirname,
    '..',
    '..',
    'scripts',
    'actions',
    'map',
    'context_layers_carto.js'
  );
  // eslint-disable-next-line
  const existingLayers = require(file);
  const env = readEnv();
  const layers = namedMaps.reduce(
    (acc, next, i) => ({
      ...acc,
      [templates[i].id]: { uid: templates[i].name, layergroupid: next.layergroupid }
    }),
    {}
  );
  const newLayers = {
    ...existingLayers,
    [env]: layers
  };
  const content = `// this file is generated by gis/named-maps.js
  module.exports = ${JSON.stringify(newLayers, null, '  ')};
`;
  writeFileSync(file, content);
}

function applyTemplates(classified) {
  const { toUpdate, toCreate } = classified;
  const updated = update(toUpdate);
  const created = create(toCreate);
  Promise.all([updated, created])
    .then(() => instanciate([...toUpdate, ...toCreate]))
    .then(namedMaps => saveTemplates([...toUpdate, ...toCreate], namedMaps))
    .catch(console.error);
}

const allTemplates = getTemplatesByEnvironment();
classifyTemplates(allTemplates).then(applyTemplates);
