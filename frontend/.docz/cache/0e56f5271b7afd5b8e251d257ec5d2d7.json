{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js","mtime":1548840716970},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar _toolReducer;\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { FILTER_LINKS_BY_NODES, GET_COLUMNS, GET_CONTEXT_LAYERS, GET_LINKED_GEOIDS, GET_LINKS, GET_MAP_VECTOR_DATA, SET_NODE_ATTRIBUTES, HIGHLIGHT_NODE, SET_FLOWS_LOADING_STATE, SET_MAP_LOADING_STATE, RESET_SELECTION, RESET_TOOL_STATE, SAVE_MAP_VIEW, SELECT_BASEMAP, SELECT_BIOME_FILTER, SELECT_COLUMN, SELECT_CONTEXTUAL_LAYERS, SELECT_RECOLOR_BY, SELECT_RESIZE_BY, SELECT_VIEW, SET_MAP_DIMENSIONS_SELECTION, SET_SANKEY_SEARCH_VISIBILITY, SHOW_LINKS_ERROR, TOGGLE_MAP, TOGGLE_MAP_DIMENSION, TOGGLE_MAP_SIDEBAR_GROUP, UPDATE_NODE_SELECTION, EXPAND_NODE_SELECTION, COLLAPSE_NODE_SELECTION, SET_MAP_DIMENSIONS_DATA, RESET_TOOL_LOADERS } from 'actions/tool.actions';\nimport { LOAD_INITIAL_CONTEXT, SET_CONTEXT, LOAD_STATE_FROM_URL } from 'scripts/actions/app.actions';\nimport groupBy from 'lodash/groupBy';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport keyBy from 'lodash/keyBy';\nimport createReducer from 'utils/createReducer';\nimport { getSelectedNodesColumnsPos } from 'react-components/tool/tool.selectors';\nimport filterLinks from 'scripts/reducers/helpers/filterLinks';\nimport getChoropleth from 'scripts/reducers/helpers/getChoropleth';\nimport getMapDimensions from 'scripts/reducers/helpers/getMapDimensions';\nimport { getMapDimensionsWarnings } from 'scripts/reducers/helpers/getMapDimensionsWarnings';\nimport getNodesAtColumns from 'scripts/reducers/helpers/getNodesAtColumns';\nimport getNodesColoredBySelection from 'scripts/reducers/helpers/getNodesColoredBySelection';\nimport getNodesDict from 'scripts/reducers/helpers/getNodesDict';\nimport getRecolorGroups from 'scripts/reducers/helpers/getRecolorGroups';\nimport getVisibleNodes from 'scripts/reducers/helpers/getVisibleNodes';\nimport mergeLinks from 'scripts/reducers/helpers/mergeLinks';\nimport setNodesMeta from 'scripts/reducers/helpers/setNodesMeta';\nimport sortVisibleNodes from 'scripts/reducers/helpers/sortVisibleNodes';\nimport splitLinksByColumn from 'scripts/reducers/helpers/splitLinksByColumn';\nimport splitVisibleNodesByColumn from 'scripts/reducers/helpers/splitVisibleNodesByColumn';\nexport var toolInitialState = {\n  choropleth: {},\n  choroplethLegend: null,\n  columns: [],\n  currentQuant: null,\n  detailedView: false,\n  expandedMapSidebarGroupsIds: [],\n  expandedNodesIds: [],\n  forcedOverview: false,\n  geoIdsDict: {},\n  highlightedNodeCoordinates: null,\n  highlightedNodesIds: [],\n  initialDataLoading: false,\n  isMapVisible: false,\n  isSearchOpen: false,\n  linkedGeoIds: [],\n  links: [],\n  flowsLoading: true,\n  mapContextualLayers: [],\n  mapDimensions: [],\n  mapDimensionsGroups: [],\n  mapLoading: true,\n  mapVectorData: null,\n  mapView: null,\n  nodes: [],\n  nodesColoredAtColumn: null,\n  nodesColoredBySelection: [],\n  nodesDict: null,\n  nodesDictWithMeta: {},\n  recolorByNodeIds: [],\n  recolorGroups: [],\n  selectedBiomeFilter: {\n    name: 'none',\n    value: 'none'\n  },\n  selectedColumnsIds: [],\n  selectedMapBasemap: null,\n  selectedMapContextualLayers: null,\n  selectedMapDimensions: [null, null],\n  selectedMapDimensionsWarnings: null,\n  selectedNodesIds: [],\n  selectedRecolorBy: {\n    type: 'none',\n    name: 'none'\n  },\n  selectedResizeBy: {\n    type: 'none',\n    name: 'none'\n  },\n  unmergedLinks: [],\n  visibleNodes: [],\n  visibleNodesByColumn: [],\n  loadedFlowsContextId: null\n};\nvar toolReducer = (_toolReducer = {}, _defineProperty(_toolReducer, LOAD_STATE_FROM_URL, function (state, action) {\n  return _objectSpread({}, state, {\n    initialDataLoading: true\n  }, action.payload.tool);\n}), _defineProperty(_toolReducer, RESET_SELECTION, function (state) {\n  return Object.assign({}, state, {\n    highlightedNodesIds: [],\n    selectedNodesIds: [],\n    expandedNodesIds: [],\n    selectedBiomeFilter: {\n      value: 'none'\n    },\n    recolorByNodeIds: []\n  });\n}), _defineProperty(_toolReducer, LOAD_INITIAL_CONTEXT, function (state, action) {\n  var selectedContext = action.payload;\n  var selectedRecolorBy = selectedContext.recolorBy.find(function (recolorBy) {\n    return recolorBy.name === state.selectedRecolorByName;\n  });\n\n  if (!selectedRecolorBy) {\n    selectedRecolorBy = selectedContext.recolorBy.find(function (recolorBy) {\n      return recolorBy.isDefault === true;\n    });\n  }\n\n  var selectedResizeBy = selectedContext.resizeBy.find(function (resizeBy) {\n    return resizeBy.name === state.selectedResizeByName;\n  });\n\n  if (!selectedResizeBy) {\n    selectedResizeBy = selectedContext.resizeBy.find(function (resizeBy) {\n      return resizeBy.isDefault === true;\n    });\n  }\n\n  var biomeFilter;\n\n  if (state.selectedBiomeFilterName === 'none' || !selectedContext.filterBy.length > 0) {\n    biomeFilter = {\n      value: 'none'\n    };\n  } else {\n    biomeFilter = selectedContext.filterBy[0].nodes.find(function (filterBy) {\n      return filterBy.name === state.selectedBiomeFilterName;\n    });\n  } // use current selectedMapContextualLayers, or use the context's default\n\n\n  var selectedMapContextualLayers = selectedContext.defaultContextLayers || undefined;\n\n  if (state.selectedMapContextualLayers !== undefined && state.selectedMapContextualLayers !== null) {\n    selectedMapContextualLayers = state.selectedMapContextualLayers;\n  }\n\n  var selectedMapBasemap = selectedContext.defaultBasemap || 'satellite';\n\n  if (state.selectedMapBasemap !== undefined && state.selectedMapBasemap !== null) {\n    selectedMapBasemap = state.selectedMapBasemap;\n  } // force state updates on the component\n\n\n  var mapView = state.mapView ? Object.assign({}, state.mapView) : selectedContext.map;\n  return Object.assign({}, state, {\n    selectedRecolorBy: selectedRecolorBy || {\n      type: 'none',\n      name: 'none'\n    },\n    selectedResizeBy: selectedResizeBy,\n    selectedBiomeFilter: biomeFilter || {\n      value: 'none',\n      name: 'none'\n    },\n    selectedMapContextualLayers: selectedMapContextualLayers,\n    selectedMapBasemap: selectedMapBasemap,\n    mapView: mapView\n  });\n}), _defineProperty(_toolReducer, SET_CONTEXT, function (state, action) {\n  var selectedContext = action.payload;\n\n  if (!selectedContext) {\n    return Object.assign({}, state);\n  }\n\n  var defaultRecolorBy = selectedContext.recolorBy.find(function (recolorBy) {\n    return recolorBy.isDefault === true;\n  });\n  var defaultResizeBy = selectedContext.resizeBy.find(function (resizeBy) {\n    return resizeBy.isDefault === true;\n  });\n  var defaultBiomeFilterBy = selectedContext.filterBy.length > 0 && selectedContext.filterBy[0][0];\n  return Object.assign({}, state, {\n    selectedRecolorBy: defaultRecolorBy || {\n      type: 'none',\n      name: 'none'\n    },\n    selectedResizeBy: defaultResizeBy,\n    selectedBiomeFilter: defaultBiomeFilterBy || {\n      name: 'none',\n      value: 'none'\n    },\n    selectedMapContextualLayers: selectedContext.defaultContextLayers || undefined,\n    selectedMapBasemap: selectedContext.defaultBasemap || 'satellite',\n    detailedView: false,\n    recolorGroups: [],\n    mapView: selectedContext.map,\n    selectedNodesIds: [],\n    expandedNodesIds: []\n  });\n}), _defineProperty(_toolReducer, GET_COLUMNS, function (state, action) {\n  var rawNodes = action.payload[0].data;\n  var columns = action.payload[1].data; // context-dependant columns\n\n  var columnsByGroupObj = groupBy(columns, 'group');\n  var columnsByGroup = [0, 0, 0, 0].map(function (e, i) {\n    return columnsByGroupObj[i];\n  }).filter(function (n) {\n    return typeof n !== 'undefined';\n  });\n  var selectedColumnsIds = [];\n  columnsByGroup.forEach(function (group, i) {\n    var defaultColumn = group.find(function (g) {\n      return g.isDefault === true;\n    }).id;\n\n    if (state.selectedColumnsIds === undefined || state.selectedColumnsIds.length < 4) {\n      selectedColumnsIds.push(defaultColumn);\n    } else {\n      var currentColumnForGroup = state.selectedColumnsIds[i];\n      var columnId = group.find(function (g) {\n        return g.id === currentColumnForGroup;\n      }) !== undefined ? currentColumnForGroup : defaultColumn;\n      selectedColumnsIds.push(columnId);\n    }\n  });\n\n  var _getNodesDict = getNodesDict(rawNodes, columns),\n      nodesDict = _getNodesDict.nodesDict,\n      geoIdsDict = _getNodesDict.geoIdsDict; // if any selectedNode, make those columns visible (selected)\n\n\n  if (!isEmpty(state.selectedNodesIds)) {\n    state.selectedNodesIds.map(function (id) {\n      return nodesDict[id];\n    }).forEach(function (node) {\n      selectedColumnsIds[node.columnGroup] = node.columnId;\n    });\n  } // TODO the API should have the info on which file to load (if any) per column\n\n\n  var municipalitiesColumn = columns.find(function (column) {\n    return column.name === 'MUNICIPALITY';\n  });\n  var logisticsHubColumn = columns.find(function (column) {\n    return column.name === 'LOGISTICS HUB';\n  });\n\n  if (logisticsHubColumn && municipalitiesColumn) {\n    logisticsHubColumn.useGeometryFromColumnId = municipalitiesColumn.id;\n  }\n\n  return Object.assign({}, state, {\n    columns: columns,\n    nodes: rawNodes,\n    nodesDict: nodesDict,\n    geoIdsDict: geoIdsDict,\n    initialDataLoading: false,\n    selectedColumnsIds: selectedColumnsIds\n  });\n}), _defineProperty(_toolReducer, SET_FLOWS_LOADING_STATE, function (state, action) {\n  // TODO: remove this see tool.thunks.js\n  var loadedFlowsContextId = action.payload.loadedFlowsContextId;\n  return _objectSpread({}, state, {\n    flowsLoading: true,\n    loadedFlowsContextId: loadedFlowsContextId\n  });\n}), _defineProperty(_toolReducer, SET_MAP_LOADING_STATE, function (state) {\n  return Object.assign({}, state, {\n    mapLoading: true\n  });\n}), _defineProperty(_toolReducer, SET_NODE_ATTRIBUTES, function (state, action) {\n  var nodesMeta = action.payload; // store dimension values in nodesDict as uid: dimensionValue\n\n  var nodesDictWithMeta = setNodesMeta(state.nodesDict, nodesMeta, state.mapDimensions);\n\n  var _getChoropleth = getChoropleth(state.selectedMapDimensions, nodesDictWithMeta, state.mapDimensions),\n      choropleth = _getChoropleth.choropleth,\n      choroplethLegend = _getChoropleth.choroplethLegend;\n\n  return Object.assign({}, state, {\n    nodesDictWithMeta: nodesDictWithMeta,\n    choropleth: choropleth,\n    choroplethLegend: choroplethLegend,\n    mapLoading: false\n  });\n}), _defineProperty(_toolReducer, SET_MAP_DIMENSIONS_DATA, function (state, action) {\n  var mapDimensionsMeta = action.payload.mapDimensionsMetaJSON;\n  var rawMapDimensions = mapDimensionsMeta.dimensions;\n  var mapDimensions = getMapDimensions(rawMapDimensions);\n  var mapDimensionsGroups = mapDimensionsMeta.dimensionGroups.map(function (group) {\n    return {\n      group: group,\n      dimensions: mapDimensions.filter(function (dimension) {\n        return dimension.groupId === group.id;\n      })\n    };\n  });\n  return Object.assign({}, state, {\n    mapDimensions: mapDimensions,\n    mapDimensionsGroups: mapDimensionsGroups\n  });\n}), _defineProperty(_toolReducer, GET_LINKS, function (state, action) {\n  var rawLinks = action.jsonPayload.data;\n  var linksMeta = action.jsonPayload.include;\n  var currentQuant = linksMeta.quant;\n  var visibleNodes = getVisibleNodes(rawLinks, state.nodesDict, linksMeta, state.selectedColumnsIds);\n  var visibleNodesByColumn = splitVisibleNodesByColumn(visibleNodes);\n  visibleNodesByColumn = sortVisibleNodes(visibleNodesByColumn);\n  var unmergedLinks = splitLinksByColumn(rawLinks, state.nodesDict, state.selectedRecolorBy);\n  var links = mergeLinks(unmergedLinks);\n  return Object.assign({}, state, {\n    links: links,\n    unmergedLinks: unmergedLinks,\n    visibleNodes: visibleNodes,\n    visibleNodesByColumn: visibleNodesByColumn,\n    currentQuant: currentQuant,\n    flowsLoading: false\n  });\n}), _defineProperty(_toolReducer, SHOW_LINKS_ERROR, function (state) {\n  return Object.assign({}, state, {\n    links: null,\n    flowsLoading: false\n  });\n}), _defineProperty(_toolReducer, GET_LINKED_GEOIDS, function (state, action) {\n  var linkedGeoIds = action.payload && action.payload.nodes && action.payload.nodes.length ? action.payload.nodes.map(function (node) {\n    return node.geoId;\n  }) : [];\n\n  if (isEqual(linkedGeoIds, state.linkedGeoIds)) {\n    return state;\n  }\n\n  return Object.assign({}, state, {\n    linkedGeoIds: linkedGeoIds\n  });\n}), _defineProperty(_toolReducer, SELECT_BIOME_FILTER, function (state, action) {\n  return Object.assign({}, state, {\n    selectedBiomeFilter: action.payload\n  });\n}), _defineProperty(_toolReducer, SELECT_RECOLOR_BY, function (state, action) {\n  return Object.assign({}, state, {\n    selectedRecolorBy: action.payload\n  });\n}), _defineProperty(_toolReducer, SELECT_RESIZE_BY, function (state, action) {\n  return Object.assign({}, state, {\n    selectedResizeBy: action.payload\n  });\n}), _defineProperty(_toolReducer, SELECT_VIEW, function (state, action) {\n  return Object.assign({}, state, {\n    detailedView: action.detailedView,\n    forcedOverview: action.forcedOverview\n  });\n}), _defineProperty(_toolReducer, SELECT_COLUMN, function (state, action) {\n  // TODO also update choropleth with default selected indicators\n  var selectedColumnsIds = [].concat(state.selectedColumnsIds);\n\n  if (selectedColumnsIds.indexOf(action.columnId) === -1) {\n    selectedColumnsIds[action.columnIndex] = action.columnId;\n  }\n\n  return Object.assign({}, state, {\n    selectedColumnsIds: selectedColumnsIds\n  });\n}), _defineProperty(_toolReducer, UPDATE_NODE_SELECTION, function (state, action) {\n  return Object.assign({}, state, {\n    selectedNodesIds: action.ids\n  });\n}), _defineProperty(_toolReducer, HIGHLIGHT_NODE, function (state, action) {\n  return Object.assign({}, state, {\n    highlightedNodesIds: action.ids,\n    highlightedNodeCoordinates: action.coordinates\n  });\n}), _defineProperty(_toolReducer, FILTER_LINKS_BY_NODES, function (state) {\n  var selectedNodesColumnsPos = getSelectedNodesColumnsPos(state);\n  var selectedNodesAtColumns = getNodesAtColumns(state.selectedNodesIds, selectedNodesColumnsPos);\n\n  var _getNodesColoredBySel = getNodesColoredBySelection(selectedNodesAtColumns),\n      nodesColoredBySelection = _getNodesColoredBySel.nodesColoredBySelection,\n      nodesColoredAtColumn = _getNodesColoredBySel.nodesColoredAtColumn;\n\n  var recolorGroups = getRecolorGroups(state.nodesColoredBySelection, nodesColoredBySelection, state.recolorGroups);\n  var links;\n\n  if (state.selectedNodesIds.length > 0) {\n    var filteredLinks = filterLinks(state.unmergedLinks, selectedNodesAtColumns, nodesColoredBySelection, recolorGroups);\n    links = mergeLinks(filteredLinks, true);\n  } else {\n    links = mergeLinks(state.unmergedLinks);\n  }\n\n  return Object.assign({}, state, {\n    links: links,\n    nodesColoredBySelection: nodesColoredBySelection,\n    nodesColoredAtColumn: nodesColoredAtColumn,\n    recolorGroups: recolorGroups\n  });\n}), _defineProperty(_toolReducer, GET_MAP_VECTOR_DATA, function (state, action) {\n  return Object.assign({}, state, {\n    mapVectorData: action.mapVectorData\n  });\n}), _defineProperty(_toolReducer, GET_CONTEXT_LAYERS, function (state, action) {\n  return Object.assign({}, state, {\n    mapContextualLayers: action.mapContextualLayers\n  });\n}), _defineProperty(_toolReducer, SET_MAP_DIMENSIONS_SELECTION, function (state, action) {\n  var _action$payload = action.payload,\n      selectedMapDimensions = _action$payload.uids,\n      selectedYears = _action$payload.selectedYears;\n\n  var _getChoropleth2 = getChoropleth(selectedMapDimensions, state.nodesDictWithMeta, state.mapDimensions),\n      choropleth = _getChoropleth2.choropleth,\n      choroplethLegend = _getChoropleth2.choroplethLegend;\n\n  var selectedMapDimensionsWarnings = getMapDimensionsWarnings(state.mapDimensions, selectedMapDimensions, selectedYears);\n  return _objectSpread({}, state, {\n    selectedMapDimensions: selectedMapDimensions,\n    selectedMapDimensionsWarnings: selectedMapDimensionsWarnings,\n    choropleth: choropleth,\n    choroplethLegend: choroplethLegend\n  });\n}), _defineProperty(_toolReducer, TOGGLE_MAP_DIMENSION, function (state, action) {\n  var selectedMapDimensions = state.selectedMapDimensions.slice();\n  var uidIndex = selectedMapDimensions.indexOf(action.payload.uid);\n\n  if (uidIndex === -1) {\n    // dimension was not found: put it on a free slot\n    if (selectedMapDimensions[0] === null) {\n      selectedMapDimensions[0] = action.payload.uid;\n    } else if (selectedMapDimensions[1] === null) {\n      selectedMapDimensions[1] = action.payload.uid;\n    } else {\n      return state;\n    }\n  } else {\n    // dimension was found: remove it from selection\n    selectedMapDimensions[uidIndex] = null;\n  }\n\n  var _getChoropleth3 = getChoropleth(selectedMapDimensions, state.nodesDictWithMeta, state.mapDimensions),\n      choropleth = _getChoropleth3.choropleth,\n      choroplethLegend = _getChoropleth3.choroplethLegend;\n\n  var selectedMapDimensionsWarnings = getMapDimensionsWarnings(state.mapDimensions, selectedMapDimensions, action.payload.selectedYears);\n  return _objectSpread({}, state, {\n    selectedMapDimensions: selectedMapDimensions,\n    selectedMapDimensionsWarnings: selectedMapDimensionsWarnings,\n    mapLoading: true,\n    choropleth: choropleth,\n    choroplethLegend: choroplethLegend\n  });\n}), _defineProperty(_toolReducer, SELECT_CONTEXTUAL_LAYERS, function (state, action) {\n  var mapContextualLayersDict = keyBy(state.mapContextualLayers, 'id');\n  var selectedMapContextualLayersData = action.contextualLayers.map(function (layerSlug) {\n    return Object.assign({}, mapContextualLayersDict[layerSlug]);\n  });\n  return Object.assign({}, state, {\n    selectedMapContextualLayers: action.contextualLayers,\n    selectedMapContextualLayersData: selectedMapContextualLayersData\n  });\n}), _defineProperty(_toolReducer, SELECT_BASEMAP, function (state, action) {\n  return Object.assign({}, state, {\n    selectedMapBasemap: action.selectedMapBasemap\n  });\n}), _defineProperty(_toolReducer, COLLAPSE_NODE_SELECTION, function (state) {\n  return _objectSpread({}, state, {\n    expandedNodesIds: []\n  });\n}), _defineProperty(_toolReducer, EXPAND_NODE_SELECTION, function (state) {\n  return _objectSpread({}, state, {\n    expandedNodesIds: state.selectedNodesIds\n  });\n}), _defineProperty(_toolReducer, TOGGLE_MAP, function (state, action) {\n  return Object.assign({}, state, {\n    isMapVisible: action.forceState !== null ? action.forceState : !state.isMapVisible\n  });\n}), _defineProperty(_toolReducer, SAVE_MAP_VIEW, function (state, action) {\n  return Object.assign({}, state, {\n    mapView: {\n      latitude: action.latlng.lat,\n      longitude: action.latlng.lng,\n      zoom: action.zoom\n    }\n  });\n}), _defineProperty(_toolReducer, TOGGLE_MAP_SIDEBAR_GROUP, function (state, action) {\n  var expandedMapSidebarGroupsIds = state.expandedMapSidebarGroupsIds.slice();\n  var idIndex = expandedMapSidebarGroupsIds.indexOf(action.id);\n\n  if (idIndex === -1) {\n    expandedMapSidebarGroupsIds.push(action.id);\n  } else {\n    expandedMapSidebarGroupsIds.splice(idIndex, 1);\n  }\n\n  return Object.assign({}, state, {\n    expandedMapSidebarGroupsIds: expandedMapSidebarGroupsIds\n  });\n}), _defineProperty(_toolReducer, RESET_TOOL_STATE, function (state, action) {\n  return _objectSpread({}, toolInitialState, action.payload);\n}), _defineProperty(_toolReducer, SET_SANKEY_SEARCH_VISIBILITY, function (state, action) {\n  return Object.assign({}, state, {\n    isSearchOpen: action.searchVisibility\n  });\n}), _defineProperty(_toolReducer, RESET_TOOL_LOADERS, function (state) {\n  return Object.assign({}, state, {\n    flowsLoading: true,\n    mapLoading: true\n  });\n}), _toolReducer);\n\nvar toolReducerTypes = function toolReducerTypes(PropTypes) {\n  return {\n    choropleth: PropTypes.object.isRequired,\n    choroplethLegend: PropTypes.object,\n    columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n    currentQuant: PropTypes.object,\n    detailedView: PropTypes.bool,\n    expandedMapSidebarGroupsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    expandedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    forcedOverview: PropTypes.bool,\n    geoIdsDict: PropTypes.object.isRequired,\n    highlightedNodeCoordinates: PropTypes.object,\n    highlightedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    initialDataLoading: PropTypes.bool,\n    isMapVisible: PropTypes.bool,\n    isSearchOpen: PropTypes.bool,\n    linkedGeoIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    links: PropTypes.arrayOf(PropTypes.object).isRequired,\n    flowsLoading: PropTypes.bool,\n    mapContextualLayers: PropTypes.arrayOf(PropTypes.object).isRequired,\n    mapDimensions: PropTypes.arrayOf(PropTypes.object).isRequired,\n    mapDimensionsGroups: PropTypes.arrayOf(PropTypes.object).isRequired,\n    mapLoading: PropTypes.bool,\n    mapVectorData: PropTypes.array,\n    mapView: PropTypes.object,\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    nodesColoredAtColumn: PropTypes.number,\n    nodesColoredBySelection: PropTypes.arrayOf(PropTypes.number).isRequired,\n    nodesDict: PropTypes.object,\n    nodesDictWithMeta: PropTypes.object.isRequired,\n    recolorByNodeIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    recolorGroups: PropTypes.arrayOf(PropTypes.number).isRequired,\n    selectedBiomeFilter: PropTypes.object,\n    selectedColumnsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    selectedMapBasemap: PropTypes.string,\n    selectedMapContextualLayers: PropTypes.array,\n    selectedMapDimensions: PropTypes.array.isRequired,\n    selectedMapDimensionsWarnings: PropTypes.string,\n    selectedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    selectedRecolorBy: PropTypes.object.isRequired,\n    selectedResizeBy: PropTypes.object.isRequired,\n    unmergedLinks: PropTypes.arrayOf(PropTypes.object).isRequired,\n    visibleNodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    visibleNodesByColumn: PropTypes.arrayOf(PropTypes.object).isRequired,\n    loadedFlowsContextId: PropTypes.string\n  };\n};\n\nvar _default = createReducer(toolInitialState, toolReducer, toolReducerTypes);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_toolReducer, \"_toolReducer\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(toolInitialState, \"toolInitialState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(toolReducer, \"toolReducer\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(toolReducerTypes, \"toolReducerTypes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.reducer.js"],"names":["toolInitialState","choropleth","choroplethLegend","columns","currentQuant","detailedView","expandedMapSidebarGroupsIds","expandedNodesIds","forcedOverview","geoIdsDict","highlightedNodeCoordinates","highlightedNodesIds","initialDataLoading","isMapVisible","isSearchOpen","linkedGeoIds","links","flowsLoading","mapContextualLayers","mapDimensions","mapDimensionsGroups","mapLoading","mapVectorData","mapView","nodes","nodesColoredAtColumn","nodesColoredBySelection","nodesDict","nodesDictWithMeta","recolorByNodeIds","recolorGroups","selectedBiomeFilter","name","value","selectedColumnsIds","selectedMapBasemap","selectedMapContextualLayers","selectedMapDimensions","selectedMapDimensionsWarnings","selectedNodesIds","selectedRecolorBy","type","selectedResizeBy","unmergedLinks","visibleNodes","visibleNodesByColumn","loadedFlowsContextId","toolReducer","action","selectedContext","recolorBy","state","resizeBy","biomeFilter","filterBy","Object","defaultRecolorBy","defaultResizeBy","defaultBiomeFilterBy","rawNodes","columnsByGroupObj","groupBy","columnsByGroup","defaultColumn","g","currentColumnForGroup","columnId","getNodesDict","isEmpty","node","municipalitiesColumn","column","logisticsHubColumn","nodesMeta","setNodesMeta","getChoropleth","mapDimensionsMeta","rawMapDimensions","getMapDimensions","group","dimensions","dimension","rawLinks","linksMeta","getVisibleNodes","splitVisibleNodesByColumn","sortVisibleNodes","splitLinksByColumn","mergeLinks","isEqual","payload","ids","coordinates","selectedNodesColumnsPos","getSelectedNodesColumnsPos","selectedNodesAtColumns","getNodesAtColumns","getNodesColoredBySelection","getRecolorGroups","filteredLinks","filterLinks","selectedYears","getMapDimensionsWarnings","uidIndex","mapContextualLayersDict","keyBy","selectedMapContextualLayersData","latitude","longitude","zoom","idIndex","searchVisibility","toolReducerTypes","PropTypes","string","createReducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,qBAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,cAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,aAAA,EAAA,wBAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,4BAAA,EAAA,4BAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,wBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,uBAAA,EAAA,uBAAA,EAAA,kBAAA,QAAA,sBAAA;AAiCA,SAAA,oBAAA,EAAA,WAAA,EAAA,mBAAA,QAAA,6BAAA;AAKA,OAAA,OAAA,MAAA,gBAAA;AACA,OAAA,OAAA,MAAA,gBAAA;AACA,OAAA,OAAA,MAAA,gBAAA;AACA,OAAA,KAAA,MAAA,cAAA;AACA,OAAA,aAAA,MAAA,qBAAA;AACA,SAAA,0BAAA,QAAA,sCAAA;AACA,OAAA,WAAA,MAAA,sCAAA;AACA,OAAA,aAAA,MAAA,wCAAA;AACA,OAAA,gBAAA,MAAA,2CAAA;AACA,SAAA,wBAAA,QAAA,mDAAA;AACA,OAAA,iBAAA,MAAA,4CAAA;AACA,OAAA,0BAAA,MAAA,qDAAA;AACA,OAAA,YAAA,MAAA,uCAAA;AACA,OAAA,gBAAA,MAAA,2CAAA;AACA,OAAA,eAAA,MAAA,0CAAA;AACA,OAAA,UAAA,MAAA,qCAAA;AACA,OAAA,YAAA,MAAA,uCAAA;AACA,OAAA,gBAAA,MAAA,2CAAA;AACA,OAAA,kBAAA,MAAA,6CAAA;AACA,OAAA,yBAAA,MAAA,oDAAA;AAEA,OAAO,IAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,UAAU,EADoB,EAAA;AAE9BC,EAAAA,gBAAgB,EAFc,IAAA;AAG9BC,EAAAA,OAAO,EAHuB,EAAA;AAI9BC,EAAAA,YAAY,EAJkB,IAAA;AAK9BC,EAAAA,YAAY,EALkB,KAAA;AAM9BC,EAAAA,2BAA2B,EANG,EAAA;AAO9BC,EAAAA,gBAAgB,EAPc,EAAA;AAQ9BC,EAAAA,cAAc,EARgB,KAAA;AAS9BC,EAAAA,UAAU,EAToB,EAAA;AAU9BC,EAAAA,0BAA0B,EAVI,IAAA;AAW9BC,EAAAA,mBAAmB,EAXW,EAAA;AAY9BC,EAAAA,kBAAkB,EAZY,KAAA;AAa9BC,EAAAA,YAAY,EAbkB,KAAA;AAc9BC,EAAAA,YAAY,EAdkB,KAAA;AAe9BC,EAAAA,YAAY,EAfkB,EAAA;AAgB9BC,EAAAA,KAAK,EAhByB,EAAA;AAiB9BC,EAAAA,YAAY,EAjBkB,IAAA;AAkB9BC,EAAAA,mBAAmB,EAlBW,EAAA;AAmB9BC,EAAAA,aAAa,EAnBiB,EAAA;AAoB9BC,EAAAA,mBAAmB,EApBW,EAAA;AAqB9BC,EAAAA,UAAU,EArBoB,IAAA;AAsB9BC,EAAAA,aAAa,EAtBiB,IAAA;AAuB9BC,EAAAA,OAAO,EAvBuB,IAAA;AAwB9BC,EAAAA,KAAK,EAxByB,EAAA;AAyB9BC,EAAAA,oBAAoB,EAzBU,IAAA;AA0B9BC,EAAAA,uBAAuB,EA1BO,EAAA;AA2B9BC,EAAAA,SAAS,EA3BqB,IAAA;AA4B9BC,EAAAA,iBAAiB,EA5Ba,EAAA;AA6B9BC,EAAAA,gBAAgB,EA7Bc,EAAA;AA8B9BC,EAAAA,aAAa,EA9BiB,EAAA;AA+B9BC,EAAAA,mBAAmB,EAAE;AAAEC,IAAAA,IAAI,EAAN,MAAA;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GA/BS;AAgC9BC,EAAAA,kBAAkB,EAhCY,EAAA;AAiC9BC,EAAAA,kBAAkB,EAjCY,IAAA;AAkC9BC,EAAAA,2BAA2B,EAlCG,IAAA;AAmC9BC,EAAAA,qBAAqB,EAAE,CAAA,IAAA,EAnCO,IAmCP,CAnCO;AAoC9BC,EAAAA,6BAA6B,EApCC,IAAA;AAqC9BC,EAAAA,gBAAgB,EArCc,EAAA;AAsC9BC,EAAAA,iBAAiB,EAAE;AAAEC,IAAAA,IAAI,EAAN,MAAA;AAAgBT,IAAAA,IAAI,EAAE;AAAtB,GAtCW;AAuC9BU,EAAAA,gBAAgB,EAAE;AAAED,IAAAA,IAAI,EAAN,MAAA;AAAgBT,IAAAA,IAAI,EAAE;AAAtB,GAvCY;AAwC9BW,EAAAA,aAAa,EAxCiB,EAAA;AAyC9BC,EAAAA,YAAY,EAzCkB,EAAA;AA0C9BC,EAAAA,oBAAoB,EA1CU,EAAA;AA2C9BC,EAAAA,oBAAoB,EAAE;AA3CQ,CAAzB;AA8CP,IAAMC,WAAW,IAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EACsB;AACnC,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBnC,IAAAA,kBAAkB,EAAE;AAAvC,GAAA,EAAgDoC,MAAM,CAANA,OAAAA,CAAhD,IAAA,CAAA;AAFa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,eAAA,EAAA,UAAA,KAAA,EAIU;AACvB,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BrC,IAAAA,mBAAmB,EADW,EAAA;AAE9B4B,IAAAA,gBAAgB,EAFc,EAAA;AAG9BhC,IAAAA,gBAAgB,EAHc,EAAA;AAI9BwB,IAAAA,mBAAmB,EAAE;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAJS;AAK9BJ,IAAAA,gBAAgB,EAAE;AALY,GAAzB,CAAP;AALa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,oBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAauB;AACpC,MAAMoB,eAAe,GAAGD,MAAM,CAA9B,OAAA;AAEA,MAAIR,iBAAiB,GAAG,eAAe,CAAf,SAAA,CAAA,IAAA,CACtB,UAAA,SAAA,EAAS;AAAA,WAAIU,SAAS,CAATA,IAAAA,KAAmBC,KAAK,CAA5B,qBAAA;AADX,GAAwB,CAAxB;;AAGA,MAAI,CAAJ,iBAAA,EAAwB;AACtBX,IAAAA,iBAAiB,GAAG,eAAe,CAAf,SAAA,CAAA,IAAA,CAA+B,UAAA,SAAA,EAAS;AAAA,aAAIU,SAAS,CAATA,SAAAA,KAAJ,IAAA;AAA5DV,KAAoB,CAApBA;AACD;;AAED,MAAIE,gBAAgB,GAAG,eAAe,CAAf,QAAA,CAAA,IAAA,CACrB,UAAA,QAAA,EAAQ;AAAA,WAAIU,QAAQ,CAARA,IAAAA,KAAkBD,KAAK,CAA3B,oBAAA;AADV,GAAuB,CAAvB;;AAGA,MAAI,CAAJ,gBAAA,EAAuB;AACrBT,IAAAA,gBAAgB,GAAG,eAAe,CAAf,QAAA,CAAA,IAAA,CAA8B,UAAA,QAAA,EAAQ;AAAA,aAAIU,QAAQ,CAARA,SAAAA,KAAJ,IAAA;AAAzDV,KAAmB,CAAnBA;AACD;;AAED,MAAA,WAAA;;AACA,MAAIS,KAAK,CAALA,uBAAAA,KAAAA,MAAAA,IAA4C,CAACF,eAAe,CAAfA,QAAAA,CAAD,MAAA,GAAhD,CAAA,EAAsF;AACpFI,IAAAA,WAAW,GAAG;AAAEpB,MAAAA,KAAK,EAAE;AAAT,KAAdoB;AADF,GAAA,MAEO;AACLA,IAAAA,WAAW,GAAG,eAAe,CAAf,QAAA,CAAA,CAAA,EAAA,KAAA,CAAA,IAAA,CACZ,UAAA,QAAA,EAAQ;AAAA,aAAIC,QAAQ,CAARA,IAAAA,KAAkBH,KAAK,CAA3B,uBAAA;AADVE,KAAc,CAAdA;AArBkC,GAAA,CA0BpC;;;AACA,MAAIjB,2BAA2B,GAAGa,eAAe,CAAfA,oBAAAA,IAAlC,SAAA;;AACA,MACEE,KAAK,CAALA,2BAAAA,KAAAA,SAAAA,IACAA,KAAK,CAALA,2BAAAA,KAFF,IAAA,EAGE;AACAf,IAAAA,2BAA2B,GAAGe,KAAK,CAAnCf,2BAAAA;AACD;;AAED,MAAID,kBAAkB,GAAGc,eAAe,CAAfA,cAAAA,IAAzB,WAAA;;AACA,MAAIE,KAAK,CAALA,kBAAAA,KAAAA,SAAAA,IAA0CA,KAAK,CAALA,kBAAAA,KAA9C,IAAA,EAAiF;AAC/EhB,IAAAA,kBAAkB,GAAGgB,KAAK,CAA1BhB,kBAAAA;AArCkC,GAAA,CAwCpC;;;AACA,MAAMZ,OAAO,GAAG4B,KAAK,CAALA,OAAAA,GAAgBI,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBJ,KAAK,CAAvCA,OAAgBI,CAAhBJ,GAAmDF,eAAe,CAAlF,GAAA;AAEA,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BT,IAAAA,iBAAiB,EAAEA,iBAAiB,IAAI;AAAEC,MAAAA,IAAI,EAAN,MAAA;AAAgBT,MAAAA,IAAI,EAAE;AAAtB,KADV;AAE9BU,IAAAA,gBAAgB,EAFc,gBAAA;AAG9BX,IAAAA,mBAAmB,EAAEsB,WAAW,IAAI;AAAEpB,MAAAA,KAAK,EAAP,MAAA;AAAiBD,MAAAA,IAAI,EAAE;AAAvB,KAHN;AAI9BI,IAAAA,2BAA2B,EAJG,2BAAA;AAK9BD,IAAAA,kBAAkB,EALY,kBAAA;AAM9BZ,IAAAA,OAAO,EAAPA;AAN8B,GAAzB,CAAP;AAxDa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAiEc;AAC3B,MAAM0B,eAAe,GAAGD,MAAM,CAA9B,OAAA;;AACA,MAAI,CAAJ,eAAA,EAAsB;AACpB,WAAOO,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAP,KAAOA,CAAP;AACD;;AAED,MAAMC,gBAAgB,GAAG,eAAe,CAAf,SAAA,CAAA,IAAA,CACvB,UAAA,SAAA,EAAS;AAAA,WAAIN,SAAS,CAATA,SAAAA,KAAJ,IAAA;AADX,GAAyB,CAAzB;AAGA,MAAMO,eAAe,GAAG,eAAe,CAAf,QAAA,CAAA,IAAA,CAA8B,UAAA,QAAA,EAAQ;AAAA,WAAIL,QAAQ,CAARA,SAAAA,KAAJ,IAAA;AAA9D,GAAwB,CAAxB;AACA,MAAMM,oBAAoB,GACxBT,eAAe,CAAfA,QAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAuCA,eAAe,CAAfA,QAAAA,CAAAA,CAAAA,EADzC,CACyCA,CADzC;AAGA,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BT,IAAAA,iBAAiB,EAAEgB,gBAAgB,IAAI;AAAEf,MAAAA,IAAI,EAAN,MAAA;AAAgBT,MAAAA,IAAI,EAAE;AAAtB,KADT;AAE9BU,IAAAA,gBAAgB,EAFc,eAAA;AAG9BX,IAAAA,mBAAmB,EAAE2B,oBAAoB,IAAI;AAAE1B,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAHf;AAI9BG,IAAAA,2BAA2B,EAAEa,eAAe,CAAfA,oBAAAA,IAJC,SAAA;AAK9Bd,IAAAA,kBAAkB,EAAEc,eAAe,CAAfA,cAAAA,IALU,WAAA;AAM9B5C,IAAAA,YAAY,EANkB,KAAA;AAO9ByB,IAAAA,aAAa,EAPiB,EAAA;AAQ9BP,IAAAA,OAAO,EAAE0B,eAAe,CARM,GAAA;AAS9BV,IAAAA,gBAAgB,EATc,EAAA;AAU9BhC,IAAAA,gBAAgB,EAAE;AAVY,GAAzB,CAAP;AA9Ea,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA2Fc;AAC3B,MAAMoD,QAAQ,GAAGX,MAAM,CAANA,OAAAA,CAAAA,CAAAA,EAAjB,IAAA;AACA,MAAM7C,OAAO,GAAG6C,MAAM,CAANA,OAAAA,CAAAA,CAAAA,EAFW,IAE3B,CAF2B,CAI3B;;AACA,MAAMY,iBAAiB,GAAGC,OAAO,CAAA,OAAA,EAAjC,OAAiC,CAAjC;AACA,MAAMC,cAAc,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAChB,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAUF,iBAAiB,CAA3B,CAA2B,CAA3B;AADgB,GAAA,EAAA,MAAA,CAEb,UAAA,CAAA,EAAC;AAAA,WAAI,OAAA,CAAA,KAAJ,WAAA;AAFX,GAAuB,CAAvB;AAIA,MAAM1B,kBAAkB,GAAxB,EAAA;AACA4B,EAAAA,cAAc,CAAdA,OAAAA,CAAuB,UAAA,KAAA,EAAA,CAAA,EAAc;AACnC,QAAMC,aAAa,GAAG,KAAK,CAAL,IAAA,CAAW,UAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAADA,SAAAA,KAAJ,IAAA;AAAZ,KAAA,EAAtB,EAAA;;AACA,QAAIb,KAAK,CAALA,kBAAAA,KAAAA,SAAAA,IAA0CA,KAAK,CAALA,kBAAAA,CAAAA,MAAAA,GAA9C,CAAA,EAAmF;AACjFjB,MAAAA,kBAAkB,CAAlBA,IAAAA,CAAAA,aAAAA;AADF,KAAA,MAEO;AACL,UAAM+B,qBAAqB,GAAGd,KAAK,CAALA,kBAAAA,CAA9B,CAA8BA,CAA9B;AACA,UAAMe,QAAQ,GACZ,KAAK,CAAL,IAAA,CAAW,UAAA,CAAA,EAAC;AAAA,eAAIF,CAAC,CAADA,EAAAA,KAAJ,qBAAA;AAAZ,OAAA,MAAA,SAAA,GAAA,qBAAA,GADF,aAAA;AAIA9B,MAAAA,kBAAkB,CAAlBA,IAAAA,CAAAA,QAAAA;AACD;AAXH4B,GAAAA;;AAX2B,MAAA,aAAA,GAyBOK,YAAY,CAAA,QAAA,EAzBnB,OAyBmB,CAzBnB;AAAA,MAyBnBxC,SAzBmB,GAAA,aAAA,CAAA,SAAA;AAAA,MAyBRlB,UAzBQ,GAAA,aAAA,CAAA,UAAA,CAAA,CA2B3B;;;AACA,MAAI,CAAC2D,OAAO,CAACjB,KAAK,CAAlB,gBAAY,CAAZ,EAAsC;AACpCA,IAAAA,KAAK,CAALA,gBAAAA,CAAAA,GAAAA,CACO,UAAA,EAAA,EAAE;AAAA,aAAIxB,SAAS,CAAb,EAAa,CAAb;AADTwB,KAAAA,EAAAA,OAAAA,CAEW,UAAA,IAAA,EAAQ;AACfjB,MAAAA,kBAAkB,CAACmC,IAAI,CAAvBnC,WAAkB,CAAlBA,GAAuCmC,IAAI,CAA3CnC,QAAAA;AAHJiB,KAAAA;AA7ByB,GAAA,CAoC3B;;;AACA,MAAMmB,oBAAoB,GAAG,OAAO,CAAP,IAAA,CAAa,UAAA,MAAA,EAAM;AAAA,WAAIC,MAAM,CAANA,IAAAA,KAAJ,cAAA;AAAhD,GAA6B,CAA7B;AACA,MAAMC,kBAAkB,GAAG,OAAO,CAAP,IAAA,CAAa,UAAA,MAAA,EAAM;AAAA,WAAID,MAAM,CAANA,IAAAA,KAAJ,eAAA;AAA9C,GAA2B,CAA3B;;AACA,MAAIC,kBAAkB,IAAtB,oBAAA,EAAgD;AAC9CA,IAAAA,kBAAkB,CAAlBA,uBAAAA,GAA6CF,oBAAoB,CAAjEE,EAAAA;AACD;;AAED,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BrE,IAAAA,OAAO,EADuB,OAAA;AAE9BqB,IAAAA,KAAK,EAFyB,QAAA;AAG9BG,IAAAA,SAAS,EAHqB,SAAA;AAI9BlB,IAAAA,UAAU,EAJoB,UAAA;AAK9BG,IAAAA,kBAAkB,EALY,KAAA;AAM9BsB,IAAAA,kBAAkB,EAAlBA;AAN8B,GAAzB,CAAP;AAtIa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,uBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAgJ0B;AACvC;AADuC,MAE/BY,oBAF+B,GAENE,MAAM,CAFA,OAENA,CAFM,oBAAA;AAGvC,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmB/B,IAAAA,YAAY,EAA/B,IAAA;AAAuC6B,IAAAA,oBAAoB,EAApBA;AAAvC,GAAA,CAAA;AAnJa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,qBAAA,EAAA,UAAA,KAAA,EAsJgB;AAC7B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEzB,IAAAA,UAAU,EAAE;AAAd,GAAzB,CAAP;AAvJa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA0JsB;AACnC,MAAMoD,SAAS,GAAGzB,MAAM,CADW,OACnC,CADmC,CAGnC;;AACA,MAAMpB,iBAAiB,GAAG8C,YAAY,CAACvB,KAAK,CAAN,SAAA,EAAA,SAAA,EAA6BA,KAAK,CAAxE,aAAsC,CAAtC;;AAJmC,MAAA,cAAA,GAMMwB,aAAa,CACpDxB,KAAK,CAD+C,qBAAA,EAAA,iBAAA,EAGpDA,KAAK,CAT4B,aAMmB,CANnB;AAAA,MAM3BlD,UAN2B,GAAA,cAAA,CAAA,UAAA;AAAA,MAMfC,gBANe,GAAA,cAAA,CAAA,gBAAA;;AAYnC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9B0B,IAAAA,iBAAiB,EADa,iBAAA;AAE9B3B,IAAAA,UAAU,EAFoB,UAAA;AAG9BC,IAAAA,gBAAgB,EAHc,gBAAA;AAI9BmB,IAAAA,UAAU,EAAE;AAJkB,GAAzB,CAAP;AAtKa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,uBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA6K0B;AACvC,MAAMuD,iBAAiB,GAAG5B,MAAM,CAANA,OAAAA,CAA1B,qBAAA;AACA,MAAM6B,gBAAgB,GAAGD,iBAAiB,CAA1C,UAAA;AACA,MAAMzD,aAAa,GAAG2D,gBAAgB,CAAtC,gBAAsC,CAAtC;AAEA,MAAM1D,mBAAmB,GAAG,iBAAiB,CAAjB,eAAA,CAAA,GAAA,CAAsC,UAAA,KAAA,EAAK;AAAA,WAAK;AAC1E2D,MAAAA,KAAK,EADqE,KAAA;AAE1EC,MAAAA,UAAU,EAAE,aAAa,CAAb,MAAA,CAAqB,UAAA,SAAA,EAAS;AAAA,eAAIC,SAAS,CAATA,OAAAA,KAAsBF,KAAK,CAA/B,EAAA;AAA9B,OAAA;AAF8D,KAAL;AAAvE,GAA4B,CAA5B;AAKA,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9B5D,IAAAA,aAAa,EADiB,aAAA;AAE9BC,IAAAA,mBAAmB,EAAnBA;AAF8B,GAAzB,CAAP;AAvLa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,SAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA4LY;AACzB,MAAM8D,QAAQ,GAAGlC,MAAM,CAANA,WAAAA,CAAjB,IAAA;AACA,MAAMmC,SAAS,GAAGnC,MAAM,CAANA,WAAAA,CAAlB,OAAA;AAEA,MAAM5C,YAAY,GAAG+E,SAAS,CAA9B,KAAA;AAEA,MAAMvC,YAAY,GAAGwC,eAAe,CAAA,QAAA,EAElCjC,KAAK,CAF6B,SAAA,EAAA,SAAA,EAIlCA,KAAK,CAJP,kBAAoC,CAApC;AAOA,MAAIN,oBAAoB,GAAGwC,yBAAyB,CAApD,YAAoD,CAApD;AACAxC,EAAAA,oBAAoB,GAAGyC,gBAAgB,CAAvCzC,oBAAuC,CAAvCA;AAEA,MAAMF,aAAa,GAAG4C,kBAAkB,CAAA,QAAA,EAAWpC,KAAK,CAAhB,SAAA,EAA4BA,KAAK,CAAzE,iBAAwC,CAAxC;AACA,MAAMnC,KAAK,GAAGwE,UAAU,CAAxB,aAAwB,CAAxB;AAEA,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BxE,IAAAA,KAAK,EADyB,KAAA;AAE9B2B,IAAAA,aAAa,EAFiB,aAAA;AAG9BC,IAAAA,YAAY,EAHkB,YAAA;AAI9BC,IAAAA,oBAAoB,EAJU,oBAAA;AAK9BzC,IAAAA,YAAY,EALkB,YAAA;AAM9Ba,IAAAA,YAAY,EAAE;AANgB,GAAzB,CAAP;AA/Ma,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,gBAAA,EAAA,UAAA,KAAA,EAwNW;AACxB,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAED,IAAAA,KAAK,EAAP,IAAA;AAAeC,IAAAA,YAAY,EAAE;AAA7B,GAAzB,CAAP;AAzNa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA2NoB;AACjC,MAAMF,YAAY,GAChB,MAAM,CAAN,OAAA,IAAkBiC,MAAM,CAANA,OAAAA,CAAlB,KAAA,IAA0CA,MAAM,CAANA,OAAAA,CAAAA,KAAAA,CAA1C,MAAA,GACI,MAAM,CAAN,OAAA,CAAA,KAAA,CAAA,GAAA,CAAyB,UAAA,IAAA,EAAI;AAAA,WAAIqB,IAAI,CAAR,KAAA;AADjC,GACI,CADJ,GADF,EAAA;;AAIA,MAAIoB,OAAO,CAAA,YAAA,EAAetC,KAAK,CAA/B,YAAW,CAAX,EAA+C;AAC7C,WAAA,KAAA;AACD;;AACD,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEpC,IAAAA,YAAY,EAAZA;AAAF,GAAzB,CAAP;AAnOa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAqOsB;AACnC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEgB,IAAAA,mBAAmB,EAAEiB,MAAM,CAAC0C;AAA9B,GAAzB,CAAP;AAtOa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAwOoB;AACjC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAElD,IAAAA,iBAAiB,EAAEQ,MAAM,CAAC0C;AAA5B,GAAzB,CAAP;AAzOa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,gBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA2OmB;AAChC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEhD,IAAAA,gBAAgB,EAAEM,MAAM,CAAC0C;AAA3B,GAAzB,CAAP;AA5Oa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA8Oc;AAC3B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BrF,IAAAA,YAAY,EAAE2C,MAAM,CADU,YAAA;AAE9BxC,IAAAA,cAAc,EAAEwC,MAAM,CAACxC;AAFO,GAAzB,CAAP;AA/Oa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,aAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAqPgB;AAC7B;AACA,MAAM0B,kBAAkB,GAAG,GAAA,MAAA,CAAUiB,KAAK,CAA1C,kBAA2B,CAA3B;;AACA,MAAIjB,kBAAkB,CAAlBA,OAAAA,CAA2Bc,MAAM,CAAjCd,QAAAA,MAAgD,CAApD,CAAA,EAAwD;AACtDA,IAAAA,kBAAkB,CAACc,MAAM,CAAzBd,WAAkB,CAAlBA,GAAyCc,MAAM,CAA/Cd,QAAAA;AACD;;AACD,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEA,IAAAA,kBAAkB,EAAlBA;AAAF,GAAzB,CAAP;AA3Pa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,qBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA6PwB;AACrC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BK,IAAAA,gBAAgB,EAAES,MAAM,CAAC2C;AADK,GAAzB,CAAP;AA9Pa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAkQiB;AAC9B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BhF,IAAAA,mBAAmB,EAAEqC,MAAM,CADG,GAAA;AAE9BtC,IAAAA,0BAA0B,EAAEsC,MAAM,CAAC4C;AAFL,GAAzB,CAAP;AAnQa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,qBAAA,EAAA,UAAA,KAAA,EAwQgB;AAC7B,MAAMC,uBAAuB,GAAGC,0BAA0B,CAA1D,KAA0D,CAA1D;AACA,MAAMC,sBAAsB,GAAGC,iBAAiB,CAC9C7C,KAAK,CADyC,gBAAA,EAAhD,uBAAgD,CAAhD;;AAF6B,MAAA,qBAAA,GAO6B8C,0BAA0B,CAPvD,sBAOuD,CAPvD;AAAA,MAOrBvE,uBAPqB,GAAA,qBAAA,CAAA,uBAAA;AAAA,MAOID,oBAPJ,GAAA,qBAAA,CAAA,oBAAA;;AAU7B,MAAMK,aAAa,GAAGoE,gBAAgB,CACpC/C,KAAK,CAD+B,uBAAA,EAAA,uBAAA,EAGpCA,KAAK,CAHP,aAAsC,CAAtC;AAMA,MAAA,KAAA;;AACA,MAAIA,KAAK,CAALA,gBAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAuC;AACrC,QAAMgD,aAAa,GAAGC,WAAW,CAC/BjD,KAAK,CAD0B,aAAA,EAAA,sBAAA,EAAA,uBAAA,EAAjC,aAAiC,CAAjC;AAMAnC,IAAAA,KAAK,GAAGwE,UAAU,CAAA,aAAA,EAAlBxE,IAAkB,CAAlBA;AAPF,GAAA,MAQO;AACLA,IAAAA,KAAK,GAAGwE,UAAU,CAACrC,KAAK,CAAxBnC,aAAkB,CAAlBA;AACD;;AAED,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BA,IAAAA,KAAK,EADyB,KAAA;AAE9BU,IAAAA,uBAAuB,EAFO,uBAAA;AAG9BD,IAAAA,oBAAoB,EAHU,oBAAA;AAI9BK,IAAAA,aAAa,EAAbA;AAJ8B,GAAzB,CAAP;AArSa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA4SsB;AACnC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAER,IAAAA,aAAa,EAAE0B,MAAM,CAAC1B;AAAxB,GAAzB,CAAP;AA7Sa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,kBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA+SqB;AAClC,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEJ,IAAAA,mBAAmB,EAAE8B,MAAM,CAAC9B;AAA9B,GAAzB,CAAP;AAhTa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,4BAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAkT+B;AAAA,MAAA,eAAA,GACW8B,MAAM,CADjB,OAAA;AAAA,MAC9BX,qBAD8B,GAAA,eAAA,CAAA,IAAA;AAAA,MACPgE,aADO,GAAA,eAAA,CAAA,aAAA;;AAAA,MAAA,eAAA,GAEH1B,aAAa,CAAA,qBAAA,EAEpDxB,KAAK,CAF+C,iBAAA,EAGpDA,KAAK,CALqC,aAEU,CAFV;AAAA,MAEpClD,UAFoC,GAAA,eAAA,CAAA,UAAA;AAAA,MAExBC,gBAFwB,GAAA,eAAA,CAAA,gBAAA;;AAO5C,MAAMoC,6BAA6B,GAAGgE,wBAAwB,CAC5DnD,KAAK,CADuD,aAAA,EAAA,qBAAA,EAA9D,aAA8D,CAA9D;AAMA,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEd,IAAAA,qBAAqB,EAFvB,qBAAA;AAGEC,IAAAA,6BAA6B,EAH/B,6BAAA;AAIErC,IAAAA,UAAU,EAJZ,UAAA;AAKEC,IAAAA,gBAAgB,EAAhBA;AALF,GAAA,CAAA;AA/Ta,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,oBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAuUuB;AACpC,MAAMmC,qBAAqB,GAAGc,KAAK,CAALA,qBAAAA,CAA9B,KAA8BA,EAA9B;AACA,MAAMoD,QAAQ,GAAGlE,qBAAqB,CAArBA,OAAAA,CAA8BW,MAAM,CAANA,OAAAA,CAA/C,GAAiBX,CAAjB;;AAEA,MAAIkE,QAAQ,KAAK,CAAjB,CAAA,EAAqB;AACnB;AACA,QAAIlE,qBAAqB,CAArBA,CAAqB,CAArBA,KAAJ,IAAA,EAAuC;AACrCA,MAAAA,qBAAqB,CAArBA,CAAqB,CAArBA,GAA2BW,MAAM,CAANA,OAAAA,CAA3BX,GAAAA;AADF,KAAA,MAEO,IAAIA,qBAAqB,CAArBA,CAAqB,CAArBA,KAAJ,IAAA,EAAuC;AAC5CA,MAAAA,qBAAqB,CAArBA,CAAqB,CAArBA,GAA2BW,MAAM,CAANA,OAAAA,CAA3BX,GAAAA;AADK,KAAA,MAEA;AACL,aAAA,KAAA;AACD;AARH,GAAA,MASO;AACL;AACAA,IAAAA,qBAAqB,CAArBA,QAAqB,CAArBA,GAAAA,IAAAA;AACD;;AAhBmC,MAAA,eAAA,GAkBKsC,aAAa,CAAA,qBAAA,EAEpDxB,KAAK,CAF+C,iBAAA,EAGpDA,KAAK,CArB6B,aAkBkB,CAlBlB;AAAA,MAkB5BlD,UAlB4B,GAAA,eAAA,CAAA,UAAA;AAAA,MAkBhBC,gBAlBgB,GAAA,eAAA,CAAA,gBAAA;;AAwBpC,MAAMoC,6BAA6B,GAAGgE,wBAAwB,CAC5DnD,KAAK,CADuD,aAAA,EAAA,qBAAA,EAG5DH,MAAM,CAANA,OAAAA,CAHF,aAA8D,CAA9D;AAKA,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEX,IAAAA,qBAAqB,EAFvB,qBAAA;AAGEC,IAAAA,6BAA6B,EAH/B,6BAAA;AAIEjB,IAAAA,UAAU,EAJZ,IAAA;AAKEpB,IAAAA,UAAU,EALZ,UAAA;AAMEC,IAAAA,gBAAgB,EAAhBA;AANF,GAAA,CAAA;AApWa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,wBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA6W2B;AACxC,MAAMsG,uBAAuB,GAAGC,KAAK,CAACtD,KAAK,CAAN,mBAAA,EAArC,IAAqC,CAArC;AACA,MAAMuD,+BAA+B,GAAG,MAAM,CAAN,gBAAA,CAAA,GAAA,CAA4B,UAAA,SAAA,EAAS;AAAA,WAC3EnD,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBiD,uBAAuB,CADkC,SAClC,CAAzCjD,CAD2E;AAA7E,GAAwC,CAAxC;AAIA,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BnB,IAAAA,2BAA2B,EAAEY,MAAM,CADL,gBAAA;AAE9B0D,IAAAA,+BAA+B,EAA/BA;AAF8B,GAAzB,CAAP;AAnXa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAwXiB;AAC9B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEvE,IAAAA,kBAAkB,EAAEa,MAAM,CAACb;AAA7B,GAAzB,CAAP;AAzXa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,uBAAA,EAAA,UAAA,KAAA,EA2XkB;AAC/B,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE5B,IAAAA,gBAAgB,EAAE;AAFpB,GAAA,CAAA;AA5Xa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,qBAAA,EAAA,UAAA,KAAA,EAiYgB;AAC7B,SAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEA,IAAAA,gBAAgB,EAAE4C,KAAK,CAACZ;AAF1B,GAAA,CAAA;AAlYa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,UAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAuYa;AAC1B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9B1B,IAAAA,YAAY,EAAEmC,MAAM,CAANA,UAAAA,KAAAA,IAAAA,GAA6BA,MAAM,CAAnCA,UAAAA,GAAiD,CAACG,KAAK,CAACtC;AADxC,GAAzB,CAAP;AAxYa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,aAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA4YgB;AAC7B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAC9BU,IAAAA,OAAO,EAAE;AACPoF,MAAAA,QAAQ,EAAE3D,MAAM,CAANA,MAAAA,CADH,GAAA;AAEP4D,MAAAA,SAAS,EAAE5D,MAAM,CAANA,MAAAA,CAFJ,GAAA;AAGP6D,MAAAA,IAAI,EAAE7D,MAAM,CAAC6D;AAHN;AADqB,GAAzB,CAAP;AA7Ya,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,wBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAqZ2B;AACxC,MAAMvG,2BAA2B,GAAG6C,KAAK,CAALA,2BAAAA,CAApC,KAAoCA,EAApC;AACA,MAAM2D,OAAO,GAAGxG,2BAA2B,CAA3BA,OAAAA,CAAoC0C,MAAM,CAA1D,EAAgB1C,CAAhB;;AACA,MAAIwG,OAAO,KAAK,CAAhB,CAAA,EAAoB;AAClBxG,IAAAA,2BAA2B,CAA3BA,IAAAA,CAAiC0C,MAAM,CAAvC1C,EAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,2BAA2B,CAA3BA,MAAAA,CAAAA,OAAAA,EAAAA,CAAAA;AACD;;AACD,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAEA,IAAAA,2BAA2B,EAA3BA;AAAF,GAAzB,CAAP;AA7Za,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,gBAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EA+ZmB;AAChC,SAAA,aAAA,CAAA,EAAA,EAAA,gBAAA,EAAiC0C,MAAM,CAAvC,OAAA,CAAA;AAhaa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,4BAAA,EAAA,UAAA,KAAA,EAAA,MAAA,EAka+B;AAC5C,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAElC,IAAAA,YAAY,EAAEkC,MAAM,CAAC+D;AAAvB,GAAzB,CAAP;AAnaa,CAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,kBAAA,EAAA,UAAA,KAAA,EAqaa;AAC1B,SAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAE9F,IAAAA,YAAY,EAAd,IAAA;AAAsBI,IAAAA,UAAU,EAAE;AAAlC,GAAzB,CAAP;AAtaa,CAAA,CAAA,EAAjB,YAAiB,CAAjB;;AA0aA,IAAM2F,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,SAAA,EAAS;AAAA,SAAK;AACrC/G,IAAAA,UAAU,EAAEgH,SAAS,CAATA,MAAAA,CADyB,UAAA;AAErC/G,IAAAA,gBAAgB,EAAE+G,SAAS,CAFU,MAAA;AAGrC9G,IAAAA,OAAO,EAAE8G,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAH4B,UAAA;AAIrC7G,IAAAA,YAAY,EAAE6G,SAAS,CAJc,MAAA;AAKrC5G,IAAAA,YAAY,EAAE4G,SAAS,CALc,IAAA;AAMrC3G,IAAAA,2BAA2B,EAAE2G,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EANQ,UAAA;AAOrC1G,IAAAA,gBAAgB,EAAE0G,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAPmB,UAAA;AAQrCzG,IAAAA,cAAc,EAAEyG,SAAS,CARY,IAAA;AASrCxG,IAAAA,UAAU,EAAEwG,SAAS,CAATA,MAAAA,CATyB,UAAA;AAUrCvG,IAAAA,0BAA0B,EAAEuG,SAAS,CAVA,MAAA;AAWrCtG,IAAAA,mBAAmB,EAAEsG,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAXgB,UAAA;AAYrCrG,IAAAA,kBAAkB,EAAEqG,SAAS,CAZQ,IAAA;AAarCpG,IAAAA,YAAY,EAAEoG,SAAS,CAbc,IAAA;AAcrCnG,IAAAA,YAAY,EAAEmG,SAAS,CAdc,IAAA;AAerClG,IAAAA,YAAY,EAAEkG,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAfuB,UAAA;AAgBrCjG,IAAAA,KAAK,EAAEiG,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAhB8B,UAAA;AAiBrChG,IAAAA,YAAY,EAAEgG,SAAS,CAjBc,IAAA;AAkBrC/F,IAAAA,mBAAmB,EAAE+F,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAlBgB,UAAA;AAmBrC9F,IAAAA,aAAa,EAAE8F,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAnBsB,UAAA;AAoBrC7F,IAAAA,mBAAmB,EAAE6F,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EApBgB,UAAA;AAqBrC5F,IAAAA,UAAU,EAAE4F,SAAS,CArBgB,IAAA;AAsBrC3F,IAAAA,aAAa,EAAE2F,SAAS,CAtBa,KAAA;AAuBrC1F,IAAAA,OAAO,EAAE0F,SAAS,CAvBmB,MAAA;AAwBrCzF,IAAAA,KAAK,EAAEyF,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAxB8B,UAAA;AAyBrCxF,IAAAA,oBAAoB,EAAEwF,SAAS,CAzBM,MAAA;AA0BrCvF,IAAAA,uBAAuB,EAAEuF,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EA1BY,UAAA;AA2BrCtF,IAAAA,SAAS,EAAEsF,SAAS,CA3BiB,MAAA;AA4BrCrF,IAAAA,iBAAiB,EAAEqF,SAAS,CAATA,MAAAA,CA5BkB,UAAA;AA6BrCpF,IAAAA,gBAAgB,EAAEoF,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EA7BmB,UAAA;AA8BrCnF,IAAAA,aAAa,EAAEmF,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EA9BsB,UAAA;AA+BrClF,IAAAA,mBAAmB,EAAEkF,SAAS,CA/BO,MAAA;AAgCrC/E,IAAAA,kBAAkB,EAAE+E,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAhCiB,UAAA;AAiCrC9E,IAAAA,kBAAkB,EAAE8E,SAAS,CAjCQ,MAAA;AAkCrC7E,IAAAA,2BAA2B,EAAE6E,SAAS,CAlCD,KAAA;AAmCrC5E,IAAAA,qBAAqB,EAAE4E,SAAS,CAATA,KAAAA,CAnCc,UAAA;AAoCrC3E,IAAAA,6BAA6B,EAAE2E,SAAS,CApCH,MAAA;AAqCrC1E,IAAAA,gBAAgB,EAAE0E,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EArCmB,UAAA;AAsCrCzE,IAAAA,iBAAiB,EAAEyE,SAAS,CAATA,MAAAA,CAtCkB,UAAA;AAuCrCvE,IAAAA,gBAAgB,EAAEuE,SAAS,CAATA,MAAAA,CAvCmB,UAAA;AAwCrCtE,IAAAA,aAAa,EAAEsE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAxCsB,UAAA;AAyCrCrE,IAAAA,YAAY,EAAEqE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAzCuB,UAAA;AA0CrCpE,IAAAA,oBAAoB,EAAEoE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EA1Ce,UAAA;AA2CrCnE,IAAAA,oBAAoB,EAAEmE,SAAS,CAACC;AA3CK,GAAL;AAAlC,CAAA;;eA8CeC,aAAa,CAAA,gBAAA,EAAA,WAAA,EAA5B,gBAA4B,C;;AAA5B;;;;;;;;;;;;;;;0BAtgBanH,gB;0BA8CP+C,W;0BA0aAiE,gB","sourcesContent":["import {\n  FILTER_LINKS_BY_NODES,\n  GET_COLUMNS,\n  GET_CONTEXT_LAYERS,\n  GET_LINKED_GEOIDS,\n  GET_LINKS,\n  GET_MAP_VECTOR_DATA,\n  SET_NODE_ATTRIBUTES,\n  HIGHLIGHT_NODE,\n  SET_FLOWS_LOADING_STATE,\n  SET_MAP_LOADING_STATE,\n  RESET_SELECTION,\n  RESET_TOOL_STATE,\n  SAVE_MAP_VIEW,\n  SELECT_BASEMAP,\n  SELECT_BIOME_FILTER,\n  SELECT_COLUMN,\n  SELECT_CONTEXTUAL_LAYERS,\n  SELECT_RECOLOR_BY,\n  SELECT_RESIZE_BY,\n  SELECT_VIEW,\n  SET_MAP_DIMENSIONS_SELECTION,\n  SET_SANKEY_SEARCH_VISIBILITY,\n  SHOW_LINKS_ERROR,\n  TOGGLE_MAP,\n  TOGGLE_MAP_DIMENSION,\n  TOGGLE_MAP_SIDEBAR_GROUP,\n  UPDATE_NODE_SELECTION,\n  EXPAND_NODE_SELECTION,\n  COLLAPSE_NODE_SELECTION,\n  SET_MAP_DIMENSIONS_DATA,\n  RESET_TOOL_LOADERS\n} from 'actions/tool.actions';\nimport {\n  LOAD_INITIAL_CONTEXT,\n  SET_CONTEXT,\n  LOAD_STATE_FROM_URL\n} from 'scripts/actions/app.actions';\nimport groupBy from 'lodash/groupBy';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport keyBy from 'lodash/keyBy';\nimport createReducer from 'utils/createReducer';\nimport { getSelectedNodesColumnsPos } from 'react-components/tool/tool.selectors';\nimport filterLinks from 'scripts/reducers/helpers/filterLinks';\nimport getChoropleth from 'scripts/reducers/helpers/getChoropleth';\nimport getMapDimensions from 'scripts/reducers/helpers/getMapDimensions';\nimport { getMapDimensionsWarnings } from 'scripts/reducers/helpers/getMapDimensionsWarnings';\nimport getNodesAtColumns from 'scripts/reducers/helpers/getNodesAtColumns';\nimport getNodesColoredBySelection from 'scripts/reducers/helpers/getNodesColoredBySelection';\nimport getNodesDict from 'scripts/reducers/helpers/getNodesDict';\nimport getRecolorGroups from 'scripts/reducers/helpers/getRecolorGroups';\nimport getVisibleNodes from 'scripts/reducers/helpers/getVisibleNodes';\nimport mergeLinks from 'scripts/reducers/helpers/mergeLinks';\nimport setNodesMeta from 'scripts/reducers/helpers/setNodesMeta';\nimport sortVisibleNodes from 'scripts/reducers/helpers/sortVisibleNodes';\nimport splitLinksByColumn from 'scripts/reducers/helpers/splitLinksByColumn';\nimport splitVisibleNodesByColumn from 'scripts/reducers/helpers/splitVisibleNodesByColumn';\n\nexport const toolInitialState = {\n  choropleth: {},\n  choroplethLegend: null,\n  columns: [],\n  currentQuant: null,\n  detailedView: false,\n  expandedMapSidebarGroupsIds: [],\n  expandedNodesIds: [],\n  forcedOverview: false,\n  geoIdsDict: {},\n  highlightedNodeCoordinates: null,\n  highlightedNodesIds: [],\n  initialDataLoading: false,\n  isMapVisible: false,\n  isSearchOpen: false,\n  linkedGeoIds: [],\n  links: [],\n  flowsLoading: true,\n  mapContextualLayers: [],\n  mapDimensions: [],\n  mapDimensionsGroups: [],\n  mapLoading: true,\n  mapVectorData: null,\n  mapView: null,\n  nodes: [],\n  nodesColoredAtColumn: null,\n  nodesColoredBySelection: [],\n  nodesDict: null,\n  nodesDictWithMeta: {},\n  recolorByNodeIds: [],\n  recolorGroups: [],\n  selectedBiomeFilter: { name: 'none', value: 'none' },\n  selectedColumnsIds: [],\n  selectedMapBasemap: null,\n  selectedMapContextualLayers: null,\n  selectedMapDimensions: [null, null],\n  selectedMapDimensionsWarnings: null,\n  selectedNodesIds: [],\n  selectedRecolorBy: { type: 'none', name: 'none' },\n  selectedResizeBy: { type: 'none', name: 'none' },\n  unmergedLinks: [],\n  visibleNodes: [],\n  visibleNodesByColumn: [],\n  loadedFlowsContextId: null\n};\n\nconst toolReducer = {\n  [LOAD_STATE_FROM_URL](state, action) {\n    return { ...state, initialDataLoading: true, ...action.payload.tool };\n  },\n  [RESET_SELECTION](state) {\n    return Object.assign({}, state, {\n      highlightedNodesIds: [],\n      selectedNodesIds: [],\n      expandedNodesIds: [],\n      selectedBiomeFilter: { value: 'none' },\n      recolorByNodeIds: []\n    });\n  },\n  [LOAD_INITIAL_CONTEXT](state, action) {\n    const selectedContext = action.payload;\n\n    let selectedRecolorBy = selectedContext.recolorBy.find(\n      recolorBy => recolorBy.name === state.selectedRecolorByName\n    );\n    if (!selectedRecolorBy) {\n      selectedRecolorBy = selectedContext.recolorBy.find(recolorBy => recolorBy.isDefault === true);\n    }\n\n    let selectedResizeBy = selectedContext.resizeBy.find(\n      resizeBy => resizeBy.name === state.selectedResizeByName\n    );\n    if (!selectedResizeBy) {\n      selectedResizeBy = selectedContext.resizeBy.find(resizeBy => resizeBy.isDefault === true);\n    }\n\n    let biomeFilter;\n    if (state.selectedBiomeFilterName === 'none' || !selectedContext.filterBy.length > 0) {\n      biomeFilter = { value: 'none' };\n    } else {\n      biomeFilter = selectedContext.filterBy[0].nodes.find(\n        filterBy => filterBy.name === state.selectedBiomeFilterName\n      );\n    }\n\n    // use current selectedMapContextualLayers, or use the context's default\n    let selectedMapContextualLayers = selectedContext.defaultContextLayers || undefined;\n    if (\n      state.selectedMapContextualLayers !== undefined &&\n      state.selectedMapContextualLayers !== null\n    ) {\n      selectedMapContextualLayers = state.selectedMapContextualLayers;\n    }\n\n    let selectedMapBasemap = selectedContext.defaultBasemap || 'satellite';\n    if (state.selectedMapBasemap !== undefined && state.selectedMapBasemap !== null) {\n      selectedMapBasemap = state.selectedMapBasemap;\n    }\n\n    // force state updates on the component\n    const mapView = state.mapView ? Object.assign({}, state.mapView) : selectedContext.map;\n\n    return Object.assign({}, state, {\n      selectedRecolorBy: selectedRecolorBy || { type: 'none', name: 'none' },\n      selectedResizeBy,\n      selectedBiomeFilter: biomeFilter || { value: 'none', name: 'none' },\n      selectedMapContextualLayers,\n      selectedMapBasemap,\n      mapView\n    });\n  },\n  [SET_CONTEXT](state, action) {\n    const selectedContext = action.payload;\n    if (!selectedContext) {\n      return Object.assign({}, state);\n    }\n\n    const defaultRecolorBy = selectedContext.recolorBy.find(\n      recolorBy => recolorBy.isDefault === true\n    );\n    const defaultResizeBy = selectedContext.resizeBy.find(resizeBy => resizeBy.isDefault === true);\n    const defaultBiomeFilterBy =\n      selectedContext.filterBy.length > 0 && selectedContext.filterBy[0][0];\n\n    return Object.assign({}, state, {\n      selectedRecolorBy: defaultRecolorBy || { type: 'none', name: 'none' },\n      selectedResizeBy: defaultResizeBy,\n      selectedBiomeFilter: defaultBiomeFilterBy || { name: 'none', value: 'none' },\n      selectedMapContextualLayers: selectedContext.defaultContextLayers || undefined,\n      selectedMapBasemap: selectedContext.defaultBasemap || 'satellite',\n      detailedView: false,\n      recolorGroups: [],\n      mapView: selectedContext.map,\n      selectedNodesIds: [],\n      expandedNodesIds: []\n    });\n  },\n  [GET_COLUMNS](state, action) {\n    const rawNodes = action.payload[0].data;\n    const columns = action.payload[1].data;\n\n    // context-dependant columns\n    const columnsByGroupObj = groupBy(columns, 'group');\n    const columnsByGroup = [0, 0, 0, 0]\n      .map((e, i) => columnsByGroupObj[i])\n      .filter(n => typeof n !== 'undefined');\n\n    const selectedColumnsIds = [];\n    columnsByGroup.forEach((group, i) => {\n      const defaultColumn = group.find(g => g.isDefault === true).id;\n      if (state.selectedColumnsIds === undefined || state.selectedColumnsIds.length < 4) {\n        selectedColumnsIds.push(defaultColumn);\n      } else {\n        const currentColumnForGroup = state.selectedColumnsIds[i];\n        const columnId =\n          group.find(g => g.id === currentColumnForGroup) !== undefined\n            ? currentColumnForGroup\n            : defaultColumn;\n        selectedColumnsIds.push(columnId);\n      }\n    });\n\n    const { nodesDict, geoIdsDict } = getNodesDict(rawNodes, columns);\n\n    // if any selectedNode, make those columns visible (selected)\n    if (!isEmpty(state.selectedNodesIds)) {\n      state.selectedNodesIds\n        .map(id => nodesDict[id])\n        .forEach(node => {\n          selectedColumnsIds[node.columnGroup] = node.columnId;\n        });\n    }\n\n    // TODO the API should have the info on which file to load (if any) per column\n    const municipalitiesColumn = columns.find(column => column.name === 'MUNICIPALITY');\n    const logisticsHubColumn = columns.find(column => column.name === 'LOGISTICS HUB');\n    if (logisticsHubColumn && municipalitiesColumn) {\n      logisticsHubColumn.useGeometryFromColumnId = municipalitiesColumn.id;\n    }\n\n    return Object.assign({}, state, {\n      columns,\n      nodes: rawNodes,\n      nodesDict,\n      geoIdsDict,\n      initialDataLoading: false,\n      selectedColumnsIds\n    });\n  },\n\n  [SET_FLOWS_LOADING_STATE](state, action) {\n    // TODO: remove this see tool.thunks.js\n    const { loadedFlowsContextId } = action.payload;\n    return { ...state, flowsLoading: true, loadedFlowsContextId };\n  },\n\n  [SET_MAP_LOADING_STATE](state) {\n    return Object.assign({}, state, { mapLoading: true });\n  },\n\n  [SET_NODE_ATTRIBUTES](state, action) {\n    const nodesMeta = action.payload;\n\n    // store dimension values in nodesDict as uid: dimensionValue\n    const nodesDictWithMeta = setNodesMeta(state.nodesDict, nodesMeta, state.mapDimensions);\n\n    const { choropleth, choroplethLegend } = getChoropleth(\n      state.selectedMapDimensions,\n      nodesDictWithMeta,\n      state.mapDimensions\n    );\n\n    return Object.assign({}, state, {\n      nodesDictWithMeta,\n      choropleth,\n      choroplethLegend,\n      mapLoading: false\n    });\n  },\n  [SET_MAP_DIMENSIONS_DATA](state, action) {\n    const mapDimensionsMeta = action.payload.mapDimensionsMetaJSON;\n    const rawMapDimensions = mapDimensionsMeta.dimensions;\n    const mapDimensions = getMapDimensions(rawMapDimensions);\n\n    const mapDimensionsGroups = mapDimensionsMeta.dimensionGroups.map(group => ({\n      group,\n      dimensions: mapDimensions.filter(dimension => dimension.groupId === group.id)\n    }));\n\n    return Object.assign({}, state, {\n      mapDimensions,\n      mapDimensionsGroups\n    });\n  },\n  [GET_LINKS](state, action) {\n    const rawLinks = action.jsonPayload.data;\n    const linksMeta = action.jsonPayload.include;\n\n    const currentQuant = linksMeta.quant;\n\n    const visibleNodes = getVisibleNodes(\n      rawLinks,\n      state.nodesDict,\n      linksMeta,\n      state.selectedColumnsIds\n    );\n\n    let visibleNodesByColumn = splitVisibleNodesByColumn(visibleNodes);\n    visibleNodesByColumn = sortVisibleNodes(visibleNodesByColumn);\n\n    const unmergedLinks = splitLinksByColumn(rawLinks, state.nodesDict, state.selectedRecolorBy);\n    const links = mergeLinks(unmergedLinks);\n\n    return Object.assign({}, state, {\n      links,\n      unmergedLinks,\n      visibleNodes,\n      visibleNodesByColumn,\n      currentQuant,\n      flowsLoading: false\n    });\n  },\n  [SHOW_LINKS_ERROR](state) {\n    return Object.assign({}, state, { links: null, flowsLoading: false });\n  },\n  [GET_LINKED_GEOIDS](state, action) {\n    const linkedGeoIds =\n      action.payload && action.payload.nodes && action.payload.nodes.length\n        ? action.payload.nodes.map(node => node.geoId)\n        : [];\n    if (isEqual(linkedGeoIds, state.linkedGeoIds)) {\n      return state;\n    }\n    return Object.assign({}, state, { linkedGeoIds });\n  },\n  [SELECT_BIOME_FILTER](state, action) {\n    return Object.assign({}, state, { selectedBiomeFilter: action.payload });\n  },\n  [SELECT_RECOLOR_BY](state, action) {\n    return Object.assign({}, state, { selectedRecolorBy: action.payload });\n  },\n  [SELECT_RESIZE_BY](state, action) {\n    return Object.assign({}, state, { selectedResizeBy: action.payload });\n  },\n  [SELECT_VIEW](state, action) {\n    return Object.assign({}, state, {\n      detailedView: action.detailedView,\n      forcedOverview: action.forcedOverview\n    });\n  },\n\n  [SELECT_COLUMN](state, action) {\n    // TODO also update choropleth with default selected indicators\n    const selectedColumnsIds = [].concat(state.selectedColumnsIds);\n    if (selectedColumnsIds.indexOf(action.columnId) === -1) {\n      selectedColumnsIds[action.columnIndex] = action.columnId;\n    }\n    return Object.assign({}, state, { selectedColumnsIds });\n  },\n  [UPDATE_NODE_SELECTION](state, action) {\n    return Object.assign({}, state, {\n      selectedNodesIds: action.ids\n    });\n  },\n  [HIGHLIGHT_NODE](state, action) {\n    return Object.assign({}, state, {\n      highlightedNodesIds: action.ids,\n      highlightedNodeCoordinates: action.coordinates\n    });\n  },\n  [FILTER_LINKS_BY_NODES](state) {\n    const selectedNodesColumnsPos = getSelectedNodesColumnsPos(state);\n    const selectedNodesAtColumns = getNodesAtColumns(\n      state.selectedNodesIds,\n      selectedNodesColumnsPos\n    );\n\n    const { nodesColoredBySelection, nodesColoredAtColumn } = getNodesColoredBySelection(\n      selectedNodesAtColumns\n    );\n    const recolorGroups = getRecolorGroups(\n      state.nodesColoredBySelection,\n      nodesColoredBySelection,\n      state.recolorGroups\n    );\n\n    let links;\n    if (state.selectedNodesIds.length > 0) {\n      const filteredLinks = filterLinks(\n        state.unmergedLinks,\n        selectedNodesAtColumns,\n        nodesColoredBySelection,\n        recolorGroups\n      );\n      links = mergeLinks(filteredLinks, true);\n    } else {\n      links = mergeLinks(state.unmergedLinks);\n    }\n\n    return Object.assign({}, state, {\n      links,\n      nodesColoredBySelection,\n      nodesColoredAtColumn,\n      recolorGroups\n    });\n  },\n  [GET_MAP_VECTOR_DATA](state, action) {\n    return Object.assign({}, state, { mapVectorData: action.mapVectorData });\n  },\n  [GET_CONTEXT_LAYERS](state, action) {\n    return Object.assign({}, state, { mapContextualLayers: action.mapContextualLayers });\n  },\n  [SET_MAP_DIMENSIONS_SELECTION](state, action) {\n    const { uids: selectedMapDimensions, selectedYears } = action.payload;\n    const { choropleth, choroplethLegend } = getChoropleth(\n      selectedMapDimensions,\n      state.nodesDictWithMeta,\n      state.mapDimensions\n    );\n    const selectedMapDimensionsWarnings = getMapDimensionsWarnings(\n      state.mapDimensions,\n      selectedMapDimensions,\n      selectedYears\n    );\n\n    return {\n      ...state,\n      selectedMapDimensions,\n      selectedMapDimensionsWarnings,\n      choropleth,\n      choroplethLegend\n    };\n  },\n  [TOGGLE_MAP_DIMENSION](state, action) {\n    const selectedMapDimensions = state.selectedMapDimensions.slice();\n    const uidIndex = selectedMapDimensions.indexOf(action.payload.uid);\n\n    if (uidIndex === -1) {\n      // dimension was not found: put it on a free slot\n      if (selectedMapDimensions[0] === null) {\n        selectedMapDimensions[0] = action.payload.uid;\n      } else if (selectedMapDimensions[1] === null) {\n        selectedMapDimensions[1] = action.payload.uid;\n      } else {\n        return state;\n      }\n    } else {\n      // dimension was found: remove it from selection\n      selectedMapDimensions[uidIndex] = null;\n    }\n\n    const { choropleth, choroplethLegend } = getChoropleth(\n      selectedMapDimensions,\n      state.nodesDictWithMeta,\n      state.mapDimensions\n    );\n\n    const selectedMapDimensionsWarnings = getMapDimensionsWarnings(\n      state.mapDimensions,\n      selectedMapDimensions,\n      action.payload.selectedYears\n    );\n    return {\n      ...state,\n      selectedMapDimensions,\n      selectedMapDimensionsWarnings,\n      mapLoading: true,\n      choropleth,\n      choroplethLegend\n    };\n  },\n  [SELECT_CONTEXTUAL_LAYERS](state, action) {\n    const mapContextualLayersDict = keyBy(state.mapContextualLayers, 'id');\n    const selectedMapContextualLayersData = action.contextualLayers.map(layerSlug =>\n      Object.assign({}, mapContextualLayersDict[layerSlug])\n    );\n\n    return Object.assign({}, state, {\n      selectedMapContextualLayers: action.contextualLayers,\n      selectedMapContextualLayersData\n    });\n  },\n  [SELECT_BASEMAP](state, action) {\n    return Object.assign({}, state, { selectedMapBasemap: action.selectedMapBasemap });\n  },\n  [COLLAPSE_NODE_SELECTION](state) {\n    return {\n      ...state,\n      expandedNodesIds: []\n    };\n  },\n  [EXPAND_NODE_SELECTION](state) {\n    return {\n      ...state,\n      expandedNodesIds: state.selectedNodesIds\n    };\n  },\n  [TOGGLE_MAP](state, action) {\n    return Object.assign({}, state, {\n      isMapVisible: action.forceState !== null ? action.forceState : !state.isMapVisible\n    });\n  },\n  [SAVE_MAP_VIEW](state, action) {\n    return Object.assign({}, state, {\n      mapView: {\n        latitude: action.latlng.lat,\n        longitude: action.latlng.lng,\n        zoom: action.zoom\n      }\n    });\n  },\n  [TOGGLE_MAP_SIDEBAR_GROUP](state, action) {\n    const expandedMapSidebarGroupsIds = state.expandedMapSidebarGroupsIds.slice();\n    const idIndex = expandedMapSidebarGroupsIds.indexOf(action.id);\n    if (idIndex === -1) {\n      expandedMapSidebarGroupsIds.push(action.id);\n    } else {\n      expandedMapSidebarGroupsIds.splice(idIndex, 1);\n    }\n    return Object.assign({}, state, { expandedMapSidebarGroupsIds });\n  },\n  [RESET_TOOL_STATE](state, action) {\n    return { ...toolInitialState, ...action.payload };\n  },\n  [SET_SANKEY_SEARCH_VISIBILITY](state, action) {\n    return Object.assign({}, state, { isSearchOpen: action.searchVisibility });\n  },\n  [RESET_TOOL_LOADERS](state) {\n    return Object.assign({}, state, { flowsLoading: true, mapLoading: true });\n  }\n};\n\nconst toolReducerTypes = PropTypes => ({\n  choropleth: PropTypes.object.isRequired,\n  choroplethLegend: PropTypes.object,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  currentQuant: PropTypes.object,\n  detailedView: PropTypes.bool,\n  expandedMapSidebarGroupsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  expandedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  forcedOverview: PropTypes.bool,\n  geoIdsDict: PropTypes.object.isRequired,\n  highlightedNodeCoordinates: PropTypes.object,\n  highlightedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  initialDataLoading: PropTypes.bool,\n  isMapVisible: PropTypes.bool,\n  isSearchOpen: PropTypes.bool,\n  linkedGeoIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  links: PropTypes.arrayOf(PropTypes.object).isRequired,\n  flowsLoading: PropTypes.bool,\n  mapContextualLayers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  mapDimensions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  mapDimensionsGroups: PropTypes.arrayOf(PropTypes.object).isRequired,\n  mapLoading: PropTypes.bool,\n  mapVectorData: PropTypes.array,\n  mapView: PropTypes.object,\n  nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nodesColoredAtColumn: PropTypes.number,\n  nodesColoredBySelection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  nodesDict: PropTypes.object,\n  nodesDictWithMeta: PropTypes.object.isRequired,\n  recolorByNodeIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  recolorGroups: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selectedBiomeFilter: PropTypes.object,\n  selectedColumnsIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selectedMapBasemap: PropTypes.string,\n  selectedMapContextualLayers: PropTypes.array,\n  selectedMapDimensions: PropTypes.array.isRequired,\n  selectedMapDimensionsWarnings: PropTypes.string,\n  selectedNodesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selectedRecolorBy: PropTypes.object.isRequired,\n  selectedResizeBy: PropTypes.object.isRequired,\n  unmergedLinks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  visibleNodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  visibleNodesByColumn: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadedFlowsContextId: PropTypes.string\n});\n\nexport default createReducer(toolInitialState, toolReducer, toolReducerTypes);\n"]}]}