{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/sankey.d3layout.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/sankey.d3layout.js","mtime":1548177066785},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable camelcase,import/no-extraneous-dependencies,no-use-before-define */\nimport uniqBy from 'lodash/uniqBy';\nimport wrapSVGText from 'utils/wrapSVGText';\nimport { NUM_COLUMNS, DETAILED_VIEW_MIN_NODE_HEIGHT, DETAILED_VIEW_SCALE } from 'constants';\nimport { interpolateNumber as d3_interpolateNumber } from 'd3-interpolate';\nimport { translateText } from 'utils/transifex';\n\nvar sankeyLayout = function sankeyLayout() {\n  var sankeyLayoutState = {}; // in\n\n  var viewportWidth;\n  var viewportHeight;\n  var columnWidth; // data\n\n  var columns;\n  var links;\n  var detailedView;\n  var maxHeight;\n  var recolorBy;\n  var nodesColoredAtColumn; // layout\n\n  var linksColumnWidth;\n\n  var _labelCharsPerLine;\n\n  var _labelCharWidth = 9;\n  var _labelCharHeight = 16;\n  var _labelMaxLines = 3;\n\n  sankeyLayoutState.setViewportSize = function (size) {\n    viewportWidth = size[0];\n    viewportHeight = size[1];\n  };\n\n  sankeyLayoutState.setLinksPayload = function (payload) {\n    columns = payload.visibleNodesByColumn;\n    links = payload.links;\n    detailedView = payload.detailedView;\n    recolorBy = payload.selectedRecolorBy;\n    nodesColoredAtColumn = payload.nodesColoredAtColumn;\n  };\n\n  sankeyLayoutState.columnWidth = function (i) {\n    if (!i) return columnWidth;\n    columnWidth = +i;\n    _labelCharsPerLine = Math.floor(columnWidth / _labelCharWidth);\n    return sankeyLayoutState;\n  };\n\n  sankeyLayoutState.columns = function () {\n    return columns;\n  };\n\n  sankeyLayoutState.links = function () {\n    return links;\n  };\n\n  sankeyLayoutState.isReady = function () {\n    return viewportWidth && columns && recolorBy;\n  };\n\n  sankeyLayoutState.relayout = function () {\n    if (!sankeyLayoutState.isReady()) {\n      console.warn('not ready');\n      return false;\n    }\n\n    _computeNodeCoords();\n\n    _computeLinksCoords();\n\n    _setNodeLabels();\n\n    return true;\n  }; // using precomputed dimensions on links objects, this will generate SVG paths for links\n\n\n  sankeyLayoutState.link = function () {\n    return function (d) {\n      var x0 = d.x;\n      var x1 = d.x + d.width;\n      var xi = d3_interpolateNumber(x0, x1);\n      var x2 = xi(0.75);\n      var x3 = xi(0.25);\n      var y0 = d.sy + d.renderedHeight / 2;\n      var y1 = d.ty + d.renderedHeight / 2;\n      return \"M\".concat(x0, \",\").concat(y0, \"C\").concat(x2, \",\").concat(y0, \" \").concat(x3, \",\").concat(y1, \" \").concat(x1, \",\").concat(y1);\n    };\n  };\n\n  sankeyLayoutState.getMaxHeight = function () {\n    return maxHeight;\n  };\n\n  var _computeNodeCoords = function _computeNodeCoords() {\n    var availableLinkSpace = viewportWidth - NUM_COLUMNS * columnWidth;\n    linksColumnWidth = availableLinkSpace / (NUM_COLUMNS - 1);\n    maxHeight = 0;\n    columns.forEach(function (column, i) {\n      column.x = _getColumnX(i);\n      var columnY = 0;\n      column.values.forEach(function (node) {\n        node.x = column.x;\n        node.y = columnY;\n\n        if (detailedView === true) {\n          node.renderedHeight = Math.max(DETAILED_VIEW_MIN_NODE_HEIGHT, DETAILED_VIEW_SCALE * node.height);\n        } else {\n          node.renderedHeight = node.height * viewportHeight;\n        }\n\n        columnY += node.renderedHeight;\n      });\n\n      if (columnY > maxHeight) {\n        maxHeight = columnY;\n      }\n    });\n  };\n\n  var _setNodeLabels = function _setNodeLabels() {\n    columns.forEach(function (column) {\n      column.values.forEach(function (node) {\n        node.label = wrapSVGText(translateText(node.name), node.renderedHeight, _labelCharHeight, _labelCharsPerLine, _labelMaxLines);\n      });\n    });\n  }; // compute links y and y deltas (later used by sankey.link generator)\n  // will be called at each relayouting (user clicks nodes, user scrolls, etc)\n\n\n  var _computeLinksCoords = function _computeLinksCoords() {\n    if (links.length === 0) {\n      return;\n    } // source and target are dicts (nodeIds are keys) containing the cumulated height of all links for each node\n\n\n    var stackedHeightsByNodeId = {\n      source: {},\n      target: {}\n    }; // retrieve node ys to bootstrap stackedHeights\n\n    links.forEach(function (link) {\n      var sId = link.sourceNodeId;\n      stackedHeightsByNodeId.source[sId] = _getNode(link.sourceColumnPosition, sId).y;\n      var tId = link.targetNodeId;\n      stackedHeightsByNodeId.target[tId] = _getNode(link.targetColumnPosition, tId).y;\n    }); // this is only used for sorting links with color groups\n\n    var recolorGroupsOrderedByY;\n\n    if (links[0].recolorGroup !== undefined) {\n      // get all links of the colored column\n      var coloredColumnLinks = links.filter(function (link) {\n        var entry = nodesColoredAtColumn === 0 ? link.sourceColumnPosition : link.targetColumnPosition;\n        return entry === nodesColoredAtColumn;\n      }); // remove duplicates (ie links with same connected node)\n\n      coloredColumnLinks = uniqBy(coloredColumnLinks, nodesColoredAtColumn === 0 ? 'sourceNodeId' : 'targetNodeId'); // sort by node Y\n\n      coloredColumnLinks.sort(function (linkA, linkB) {\n        var nodeIdA = nodesColoredAtColumn === 0 ? linkA.sourceNodeId : linkA.targetNodeId;\n        var nodeIdB = nodesColoredAtColumn === 0 ? linkB.sourceNodeId : linkB.targetNodeId;\n        var nodes = columns[nodesColoredAtColumn].values;\n        return nodes.find(function (n) {\n          return n.id === nodeIdA;\n        }).y - nodes.find(function (n) {\n          return n.id === nodeIdB;\n        }).y;\n      }); // map to color groups\n\n      recolorGroupsOrderedByY = coloredColumnLinks.map(function (l) {\n        return l.recolorGroup;\n      });\n    } // sort links by node source and target y positions\n    // TODO move sorting to reducer\n\n\n    links.sort(function (linkA, linkB) {\n      var sIdAY = stackedHeightsByNodeId.source[linkA.sourceNodeId];\n      var sIdBY = stackedHeightsByNodeId.source[linkB.sourceNodeId];\n      var tIdAY = stackedHeightsByNodeId.target[linkA.targetNodeId];\n      var tIdBY = stackedHeightsByNodeId.target[linkB.targetNodeId];\n      var defaultSort = sIdAY - sIdBY || tIdAY - tIdBY;\n\n      if (recolorBy.name !== 'none') {\n        // sorts alphabetically with quals, numerically with inds\n        // TODO for quals use the order presented in the color by menu\n        if (linkA.recolorBy === linkB.recolorBy) {\n          return defaultSort;\n        }\n\n        var recolorBySort;\n\n        if (linkA.recolorBy === null) {\n          recolorBySort = 1;\n        } else if (linkB.recolorBy === null) {\n          recolorBySort = -1;\n        } else {\n          recolorBySort = recolorBy.type === 'ind' ? linkA.recolorBy - linkB.recolorBy : linkA.recolorBy.charCodeAt(0) - linkB.recolorBy.charCodeAt(0);\n        }\n\n        return recolorBySort;\n      }\n\n      if (links[0].recolorGroup !== undefined) {\n        // When using a recolorGroup\n        // For columns outside of adjacent columns, links should be sorted by the original *y order of recolored nodes*\n        // (mapped to recolor groups before sorting, see recolorGroupsOrderedByY bit above)\n        // Columns directly adjacent to the column where nodes are selected\n        // are sorted by y coords (source or target, depedning on if column is at the left or the right of the selected colun).\n        if (linkA.sourceColumnPosition > nodesColoredAtColumn || linkA.targetColumnPosition < nodesColoredAtColumn) {\n          var recolorGroupsYA = recolorGroupsOrderedByY.indexOf(linkA.recolorGroup);\n          var recolorGroupsYB = recolorGroupsOrderedByY.indexOf(linkB.recolorGroup);\n          return recolorGroupsYA === recolorGroupsYB ? defaultSort : recolorGroupsYA - recolorGroupsYB;\n        }\n\n        if (linkA.targetColumnPosition <= nodesColoredAtColumn) {\n          return tIdAY - tIdBY || sIdAY - sIdBY;\n        }\n\n        if (linkA.sourceColumnPosition >= nodesColoredAtColumn) {\n          return sIdAY - sIdBY || tIdAY - tIdBY;\n        }\n\n        return defaultSort;\n      }\n\n      return defaultSort;\n    });\n    links.forEach(function (link) {\n      link.width = linksColumnWidth;\n      link.x = columnWidth + _getColumnX(link.sourceColumnPosition);\n\n      if (detailedView === true) {\n        link.renderedHeight = link.height * DETAILED_VIEW_SCALE;\n      } else {\n        link.renderedHeight = link.height * viewportHeight;\n      }\n\n      var sId = link.sourceNodeId;\n      link.sy = stackedHeightsByNodeId.source[sId];\n      stackedHeightsByNodeId.source[sId] = link.sy + link.renderedHeight;\n      var tId = link.targetNodeId;\n      link.ty = stackedHeightsByNodeId.target[tId];\n      stackedHeightsByNodeId.target[tId] = link.ty + link.renderedHeight;\n    });\n  };\n\n  var _getColumnX = function _getColumnX(columnIndex) {\n    return columnIndex * (columnWidth + linksColumnWidth);\n  };\n\n  var _getNode = function _getNode(columnPosition, nodeId) {\n    var column = columns[columnPosition];\n    return column.values.find(function (node) {\n      return node.id === nodeId;\n    });\n  };\n\n  return sankeyLayoutState;\n};\n\nvar _default = sankeyLayout;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(sankeyLayout, \"sankeyLayout\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/sankey.d3layout.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/sankey.d3layout.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/sankey.d3layout.js"],"names":["interpolateNumber","sankeyLayout","sankeyLayoutState","_labelCharWidth","_labelCharHeight","_labelMaxLines","viewportWidth","size","viewportHeight","columns","payload","links","detailedView","recolorBy","nodesColoredAtColumn","columnWidth","_labelCharsPerLine","Math","console","_computeNodeCoords","_computeLinksCoords","_setNodeLabels","x0","d","x1","xi","d3_interpolateNumber","x2","x3","y0","y1","availableLinkSpace","NUM_COLUMNS","linksColumnWidth","maxHeight","column","_getColumnX","columnY","node","DETAILED_VIEW_SCALE","wrapSVGText","translateText","stackedHeightsByNodeId","source","target","sId","link","_getNode","tId","coloredColumnLinks","entry","uniqBy","nodeIdA","linkA","nodeIdB","linkB","nodes","n","recolorGroupsOrderedByY","l","sIdAY","sIdBY","tIdAY","tIdBY","defaultSort","recolorBySort","recolorGroupsYA","recolorGroupsYB","columnIndex"],"mappings":";;;;;;AAAA;AACA,OAAA,MAAA,MAAA,eAAA;AACA,OAAA,WAAA,MAAA,mBAAA;AACA,SAAA,WAAA,EAAA,6BAAA,EAAA,mBAAA,QAAA,WAAA;AACA,SAASA,iBAAiB,IAA1B,oBAAA,QAAA,gBAAA;AACA,SAAA,aAAA,QAAA,iBAAA;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMC,iBAAiB,GADE,EACzB,CADyB,CAGzB;;AACA,MAAA,aAAA;AACA,MAAA,cAAA;AACA,MANyB,WAMzB,CANyB,CAQzB;;AACA,MAAA,OAAA;AACA,MAAA,KAAA;AACA,MAAA,YAAA;AACA,MAAA,SAAA;AACA,MAAA,SAAA;AACA,MAdyB,oBAczB,CAdyB,CAgBzB;;AACA,MAAA,gBAAA;;AACA,MAAA,kBAAA;;AACA,MAAMC,eAAe,GAArB,CAAA;AACA,MAAMC,gBAAgB,GAAtB,EAAA;AACA,MAAMC,cAAc,GAApB,CAAA;;AAEAH,EAAAA,iBAAiB,CAAjBA,eAAAA,GAAoC,UAAA,IAAA,EAAQ;AAC1CI,IAAAA,aAAa,GAAGC,IAAI,CAApBD,CAAoB,CAApBA;AACAE,IAAAA,cAAc,GAAGD,IAAI,CAArBC,CAAqB,CAArBA;AAFFN,GAAAA;;AAKAA,EAAAA,iBAAiB,CAAjBA,eAAAA,GAAoC,UAAA,OAAA,EAAW;AAC7CO,IAAAA,OAAO,GAAGC,OAAO,CAAjBD,oBAAAA;AACAE,IAAAA,KAAK,GAAGD,OAAO,CAAfC,KAAAA;AACAC,IAAAA,YAAY,GAAGF,OAAO,CAAtBE,YAAAA;AACAC,IAAAA,SAAS,GAAGH,OAAO,CAAnBG,iBAAAA;AACAC,IAAAA,oBAAoB,GAAGJ,OAAO,CAA9BI,oBAAAA;AALFZ,GAAAA;;AAQAA,EAAAA,iBAAiB,CAAjBA,WAAAA,GAAgC,UAAA,CAAA,EAAK;AACnC,QAAI,CAAJ,CAAA,EAAQ,OAAA,WAAA;AACRa,IAAAA,WAAW,GAAG,CAAdA,CAAAA;AACAC,IAAAA,kBAAkB,GAAGC,IAAI,CAAJA,KAAAA,CAAWF,WAAW,GAA3CC,eAAqBC,CAArBD;AACA,WAAA,iBAAA;AAJFd,GAAAA;;AAOAA,EAAAA,iBAAiB,CAAjBA,OAAAA,GAA4B,YAAA;AAAA,WAAA,OAAA;AAA5BA,GAAAA;;AAEAA,EAAAA,iBAAiB,CAAjBA,KAAAA,GAA0B,YAAA;AAAA,WAAA,KAAA;AAA1BA,GAAAA;;AAEAA,EAAAA,iBAAiB,CAAjBA,OAAAA,GAA4B,YAAA;AAAA,WAAMI,aAAa,IAAbA,OAAAA,IAAN,SAAA;AAA5BJ,GAAAA;;AAEAA,EAAAA,iBAAiB,CAAjBA,QAAAA,GAA6B,YAAM;AACjC,QAAI,CAACA,iBAAiB,CAAtB,OAAKA,EAAL,EAAkC;AAChCgB,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,WAAAA;AACA,aAAA,KAAA;AACD;;AAEDC,IAAAA,kBAAkB;;AAClBC,IAAAA,mBAAmB;;AACnBC,IAAAA,cAAc;;AAEd,WAAA,IAAA;AA3DuB,GAiDzBnB,CAjDyB,CA8DzB;;;AACAA,EAAAA,iBAAiB,CAAjBA,IAAAA,GAAyB,YAAA;AAAA,WAAM,UAAA,CAAA,EAAK;AAClC,UAAMoB,EAAE,GAAGC,CAAC,CAAZ,CAAA;AACA,UAAMC,EAAE,GAAGD,CAAC,CAADA,CAAAA,GAAMA,CAAC,CAAlB,KAAA;AACA,UAAME,EAAE,GAAGC,oBAAoB,CAAA,EAAA,EAA/B,EAA+B,CAA/B;AACA,UAAMC,EAAE,GAAGF,EAAE,CAAb,IAAa,CAAb;AACA,UAAMG,EAAE,GAAGH,EAAE,CAAb,IAAa,CAAb;AACA,UAAMI,EAAE,GAAGN,CAAC,CAADA,EAAAA,GAAOA,CAAC,CAADA,cAAAA,GAAlB,CAAA;AACA,UAAMO,EAAE,GAAGP,CAAC,CAADA,EAAAA,GAAOA,CAAC,CAADA,cAAAA,GAAlB,CAAA;AACA,aAAA,IAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,CAAA;AARuB,KAAA;AAAzBrB,GAAAA;;AAWAA,EAAAA,iBAAiB,CAAjBA,YAAAA,GAAiC,YAAA;AAAA,WAAA,SAAA;AAAjCA,GAAAA;;AAEA,MAAMiB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAMY,kBAAkB,GAAGzB,aAAa,GAAG0B,WAAW,GAAtD,WAAA;AACAC,IAAAA,gBAAgB,GAAGF,kBAAkB,IAAIC,WAAW,GAApDC,CAAqC,CAArCA;AAEAC,IAAAA,SAAS,GAATA,CAAAA;AAEAzB,IAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAA,CAAA,EAAe;AAC7B0B,MAAAA,MAAM,CAANA,CAAAA,GAAWC,WAAW,CAAtBD,CAAsB,CAAtBA;AACA,UAAIE,OAAO,GAAX,CAAA;AACAF,MAAAA,MAAM,CAANA,MAAAA,CAAAA,OAAAA,CAAsB,UAAA,IAAA,EAAQ;AAC5BG,QAAAA,IAAI,CAAJA,CAAAA,GAASH,MAAM,CAAfG,CAAAA;AACAA,QAAAA,IAAI,CAAJA,CAAAA,GAAAA,OAAAA;;AACA,YAAI1B,YAAY,KAAhB,IAAA,EAA2B;AACzB0B,UAAAA,IAAI,CAAJA,cAAAA,GAAsBrB,IAAI,CAAJA,GAAAA,CAAAA,6BAAAA,EAEpBsB,mBAAmB,GAAGD,IAAI,CAF5BA,MAAsBrB,CAAtBqB;AADF,SAAA,MAKO;AACLA,UAAAA,IAAI,CAAJA,cAAAA,GAAsBA,IAAI,CAAJA,MAAAA,GAAtBA,cAAAA;AACD;;AACDD,QAAAA,OAAO,IAAIC,IAAI,CAAfD,cAAAA;AAXFF,OAAAA;;AAaA,UAAIE,OAAO,GAAX,SAAA,EAAyB;AACvBH,QAAAA,SAAS,GAATA,OAAAA;AACD;AAlBHzB,KAAAA;AANF,GAAA;;AA4BA,MAAMY,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BZ,IAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAU;AACxB0B,MAAAA,MAAM,CAANA,MAAAA,CAAAA,OAAAA,CAAsB,UAAA,IAAA,EAAQ;AAC5BG,QAAAA,IAAI,CAAJA,KAAAA,GAAaE,WAAW,CACtBC,aAAa,CAACH,IAAI,CADI,IACT,CADS,EAEtBA,IAAI,CAFkB,cAAA,EAAA,gBAAA,EAAA,kBAAA,EAAxBA,cAAwB,CAAxBA;AADFH,OAAAA;AADF1B,KAAAA;AAzGuB,GAwGzB,CAxGyB,CAsHzB;AACA;;;AACA,MAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAIT,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtB;AAF8B,KAAA,CAIhC;;;AACA,QAAM+B,sBAAsB,GAAG;AAAEC,MAAAA,MAAM,EAAR,EAAA;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAA/B,CALgC,CAOhC;;AACAjC,IAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAQ;AACpB,UAAMkC,GAAG,GAAGC,IAAI,CAAhB,YAAA;AACAJ,MAAAA,sBAAsB,CAAtBA,MAAAA,CAAAA,GAAAA,IAAqCK,QAAQ,CAACD,IAAI,CAAL,oBAAA,EAARC,GAAQ,CAARA,CAArCL,CAAAA;AAEA,UAAMM,GAAG,GAAGF,IAAI,CAAhB,YAAA;AACAJ,MAAAA,sBAAsB,CAAtBA,MAAAA,CAAAA,GAAAA,IAAqCK,QAAQ,CAACD,IAAI,CAAL,oBAAA,EAARC,GAAQ,CAARA,CAArCL,CAAAA;AAb8B,KAQhC/B,EARgC,CAgBhC;;AACA,QAAA,uBAAA;;AAEA,QAAIA,KAAK,CAALA,CAAK,CAALA,CAAAA,YAAAA,KAAJ,SAAA,EAAyC;AACvC;AACA,UAAIsC,kBAAkB,GAAG,KAAK,CAAL,MAAA,CAAa,UAAA,IAAA,EAAQ;AAC5C,YAAMC,KAAK,GACTpC,oBAAoB,KAApBA,CAAAA,GAA6BgC,IAAI,CAAjChC,oBAAAA,GAAyDgC,IAAI,CAD/D,oBAAA;AAEA,eAAOI,KAAK,KAAZ,oBAAA;AALqC,OAEd,CAAzB,CAFuC,CAOvC;;AACAD,MAAAA,kBAAkB,GAAGE,MAAM,CAAA,kBAAA,EAEzBrC,oBAAoB,KAApBA,CAAAA,GAAAA,cAAAA,GAVqC,cAQZ,CAA3BmC,CARuC,CAYvC;;AACAA,MAAAA,kBAAkB,CAAlBA,IAAAA,CAAwB,UAAA,KAAA,EAAA,KAAA,EAAkB;AACxC,YAAMG,OAAO,GAAGtC,oBAAoB,KAApBA,CAAAA,GAA6BuC,KAAK,CAAlCvC,YAAAA,GAAkDuC,KAAK,CAAvE,YAAA;AACA,YAAMC,OAAO,GAAGxC,oBAAoB,KAApBA,CAAAA,GAA6ByC,KAAK,CAAlCzC,YAAAA,GAAkDyC,KAAK,CAAvE,YAAA;AACA,YAAMC,KAAK,GAAG/C,OAAO,CAAPA,oBAAO,CAAPA,CAAd,MAAA;AACA,eAAO,KAAK,CAAL,IAAA,CAAW,UAAA,CAAA,EAAC;AAAA,iBAAIgD,CAAC,CAADA,EAAAA,KAAJ,OAAA;AAAZ,SAAA,EAAA,CAAA,GAAsC,KAAK,CAAL,IAAA,CAAW,UAAA,CAAA,EAAC;AAAA,iBAAIA,CAAC,CAADA,EAAAA,KAAJ,OAAA;AAAZ,SAAA,EAA7C,CAAA;AAjBqC,OAavCR,EAbuC,CAmBvC;;AACAS,MAAAA,uBAAuB,GAAG,kBAAkB,CAAlB,GAAA,CAAuB,UAAA,CAAA,EAAC;AAAA,eAAIC,CAAC,CAAL,YAAA;AAAlDD,OAA0B,CAA1BA;AAvC8B,KAAA,CA0ChC;AACA;;;AACA/C,IAAAA,KAAK,CAALA,IAAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAkB;AAC3B,UAAMiD,KAAK,GAAGlB,sBAAsB,CAAtBA,MAAAA,CAA8BW,KAAK,CAAjD,YAAcX,CAAd;AACA,UAAMmB,KAAK,GAAGnB,sBAAsB,CAAtBA,MAAAA,CAA8Ba,KAAK,CAAjD,YAAcb,CAAd;AACA,UAAMoB,KAAK,GAAGpB,sBAAsB,CAAtBA,MAAAA,CAA8BW,KAAK,CAAjD,YAAcX,CAAd;AACA,UAAMqB,KAAK,GAAGrB,sBAAsB,CAAtBA,MAAAA,CAA8Ba,KAAK,CAAjD,YAAcb,CAAd;AACA,UAAMsB,WAAW,GAAGJ,KAAK,GAALA,KAAAA,IAAiBE,KAAK,GAA1C,KAAA;;AAEA,UAAIjD,SAAS,CAATA,IAAAA,KAAJ,MAAA,EAA+B;AAC7B;AACA;AACA,YAAIwC,KAAK,CAALA,SAAAA,KAAoBE,KAAK,CAA7B,SAAA,EAAyC;AACvC,iBAAA,WAAA;AACD;;AACD,YAAA,aAAA;;AACA,YAAIF,KAAK,CAALA,SAAAA,KAAJ,IAAA,EAA8B;AAC5BY,UAAAA,aAAa,GAAbA,CAAAA;AADF,SAAA,MAEO,IAAIV,KAAK,CAALA,SAAAA,KAAJ,IAAA,EAA8B;AACnCU,UAAAA,aAAa,GAAG,CAAhBA,CAAAA;AADK,SAAA,MAEA;AACLA,UAAAA,aAAa,GACXpD,SAAS,CAATA,IAAAA,KAAAA,KAAAA,GACIwC,KAAK,CAALA,SAAAA,GAAkBE,KAAK,CAD3B1C,SAAAA,GAEIwC,KAAK,CAALA,SAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAAgCE,KAAK,CAALA,SAAAA,CAAAA,UAAAA,CAHtCU,CAGsCV,CAHtCU;AAID;;AACD,eAAA,aAAA;AACD;;AACD,UAAItD,KAAK,CAALA,CAAK,CAALA,CAAAA,YAAAA,KAAJ,SAAA,EAAyC;AACvC;AACA;AACA;AACA;AACA;AACA,YACE0C,KAAK,CAALA,oBAAAA,GAAAA,oBAAAA,IACAA,KAAK,CAALA,oBAAAA,GAFF,oBAAA,EAGE;AACA,cAAMa,eAAe,GAAGR,uBAAuB,CAAvBA,OAAAA,CAAgCL,KAAK,CAA7D,YAAwBK,CAAxB;AACA,cAAMS,eAAe,GAAGT,uBAAuB,CAAvBA,OAAAA,CAAgCH,KAAK,CAA7D,YAAwBG,CAAxB;AACA,iBAAOQ,eAAe,KAAfA,eAAAA,GAAAA,WAAAA,GAEHA,eAAe,GAFnB,eAAA;AAGD;;AACD,YAAIb,KAAK,CAALA,oBAAAA,IAAJ,oBAAA,EAAwD;AACtD,iBAAOS,KAAK,GAALA,KAAAA,IAAiBF,KAAK,GAA7B,KAAA;AACD;;AACD,YAAIP,KAAK,CAALA,oBAAAA,IAAJ,oBAAA,EAAwD;AACtD,iBAAOO,KAAK,GAALA,KAAAA,IAAiBE,KAAK,GAA7B,KAAA;AACD;;AAED,eAAA,WAAA;AACD;;AACD,aAAA,WAAA;AAnDFnD,KAAAA;AAsDAA,IAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAQ;AACpBmC,MAAAA,IAAI,CAAJA,KAAAA,GAAAA,gBAAAA;AACAA,MAAAA,IAAI,CAAJA,CAAAA,GAAS/B,WAAW,GAAGqB,WAAW,CAACU,IAAI,CAAvCA,oBAAkC,CAAlCA;;AAEA,UAAIlC,YAAY,KAAhB,IAAA,EAA2B;AACzBkC,QAAAA,IAAI,CAAJA,cAAAA,GAAsBA,IAAI,CAAJA,MAAAA,GAAtBA,mBAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,IAAI,CAAJA,cAAAA,GAAsBA,IAAI,CAAJA,MAAAA,GAAtBA,cAAAA;AACD;;AAED,UAAMD,GAAG,GAAGC,IAAI,CAAhB,YAAA;AACAA,MAAAA,IAAI,CAAJA,EAAAA,GAAUJ,sBAAsB,CAAtBA,MAAAA,CAAVI,GAAUJ,CAAVI;AACAJ,MAAAA,sBAAsB,CAAtBA,MAAAA,CAAAA,GAAAA,IAAqCI,IAAI,CAAJA,EAAAA,GAAUA,IAAI,CAAnDJ,cAAAA;AAEA,UAAMM,GAAG,GAAGF,IAAI,CAAhB,YAAA;AACAA,MAAAA,IAAI,CAAJA,EAAAA,GAAUJ,sBAAsB,CAAtBA,MAAAA,CAAVI,GAAUJ,CAAVI;AACAJ,MAAAA,sBAAsB,CAAtBA,MAAAA,CAAAA,GAAAA,IAAqCI,IAAI,CAAJA,EAAAA,GAAUA,IAAI,CAAnDJ,cAAAA;AAhBF/B,KAAAA;AAlGF,GAAA;;AAsHA,MAAMyB,WAAW,GAAG,SAAdA,WAAc,CAAA,WAAA,EAAW;AAAA,WAAIgC,WAAW,IAAIrD,WAAW,GAA9B,gBAAe,CAAf;AAA/B,GAAA;;AAEA,MAAMgC,QAAQ,GAAG,SAAXA,QAAW,CAAA,cAAA,EAAA,MAAA,EAA4B;AAC3C,QAAMZ,MAAM,GAAG1B,OAAO,CAAtB,cAAsB,CAAtB;AACA,WAAO,MAAM,CAAN,MAAA,CAAA,IAAA,CAAmB,UAAA,IAAA,EAAI;AAAA,aAAI6B,IAAI,CAAJA,EAAAA,KAAJ,MAAA;AAA9B,KAAO,CAAP;AAFF,GAAA;;AAKA,SAAA,iBAAA;AArPF,CAAA;;eAwPA,Y;AAAA;;;;;;;;;;;;0BAxPMrC,Y","sourcesContent":["/* eslint-disable camelcase,import/no-extraneous-dependencies,no-use-before-define */\nimport uniqBy from 'lodash/uniqBy';\nimport wrapSVGText from 'utils/wrapSVGText';\nimport { NUM_COLUMNS, DETAILED_VIEW_MIN_NODE_HEIGHT, DETAILED_VIEW_SCALE } from 'constants';\nimport { interpolateNumber as d3_interpolateNumber } from 'd3-interpolate';\nimport { translateText } from 'utils/transifex';\n\nconst sankeyLayout = () => {\n  const sankeyLayoutState = {};\n\n  // in\n  let viewportWidth;\n  let viewportHeight;\n  let columnWidth;\n\n  // data\n  let columns;\n  let links;\n  let detailedView;\n  let maxHeight;\n  let recolorBy;\n  let nodesColoredAtColumn;\n\n  // layout\n  let linksColumnWidth;\n  let _labelCharsPerLine;\n  const _labelCharWidth = 9;\n  const _labelCharHeight = 16;\n  const _labelMaxLines = 3;\n\n  sankeyLayoutState.setViewportSize = size => {\n    viewportWidth = size[0];\n    viewportHeight = size[1];\n  };\n\n  sankeyLayoutState.setLinksPayload = payload => {\n    columns = payload.visibleNodesByColumn;\n    links = payload.links;\n    detailedView = payload.detailedView;\n    recolorBy = payload.selectedRecolorBy;\n    nodesColoredAtColumn = payload.nodesColoredAtColumn;\n  };\n\n  sankeyLayoutState.columnWidth = i => {\n    if (!i) return columnWidth;\n    columnWidth = +i;\n    _labelCharsPerLine = Math.floor(columnWidth / _labelCharWidth);\n    return sankeyLayoutState;\n  };\n\n  sankeyLayoutState.columns = () => columns;\n\n  sankeyLayoutState.links = () => links;\n\n  sankeyLayoutState.isReady = () => viewportWidth && columns && recolorBy;\n\n  sankeyLayoutState.relayout = () => {\n    if (!sankeyLayoutState.isReady()) {\n      console.warn('not ready');\n      return false;\n    }\n\n    _computeNodeCoords();\n    _computeLinksCoords();\n    _setNodeLabels();\n\n    return true;\n  };\n\n  // using precomputed dimensions on links objects, this will generate SVG paths for links\n  sankeyLayoutState.link = () => d => {\n    const x0 = d.x;\n    const x1 = d.x + d.width;\n    const xi = d3_interpolateNumber(x0, x1);\n    const x2 = xi(0.75);\n    const x3 = xi(0.25);\n    const y0 = d.sy + d.renderedHeight / 2;\n    const y1 = d.ty + d.renderedHeight / 2;\n    return `M${x0},${y0}C${x2},${y0} ${x3},${y1} ${x1},${y1}`;\n  };\n\n  sankeyLayoutState.getMaxHeight = () => maxHeight;\n\n  const _computeNodeCoords = () => {\n    const availableLinkSpace = viewportWidth - NUM_COLUMNS * columnWidth;\n    linksColumnWidth = availableLinkSpace / (NUM_COLUMNS - 1);\n\n    maxHeight = 0;\n\n    columns.forEach((column, i) => {\n      column.x = _getColumnX(i);\n      let columnY = 0;\n      column.values.forEach(node => {\n        node.x = column.x;\n        node.y = columnY;\n        if (detailedView === true) {\n          node.renderedHeight = Math.max(\n            DETAILED_VIEW_MIN_NODE_HEIGHT,\n            DETAILED_VIEW_SCALE * node.height\n          );\n        } else {\n          node.renderedHeight = node.height * viewportHeight;\n        }\n        columnY += node.renderedHeight;\n      });\n      if (columnY > maxHeight) {\n        maxHeight = columnY;\n      }\n    });\n  };\n\n  const _setNodeLabels = () => {\n    columns.forEach(column => {\n      column.values.forEach(node => {\n        node.label = wrapSVGText(\n          translateText(node.name),\n          node.renderedHeight,\n          _labelCharHeight,\n          _labelCharsPerLine,\n          _labelMaxLines\n        );\n      });\n    });\n  };\n\n  // compute links y and y deltas (later used by sankey.link generator)\n  // will be called at each relayouting (user clicks nodes, user scrolls, etc)\n  const _computeLinksCoords = () => {\n    if (links.length === 0) {\n      return;\n    }\n    // source and target are dicts (nodeIds are keys) containing the cumulated height of all links for each node\n    const stackedHeightsByNodeId = { source: {}, target: {} };\n\n    // retrieve node ys to bootstrap stackedHeights\n    links.forEach(link => {\n      const sId = link.sourceNodeId;\n      stackedHeightsByNodeId.source[sId] = _getNode(link.sourceColumnPosition, sId).y;\n\n      const tId = link.targetNodeId;\n      stackedHeightsByNodeId.target[tId] = _getNode(link.targetColumnPosition, tId).y;\n    });\n\n    // this is only used for sorting links with color groups\n    let recolorGroupsOrderedByY;\n\n    if (links[0].recolorGroup !== undefined) {\n      // get all links of the colored column\n      let coloredColumnLinks = links.filter(link => {\n        const entry =\n          nodesColoredAtColumn === 0 ? link.sourceColumnPosition : link.targetColumnPosition;\n        return entry === nodesColoredAtColumn;\n      });\n      // remove duplicates (ie links with same connected node)\n      coloredColumnLinks = uniqBy(\n        coloredColumnLinks,\n        nodesColoredAtColumn === 0 ? 'sourceNodeId' : 'targetNodeId'\n      );\n      // sort by node Y\n      coloredColumnLinks.sort((linkA, linkB) => {\n        const nodeIdA = nodesColoredAtColumn === 0 ? linkA.sourceNodeId : linkA.targetNodeId;\n        const nodeIdB = nodesColoredAtColumn === 0 ? linkB.sourceNodeId : linkB.targetNodeId;\n        const nodes = columns[nodesColoredAtColumn].values;\n        return nodes.find(n => n.id === nodeIdA).y - nodes.find(n => n.id === nodeIdB).y;\n      });\n      // map to color groups\n      recolorGroupsOrderedByY = coloredColumnLinks.map(l => l.recolorGroup);\n    }\n\n    // sort links by node source and target y positions\n    // TODO move sorting to reducer\n    links.sort((linkA, linkB) => {\n      const sIdAY = stackedHeightsByNodeId.source[linkA.sourceNodeId];\n      const sIdBY = stackedHeightsByNodeId.source[linkB.sourceNodeId];\n      const tIdAY = stackedHeightsByNodeId.target[linkA.targetNodeId];\n      const tIdBY = stackedHeightsByNodeId.target[linkB.targetNodeId];\n      const defaultSort = sIdAY - sIdBY || tIdAY - tIdBY;\n\n      if (recolorBy.name !== 'none') {\n        // sorts alphabetically with quals, numerically with inds\n        // TODO for quals use the order presented in the color by menu\n        if (linkA.recolorBy === linkB.recolorBy) {\n          return defaultSort;\n        }\n        let recolorBySort;\n        if (linkA.recolorBy === null) {\n          recolorBySort = 1;\n        } else if (linkB.recolorBy === null) {\n          recolorBySort = -1;\n        } else {\n          recolorBySort =\n            recolorBy.type === 'ind'\n              ? linkA.recolorBy - linkB.recolorBy\n              : linkA.recolorBy.charCodeAt(0) - linkB.recolorBy.charCodeAt(0);\n        }\n        return recolorBySort;\n      }\n      if (links[0].recolorGroup !== undefined) {\n        // When using a recolorGroup\n        // For columns outside of adjacent columns, links should be sorted by the original *y order of recolored nodes*\n        // (mapped to recolor groups before sorting, see recolorGroupsOrderedByY bit above)\n        // Columns directly adjacent to the column where nodes are selected\n        // are sorted by y coords (source or target, depedning on if column is at the left or the right of the selected colun).\n        if (\n          linkA.sourceColumnPosition > nodesColoredAtColumn ||\n          linkA.targetColumnPosition < nodesColoredAtColumn\n        ) {\n          const recolorGroupsYA = recolorGroupsOrderedByY.indexOf(linkA.recolorGroup);\n          const recolorGroupsYB = recolorGroupsOrderedByY.indexOf(linkB.recolorGroup);\n          return recolorGroupsYA === recolorGroupsYB\n            ? defaultSort\n            : recolorGroupsYA - recolorGroupsYB;\n        }\n        if (linkA.targetColumnPosition <= nodesColoredAtColumn) {\n          return tIdAY - tIdBY || sIdAY - sIdBY;\n        }\n        if (linkA.sourceColumnPosition >= nodesColoredAtColumn) {\n          return sIdAY - sIdBY || tIdAY - tIdBY;\n        }\n\n        return defaultSort;\n      }\n      return defaultSort;\n    });\n\n    links.forEach(link => {\n      link.width = linksColumnWidth;\n      link.x = columnWidth + _getColumnX(link.sourceColumnPosition);\n\n      if (detailedView === true) {\n        link.renderedHeight = link.height * DETAILED_VIEW_SCALE;\n      } else {\n        link.renderedHeight = link.height * viewportHeight;\n      }\n\n      const sId = link.sourceNodeId;\n      link.sy = stackedHeightsByNodeId.source[sId];\n      stackedHeightsByNodeId.source[sId] = link.sy + link.renderedHeight;\n\n      const tId = link.targetNodeId;\n      link.ty = stackedHeightsByNodeId.target[tId];\n      stackedHeightsByNodeId.target[tId] = link.ty + link.renderedHeight;\n    });\n  };\n\n  const _getColumnX = columnIndex => columnIndex * (columnWidth + linksColumnWidth);\n\n  const _getNode = (columnPosition, nodeId) => {\n    const column = columns[columnPosition];\n    return column.values.find(node => node.id === nodeId);\n  };\n\n  return sankeyLayoutState;\n};\n\nexport default sankeyLayout;\n"]}]}