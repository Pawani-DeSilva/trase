{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js","mtime":1543486759506},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchDataOnPanelChange),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchDataOnTabChange),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchDataOnItemChange),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchDataOnFilterClear),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchDataOnPageChange),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(dashboardElementSaga);\n\nimport { select, put, all, fork, takeLatest } from 'redux-saga/effects';\nimport { getDashboardPanelData, getMoreDashboardPanelData, getDashboardPanelSectionTabs, DASHBOARD_ELEMENT__CLEAR_PANEL, DASHBOARD_ELEMENT__SET_ACTIVE_PANEL, DASHBOARD_ELEMENT__SET_ACTIVE_TAB, DASHBOARD_ELEMENT__SET_ACTIVE_ITEM, DASHBOARD_ELEMENT__SET_PANEL_TABS, DASHBOARD_ELEMENT__SET_PANEL_PAGE, DASHBOARD_ELEMENT__SET_ACTIVE_ITEM_WITH_SEARCH } from 'react-components/dashboard-element/dashboard-element.actions';\n\nfunction fetchDataOnPanelChange() {\n  var _marked, fetchDashboardPanelInitialData;\n\n  return _regeneratorRuntime.wrap(function fetchDataOnPanelChange$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          fetchDashboardPanelInitialData = function _ref(action) {\n            var activePanelId, state, dashboardElement;\n            return _regeneratorRuntime.wrap(function fetchDashboardPanelInitialData$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    activePanelId = action.payload.activePanelId;\n                    _context.next = 3;\n                    return select();\n\n                  case 3:\n                    state = _context.sent;\n                    dashboardElement = state.dashboardElement; // avoid dispatching getDashboardPanelData through getDashboardPanelSectionTabs for companies\n\n                    if (!(dashboardElement.activePanelId === 'companies')) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    _context.next = 8;\n                    return put(getDashboardPanelSectionTabs(activePanelId));\n\n                  case 8:\n                    _context.next = 20;\n                    break;\n\n                  case 10:\n                    if (!(activePanelId === 'sources')) {\n                      _context.next = 18;\n                      break;\n                    }\n\n                    _context.next = 13;\n                    return put(getDashboardPanelData('countries'));\n\n                  case 13:\n                    if (!dashboardElement.countriesPanel.activeItem) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    _context.next = 16;\n                    return put(getDashboardPanelData(activePanelId));\n\n                  case 16:\n                    _context.next = 20;\n                    break;\n\n                  case 18:\n                    _context.next = 20;\n                    return put(getDashboardPanelData(activePanelId));\n\n                  case 20:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, this);\n          };\n\n          _marked =\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(fetchDashboardPanelInitialData);\n          _context2.next = 4;\n          return takeLatest(DASHBOARD_ELEMENT__SET_ACTIVE_PANEL, fetchDashboardPanelInitialData);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction fetchDataOnTabChange() {\n  var _marked3, onTabChange;\n\n  return _regeneratorRuntime.wrap(function fetchDataOnTabChange$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          onTabChange = function _ref3(action) {\n            var panel, _ref2, dashboardElement, activePanelId;\n\n            return _regeneratorRuntime.wrap(function onTabChange$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    panel = action.payload.panel;\n                    _context3.next = 3;\n                    return select();\n\n                  case 3:\n                    _ref2 = _context3.sent;\n                    dashboardElement = _ref2.dashboardElement;\n                    activePanelId = panel || dashboardElement.activePanelId;\n                    _context3.next = 8;\n                    return put(getDashboardPanelData(activePanelId));\n\n                  case 8:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, this);\n          };\n\n          _marked3 =\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(onTabChange);\n          _context4.next = 4;\n          return takeLatest([DASHBOARD_ELEMENT__SET_ACTIVE_TAB, DASHBOARD_ELEMENT__SET_PANEL_TABS, DASHBOARD_ELEMENT__SET_ACTIVE_ITEM_WITH_SEARCH], onTabChange);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nfunction fetchDataOnItemChange() {\n  var _marked5, onItemChange;\n\n  return _regeneratorRuntime.wrap(function fetchDataOnItemChange$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          onItemChange = function _ref5(action) {\n            var _action$payload, activeItem, panel, _ref4, dashboardElement, panelName, activeTab, data, items, activeItemExists;\n\n            return _regeneratorRuntime.wrap(function onItemChange$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _action$payload = action.payload, activeItem = _action$payload.activeItem, panel = _action$payload.panel;\n                    _context5.next = 3;\n                    return select();\n\n                  case 3:\n                    _ref4 = _context5.sent;\n                    dashboardElement = _ref4.dashboardElement;\n                    panelName = \"\".concat(panel, \"Panel\");\n                    activeTab = dashboardElement[panelName].activeTab;\n                    data = dashboardElement.data[panel];\n                    items = typeof activeTab !== 'undefined' ? data[activeTab && activeTab.id] : data;\n                    activeItemExists = !!items && items.find(function (i) {\n                      return i.id === (activeItem && activeItem.id);\n                    }); // for now, we just need to recalculate the tabs when selecting a new country\n\n                    if (!(panel === 'countries')) {\n                      _context5.next = 13;\n                      break;\n                    }\n\n                    _context5.next = 13;\n                    return put(getDashboardPanelSectionTabs(panel));\n\n                  case 13:\n                    if (!(items && !activeItemExists && panel !== 'countries')) {\n                      _context5.next = 16;\n                      break;\n                    }\n\n                    _context5.next = 16;\n                    return put(getDashboardPanelData(panel));\n\n                  case 16:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5, this);\n          };\n\n          _marked5 =\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(onItemChange);\n          _context6.next = 4;\n          return takeLatest(DASHBOARD_ELEMENT__SET_ACTIVE_ITEM, onItemChange);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\n\nfunction fetchDataOnFilterClear() {\n  var _marked7, onFilterClear;\n\n  return _regeneratorRuntime.wrap(function fetchDataOnFilterClear$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          onFilterClear = function _ref7() {\n            var _ref6, dashboardElement;\n\n            return _regeneratorRuntime.wrap(function onFilterClear$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return select();\n\n                  case 2:\n                    _ref6 = _context7.sent;\n                    dashboardElement = _ref6.dashboardElement;\n\n                    if (!(dashboardElement.activePanelId === 'sources')) {\n                      _context7.next = 12;\n                      break;\n                    }\n\n                    _context7.next = 7;\n                    return put(getDashboardPanelData('countries'));\n\n                  case 7:\n                    if (!(dashboardElement.countriesPanel.activeItem !== null)) {\n                      _context7.next = 10;\n                      break;\n                    }\n\n                    _context7.next = 10;\n                    return put(getDashboardPanelData(dashboardElement.activePanelId));\n\n                  case 10:\n                    _context7.next = 14;\n                    break;\n\n                  case 12:\n                    _context7.next = 14;\n                    return put(getDashboardPanelData(dashboardElement.activePanelId));\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7, this);\n          };\n\n          _marked7 =\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(onFilterClear);\n          _context8.next = 4;\n          return takeLatest(DASHBOARD_ELEMENT__CLEAR_PANEL, onFilterClear);\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, this);\n}\n\nfunction fetchDataOnPageChange() {\n  var _marked9, onPageChange;\n\n  return _regeneratorRuntime.wrap(function fetchDataOnPageChange$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          onPageChange = function _ref9(action) {\n            var direction, _ref8, dashboardElement, panelName, activeTab;\n\n            return _regeneratorRuntime.wrap(function onPageChange$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    direction = action.payload.direction;\n                    _context9.next = 3;\n                    return select();\n\n                  case 3:\n                    _ref8 = _context9.sent;\n                    dashboardElement = _ref8.dashboardElement;\n                    panelName = \"\".concat(dashboardElement.activePanelId, \"Panel\");\n                    activeTab = dashboardElement[panelName].activeTab;\n                    _context9.next = 9;\n                    return put(getMoreDashboardPanelData(dashboardElement.activePanelId, activeTab, direction));\n\n                  case 9:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked9, this);\n          };\n\n          _marked9 =\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(onPageChange);\n          _context10.next = 4;\n          return takeLatest(DASHBOARD_ELEMENT__SET_PANEL_PAGE, onPageChange);\n\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, this);\n}\n\nexport default function dashboardElementSaga() {\n  var sagas;\n  return _regeneratorRuntime.wrap(function dashboardElementSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          sagas = [fetchDataOnPanelChange, fetchDataOnTabChange, fetchDataOnItemChange, fetchDataOnFilterClear, fetchDataOnPageChange];\n          _context11.next = 3;\n          return all(sagas.map(function (saga) {\n            return fork(saga);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, this);\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_marked2, \"_marked2\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(_marked4, \"_marked4\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(_marked6, \"_marked6\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(_marked8, \"_marked8\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(_marked10, \"_marked10\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(_marked11, \"_marked11\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(fetchDataOnPanelChange, \"fetchDataOnPanelChange\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(fetchDataOnTabChange, \"fetchDataOnTabChange\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(fetchDataOnItemChange, \"fetchDataOnItemChange\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(fetchDataOnFilterClear, \"fetchDataOnFilterClear\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(fetchDataOnPageChange, \"fetchDataOnPageChange\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  reactHotLoader.register(dashboardElementSaga, \"dashboardElementSaga\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.saga.js"],"names":["fetchDataOnPanelChange","fetchDashboardPanelInitialData","activePanelId","action","state","select","dashboardElement","put","getDashboardPanelSectionTabs","getDashboardPanelData","takeLatest","fetchDataOnTabChange","onTabChange","panel","fetchDataOnItemChange","onItemChange","activeItem","panelName","activeTab","data","items","activeItemExists","i","fetchDataOnFilterClear","onFilterClear","fetchDataOnPageChange","onPageChange","direction","getMoreDashboardPanelData","dashboardElementSaga","sagas","all","fork"],"mappings":"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","sourcesContent":["import { select, put, all, fork, takeLatest } from 'redux-saga/effects';\nimport {\n  getDashboardPanelData,\n  getMoreDashboardPanelData,\n  getDashboardPanelSectionTabs,\n  DASHBOARD_ELEMENT__CLEAR_PANEL,\n  DASHBOARD_ELEMENT__SET_ACTIVE_PANEL,\n  DASHBOARD_ELEMENT__SET_ACTIVE_TAB,\n  DASHBOARD_ELEMENT__SET_ACTIVE_ITEM,\n  DASHBOARD_ELEMENT__SET_PANEL_TABS,\n  DASHBOARD_ELEMENT__SET_PANEL_PAGE,\n  DASHBOARD_ELEMENT__SET_ACTIVE_ITEM_WITH_SEARCH\n} from 'react-components/dashboard-element/dashboard-element.actions';\n\nfunction* fetchDataOnPanelChange() {\n  function* fetchDashboardPanelInitialData(action) {\n    const { activePanelId } = action.payload;\n    const state = yield select();\n    const { dashboardElement } = state;\n\n    // avoid dispatching getDashboardPanelData through getDashboardPanelSectionTabs for companies\n    if (dashboardElement.activePanelId === 'companies') {\n      yield put(getDashboardPanelSectionTabs(activePanelId));\n    } else if (activePanelId === 'sources') {\n      yield put(getDashboardPanelData('countries'));\n      if (dashboardElement.countriesPanel.activeItem) {\n        yield put(getDashboardPanelData(activePanelId));\n      }\n    } else {\n      yield put(getDashboardPanelData(activePanelId));\n    }\n  }\n\n  yield takeLatest(DASHBOARD_ELEMENT__SET_ACTIVE_PANEL, fetchDashboardPanelInitialData);\n}\n\nfunction* fetchDataOnTabChange() {\n  function* onTabChange(action) {\n    const { panel } = action.payload;\n    const { dashboardElement } = yield select();\n    const activePanelId = panel || dashboardElement.activePanelId;\n    yield put(getDashboardPanelData(activePanelId));\n  }\n\n  yield takeLatest(\n    [\n      DASHBOARD_ELEMENT__SET_ACTIVE_TAB,\n      DASHBOARD_ELEMENT__SET_PANEL_TABS,\n      DASHBOARD_ELEMENT__SET_ACTIVE_ITEM_WITH_SEARCH\n    ],\n    onTabChange\n  );\n}\n\nfunction* fetchDataOnItemChange() {\n  function* onItemChange(action) {\n    const { activeItem, panel } = action.payload;\n    const { dashboardElement } = yield select();\n    const panelName = `${panel}Panel`;\n    const { activeTab } = dashboardElement[panelName];\n    const data = dashboardElement.data[panel];\n    const items = typeof activeTab !== 'undefined' ? data[activeTab && activeTab.id] : data;\n    const activeItemExists = !!items && items.find(i => i.id === (activeItem && activeItem.id));\n\n    // for now, we just need to recalculate the tabs when selecting a new country\n    if (panel === 'countries') {\n      yield put(getDashboardPanelSectionTabs(panel));\n    }\n\n    if (items && !activeItemExists && panel !== 'countries') {\n      yield put(getDashboardPanelData(panel));\n    }\n  }\n\n  yield takeLatest(DASHBOARD_ELEMENT__SET_ACTIVE_ITEM, onItemChange);\n}\n\nfunction* fetchDataOnFilterClear() {\n  function* onFilterClear() {\n    const { dashboardElement } = yield select();\n\n    if (dashboardElement.activePanelId === 'sources') {\n      yield put(getDashboardPanelData('countries'));\n      if (dashboardElement.countriesPanel.activeItem !== null) {\n        yield put(getDashboardPanelData(dashboardElement.activePanelId));\n      }\n    } else {\n      yield put(getDashboardPanelData(dashboardElement.activePanelId));\n    }\n  }\n\n  yield takeLatest(DASHBOARD_ELEMENT__CLEAR_PANEL, onFilterClear);\n}\n\nfunction* fetchDataOnPageChange() {\n  function* onPageChange(action) {\n    const { direction } = action.payload;\n    const { dashboardElement } = yield select();\n    const panelName = `${dashboardElement.activePanelId}Panel`;\n    const { activeTab } = dashboardElement[panelName];\n    yield put(getMoreDashboardPanelData(dashboardElement.activePanelId, activeTab, direction));\n  }\n\n  yield takeLatest(DASHBOARD_ELEMENT__SET_PANEL_PAGE, onPageChange);\n}\n\nexport default function* dashboardElementSaga() {\n  const sagas = [\n    fetchDataOnPanelChange,\n    fetchDataOnTabChange,\n    fetchDataOnItemChange,\n    fetchDataOnFilterClear,\n    fetchDataOnPageChange\n  ];\n  yield all(sagas.map(saga => fork(saga)));\n}\n"]}]}