{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getRecolorGroups.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getRecolorGroups.js","mtime":1548840716978},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { NODE_SELECTION_LINKS_NUM_COLORS } from 'constants'; // gets the next available color group\n\nvar getNextNodeColorGroup = function getNextNodeColorGroup(currentSelectedNodesColorGroups) {\n  for (var i = 1; i < NODE_SELECTION_LINKS_NUM_COLORS + 1; i++) {\n    if (currentSelectedNodesColorGroups.indexOf(i) === -1) {\n      return i;\n    }\n  } // just use standard link light gray after allowed NODE_SELECTION_LINKS_NUM_COLORS\n\n\n  return -1;\n};\n\nvar _default = function _default(previousNodesColoredBySelection, nextColoredBySelection, recolorGroups) {\n  var nextRecolorGroups = cloneDeep(recolorGroups) || []; // test for nodeIds not selected anymore\n\n  if (previousNodesColoredBySelection) {\n    previousNodesColoredBySelection.forEach(function (nodeId) {\n      if (nextColoredBySelection.indexOf(nodeId) === -1) {\n        delete nextRecolorGroups[nodeId];\n      }\n    });\n  } // test for added nodeIds\n\n\n  nextColoredBySelection.forEach(function (nodeId) {\n    if (!previousNodesColoredBySelection || previousNodesColoredBySelection.indexOf(nodeId) === -1) {\n      nextRecolorGroups[nodeId] = getNextNodeColorGroup(Object.values(nextRecolorGroups));\n    }\n  });\n  return nextRecolorGroups;\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getNextNodeColorGroup, \"getNextNodeColorGroup\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getRecolorGroups.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getRecolorGroups.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getRecolorGroups.js"],"names":["getNextNodeColorGroup","i","NODE_SELECTION_LINKS_NUM_COLORS","currentSelectedNodesColorGroups","nextRecolorGroups","cloneDeep","previousNodesColoredBySelection","nextColoredBySelection","Object"],"mappings":";;;;;;AAAA,OAAA,SAAA,MAAA,kBAAA;AACA,SAAA,+BAAA,QAAA,WAAA,C,CAEA;;AACA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,+BAAA,EAAmC;AAC/D,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,+BAA+B,GAAnD,CAAA,EAAyDD,CAAzD,EAAA,EAA8D;AAC5D,QAAIE,+BAA+B,CAA/BA,OAAAA,CAAAA,CAAAA,MAA+C,CAAnD,CAAA,EAAuD;AACrD,aAAA,CAAA;AACD;AAJ4D,GAAA,CAM/D;;;AACA,SAAO,CAAP,CAAA;AAPF,CAAA;;eAUe,kBAAA,+BAAA,EAAA,sBAAA,EAAA,aAAA,EAA4E;AACzF,MAAMC,iBAAiB,GAAGC,SAAS,CAATA,aAAS,CAATA,IAD+D,EACzF,CADyF,CAGzF;;AACA,MAAA,+BAAA,EAAqC;AACnCC,IAAAA,+BAA+B,CAA/BA,OAAAA,CAAwC,UAAA,MAAA,EAAU;AAChD,UAAIC,sBAAsB,CAAtBA,OAAAA,CAAAA,MAAAA,MAA2C,CAA/C,CAAA,EAAmD;AACjD,eAAOH,iBAAiB,CAAxB,MAAwB,CAAxB;AACD;AAHHE,KAAAA;AALuF,GAAA,CAYzF;;;AACAC,EAAAA,sBAAsB,CAAtBA,OAAAA,CAA+B,UAAA,MAAA,EAAU;AACvC,QACE,CAAA,+BAAA,IACAD,+BAA+B,CAA/BA,OAAAA,CAAAA,MAAAA,MAAoD,CAFtD,CAAA,EAGE;AACAF,MAAAA,iBAAiB,CAAjBA,MAAiB,CAAjBA,GAA4BJ,qBAAqB,CAACQ,MAAM,CAANA,MAAAA,CAAlDJ,iBAAkDI,CAAD,CAAjDJ;AACD;AANHG,GAAAA;AASA,SAAA,iBAAA;AAtBF,C;;AAAA;;;;;;;;;;;;0BAVMP,qB","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { NODE_SELECTION_LINKS_NUM_COLORS } from 'constants';\n\n// gets the next available color group\nconst getNextNodeColorGroup = currentSelectedNodesColorGroups => {\n  for (let i = 1; i < NODE_SELECTION_LINKS_NUM_COLORS + 1; i++) {\n    if (currentSelectedNodesColorGroups.indexOf(i) === -1) {\n      return i;\n    }\n  }\n  // just use standard link light gray after allowed NODE_SELECTION_LINKS_NUM_COLORS\n  return -1;\n};\n\nexport default (previousNodesColoredBySelection, nextColoredBySelection, recolorGroups) => {\n  const nextRecolorGroups = cloneDeep(recolorGroups) || [];\n\n  // test for nodeIds not selected anymore\n  if (previousNodesColoredBySelection) {\n    previousNodesColoredBySelection.forEach(nodeId => {\n      if (nextColoredBySelection.indexOf(nodeId) === -1) {\n        delete nextRecolorGroups[nodeId];\n      }\n    });\n  }\n\n  // test for added nodeIds\n  nextColoredBySelection.forEach(nodeId => {\n    if (\n      !previousNodesColoredBySelection ||\n      previousNodesColoredBySelection.indexOf(nodeId) === -1\n    ) {\n      nextRecolorGroups[nodeId] = getNextNodeColorGroup(Object.values(nextRecolorGroups));\n    }\n  });\n\n  return nextRecolorGroups;\n};\n"]}]}