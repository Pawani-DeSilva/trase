{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js","mtime":1548840708260},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable no-shadow */\n// see sankey.container for details on how to use those containers\nimport { toggleMap, toggleMapLayerMenu } from 'actions/app.actions';\nimport { selectNodeFromGeoId, highlightNodeFromGeoId, saveMapView } from 'actions/tool.actions';\nimport { getSelectedNodesGeoIds, getHighlightedNodesGeoIds } from 'react-components/tool/tool.selectors';\nimport connect from 'connect';\nimport Map from 'components/tool/map.component';\nimport getBasemap from '../helpers/getBasemap';\n\nvar mapMethodsToState = function mapMethodsToState(state) {\n  return {\n    setMapView: state.tool.mapView,\n    showLoadedMap: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.mapVectorData;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          mapVectorData: state.tool.mapVectorData,\n          currentPolygonType: state.tool.selectedColumnsIds,\n          selectedNodesGeoIds: getSelectedNodesGeoIds(state.tool),\n          recolorByNodeIds: state.tool.recolorByNodeIds,\n          choropleth: state.tool.choropleth,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n          biomeFilter: state.tool.selectedBiomeFilter,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    selectPolygonType: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.selectedColumnsIds ? state.tool.selectedColumnsIds[0] : undefined;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          selectedColumnsIds: state.tool.selectedColumnsIds,\n          choropleth: state.tool.choropleth,\n          biomeFilter: state.tool.selectedBiomeFilter,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    selectPolygons: {\n      _comparedValue: function _comparedValue(state) {\n        return getSelectedNodesGeoIds(state.tool);\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    highlightPolygon: {\n      _comparedValue: function _comparedValue(state) {\n        return getHighlightedNodesGeoIds(state.tool);\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n          highlightedGeoId: getHighlightedNodesGeoIds(state.tool)[0]\n        };\n      }\n    },\n    setChoropleth: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.choropleth;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          choropleth: state.tool.choropleth,\n          selectedBiomeFilter: state.tool.selectedBiomeFilter,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    loadContextLayers: state.tool.selectedMapContextualLayersData,\n    showLinkedGeoIds: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.linkedGeoIds;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          choropleth: state.tool.choropleth,\n          selectedBiomeFilter: state.tool.selectedBiomeFilter,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n          defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n          // get back to context default map view if no nodes are selected\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    invalidate: state.tool.isMapVisible,\n    setBasemap: {\n      _comparedValue: function _comparedValue(state) {\n        return getBasemap(state.tool);\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          basemapId: getBasemap(state.tool),\n          choropleth: state.tool.choropleth,\n          selectedBiomeFilter: state.tool.selectedBiomeFilter,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    filterByBiome: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.selectedBiomeFilter;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          choropleth: state.tool.choropleth,\n          selectedBiomeFilter: state.tool.selectedBiomeFilter,\n          linkedGeoIds: state.tool.linkedGeoIds,\n          defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n          forceDefaultMapView: !state.tool.selectedNodesIds.length\n        };\n      }\n    },\n    updatePointShadowLayer: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.visibleNodes;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          mapVectorData: state.tool.mapVectorData,\n          visibleNodes: state.tool.visibleNodes\n        };\n      }\n    }\n  };\n};\n\nvar mapViewCallbacksToActions = function mapViewCallbacksToActions() {\n  return {\n    onPolygonClicked: function onPolygonClicked(geoId) {\n      return selectNodeFromGeoId(geoId);\n    },\n    onPolygonHighlighted: function onPolygonHighlighted(geoId, coordinates) {\n      return highlightNodeFromGeoId(geoId, coordinates);\n    },\n    onToggleMap: function onToggleMap() {\n      return toggleMap();\n    },\n    onToggleMapLayerMenu: function onToggleMapLayerMenu() {\n      return toggleMapLayerMenu();\n    },\n    onMoveEnd: function onMoveEnd(latlng, zoom) {\n      return saveMapView(latlng, zoom);\n    }\n  };\n};\n\nvar _default = connect(Map, mapMethodsToState, mapViewCallbacksToActions);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapMethodsToState, \"mapMethodsToState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js\");\n  reactHotLoader.register(mapViewCallbacksToActions, \"mapViewCallbacksToActions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map.container.js"],"names":["mapMethodsToState","setMapView","state","showLoadedMap","_comparedValue","_returnedValue","mapVectorData","currentPolygonType","selectedNodesGeoIds","getSelectedNodesGeoIds","recolorByNodeIds","choropleth","linkedGeoIds","defaultMapView","biomeFilter","forceDefaultMapView","length","selectPolygonType","selectedColumnsIds","selectPolygons","selectedGeoIds","highlightPolygon","getHighlightedNodesGeoIds","highlightedGeoId","setChoropleth","selectedBiomeFilter","loadContextLayers","showLinkedGeoIds","invalidate","setBasemap","getBasemap","basemapId","filterByBiome","updatePointShadowLayer","visibleNodes","mapViewCallbacksToActions","onPolygonClicked","selectNodeFromGeoId","onPolygonHighlighted","highlightNodeFromGeoId","onToggleMap","toggleMap","onToggleMapLayerMenu","toggleMapLayerMenu","onMoveEnd","saveMapView","connect"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\n// see sankey.container for details on how to use those containers\nimport { toggleMap, toggleMapLayerMenu } from 'actions/app.actions';\nimport { selectNodeFromGeoId, highlightNodeFromGeoId, saveMapView } from 'actions/tool.actions';\nimport {\n  getSelectedNodesGeoIds,\n  getHighlightedNodesGeoIds\n} from 'react-components/tool/tool.selectors';\nimport connect from 'connect';\nimport Map from 'components/tool/map.component';\nimport getBasemap from '../helpers/getBasemap';\n\nconst mapMethodsToState = state => ({\n  setMapView: state.tool.mapView,\n  showLoadedMap: {\n    _comparedValue: state => state.tool.mapVectorData,\n    _returnedValue: state => ({\n      mapVectorData: state.tool.mapVectorData,\n      currentPolygonType: state.tool.selectedColumnsIds,\n      selectedNodesGeoIds: getSelectedNodesGeoIds(state.tool),\n      recolorByNodeIds: state.tool.recolorByNodeIds,\n      choropleth: state.tool.choropleth,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n      biomeFilter: state.tool.selectedBiomeFilter,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  selectPolygonType: {\n    _comparedValue: state =>\n      state.tool.selectedColumnsIds ? state.tool.selectedColumnsIds[0] : undefined,\n    _returnedValue: state => ({\n      selectedColumnsIds: state.tool.selectedColumnsIds,\n      choropleth: state.tool.choropleth,\n      biomeFilter: state.tool.selectedBiomeFilter,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  selectPolygons: {\n    _comparedValue: state => getSelectedNodesGeoIds(state.tool),\n    _returnedValue: state => ({\n      selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  highlightPolygon: {\n    _comparedValue: state => getHighlightedNodesGeoIds(state.tool),\n    _returnedValue: state => ({\n      selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n      highlightedGeoId: getHighlightedNodesGeoIds(state.tool)[0]\n    })\n  },\n  setChoropleth: {\n    _comparedValue: state => state.tool.choropleth,\n    _returnedValue: state => ({\n      choropleth: state.tool.choropleth,\n      selectedBiomeFilter: state.tool.selectedBiomeFilter,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  loadContextLayers: state.tool.selectedMapContextualLayersData,\n  showLinkedGeoIds: {\n    _comparedValue: state => state.tool.linkedGeoIds,\n    _returnedValue: state => ({\n      choropleth: state.tool.choropleth,\n      selectedBiomeFilter: state.tool.selectedBiomeFilter,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      selectedGeoIds: getSelectedNodesGeoIds(state.tool),\n      defaultMapView: state.app.selectedContext ? state.app.selectedContext.map : null,\n      // get back to context default map view if no nodes are selected\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  invalidate: state.tool.isMapVisible,\n  setBasemap: {\n    _comparedValue: state => getBasemap(state.tool),\n    _returnedValue: state => ({\n      basemapId: getBasemap(state.tool),\n      choropleth: state.tool.choropleth,\n      selectedBiomeFilter: state.tool.selectedBiomeFilter,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  filterByBiome: {\n    _comparedValue: state => state.tool.selectedBiomeFilter,\n    _returnedValue: state => ({\n      choropleth: state.tool.choropleth,\n      selectedBiomeFilter: state.tool.selectedBiomeFilter,\n      linkedGeoIds: state.tool.linkedGeoIds,\n      defaultMapView: state.tool.selectedContext ? state.tool.selectedContext.map : null,\n      forceDefaultMapView: !state.tool.selectedNodesIds.length\n    })\n  },\n  updatePointShadowLayer: {\n    _comparedValue: state => state.tool.visibleNodes,\n    _returnedValue: state => ({\n      mapVectorData: state.tool.mapVectorData,\n      visibleNodes: state.tool.visibleNodes\n    })\n  }\n});\n\nconst mapViewCallbacksToActions = () => ({\n  onPolygonClicked: geoId => selectNodeFromGeoId(geoId),\n  onPolygonHighlighted: (geoId, coordinates) => highlightNodeFromGeoId(geoId, coordinates),\n  onToggleMap: () => toggleMap(),\n  onToggleMapLayerMenu: () => toggleMapLayerMenu(),\n  onMoveEnd: (latlng, zoom) => saveMapView(latlng, zoom)\n});\n\nexport default connect(\n  Map,\n  mapMethodsToState,\n  mapViewCallbacksToActions\n);\n"]}]}