{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/animated-flows/sankey.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/animated-flows/sankey.js","mtime":1543486759502},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable */\nimport * as d3 from 'd3';\nexport default function Sankey(width) {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 8,\n      size = [1, 1],\n      nodes = [],\n      links = [];\n\n  sankey.nodeWidth = function (_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function (_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function (_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function (_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function (_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function (iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.relayout = function () {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.link = function () {\n    var curvature = 0.5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = d3.interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = d.source.y + d.sy + d.dy / 2,\n          y1 = d.target.y + d.ty + d.dy / 2;\n      return 'M' + x0 + ',' + y0 + 'C' + x2 + ',' + y0 + ' ' + x3 + ',' + y1 + ' ' + x1 + ',' + y1;\n    }\n\n    link.curvature = function (_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  }; // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n\n\n  function computeNodeLinks() {\n    nodes.forEach(function (node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function (link) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === 'number') source = link.source = nodes[link.source];\n      if (typeof target === 'number') target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  } // Compute the value (size) of each node by summing the associated links.\n\n\n  function computeNodeValues() {\n    nodes.forEach(function (node) {\n      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n    });\n  } // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n\n\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0;\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(function (node) {\n        node.x = x;\n        node.dx = nodeWidth;\n        node.sourceLinks.forEach(function (link) {\n          nextNodes.push(link.target);\n        });\n      });\n      remainingNodes = nextNodes;\n      ++x;\n    } //\n\n\n    moveSinksRight(x);\n    scaleNodeBreadths((width - nodeWidth) / (x - 1));\n  }\n\n  function moveSourcesRight() {\n    nodes.forEach(function (node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function (d) {\n          return d.target.x;\n        }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function (node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function (node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = d3.nest().key(function (d) {\n      return d.x;\n    }).sortKeys(d3.ascending).entries(nodes).map(function (d) {\n      return d.values;\n    }); //\n\n    initializeNodeDepth();\n    resolveCollisions();\n\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var ky = d3.min(nodesByBreadth, function (nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n      nodesByBreadth.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n      links.forEach(function (link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function (nodes, breadth) {\n        nodes.forEach(function (node) {\n          if (node.targetLinks.length) {\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.sourceLinks.length) {\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function (nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i; // Push any overlapping nodes down.\n\n        nodes.sort(ascendingDepth);\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        } // If the bottommost node goes outside the bounds, push it back up.\n\n\n        dy = y0 - nodePadding - size[1];\n\n        if (dy > 0) {\n          y0 = node.y -= dy; // Push any overlapping nodes back up.\n\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function (node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function (node) {\n      var sy = 0,\n          ty = 0;\n      node.sourceLinks.forEach(function (link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function (link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Sankey, \"Sankey\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/animated-flows/sankey.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/animated-flows/sankey.js"],"names":["sankey","nodeWidth","nodePadding","size","nodes","links","arguments","computeNodeLinks","computeNodeValues","computeNodeBreadths","computeNodeDepths","computeLinkDepths","curvature","x0","d","x1","xi","d3","x2","x3","y0","y1","link","node","source","target","Math","remainingNodes","x","nextNodes","moveSinksRight","scaleNodeBreadths","width","nodesByBreadth","initializeNodeDepth","resolveCollisions","alpha","iterations","relaxRightToLeft","relaxLeftToRight","ky","y","center","n","i","dy","a","b","sy","ty"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport * as d3 from 'd3';\n\nexport default function Sankey(width) {\n  var sankey = {},\n    nodeWidth = 24,\n    nodePadding = 8,\n    size = [1, 1],\n    nodes = [],\n    links = [];\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function(_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.link = function() {\n    var curvature = 0.5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n        x1 = d.target.x,\n        xi = d3.interpolateNumber(x0, x1),\n        x2 = xi(curvature),\n        x3 = xi(1 - curvature),\n        y0 = d.source.y + d.sy + d.dy / 2,\n        y1 = d.target.y + d.ty + d.dy / 2;\n      return 'M' + x0 + ',' + y0 + 'C' + x2 + ',' + y0 + ' ' + x3 + ',' + y1 + ' ' + x1 + ',' + y1;\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function(node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function(link) {\n      var source = link.source,\n        target = link.target;\n      if (typeof source === 'number') source = link.source = nodes[link.source];\n      if (typeof target === 'number') target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function(node) {\n      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n      nextNodes,\n      x = 0;\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(function(node) {\n        node.x = x;\n        node.dx = nodeWidth;\n        node.sourceLinks.forEach(function(link) {\n          nextNodes.push(link.target);\n        });\n      });\n      remainingNodes = nextNodes;\n      ++x;\n    }\n\n    //\n    moveSinksRight(x);\n    scaleNodeBreadths((width - nodeWidth) / (x - 1));\n  }\n\n  function moveSourcesRight() {\n    nodes.forEach(function(node) {\n      if (!node.targetLinks.length) {\n        node.x =\n          d3.min(node.sourceLinks, function(d) {\n            return d.target.x;\n          }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = d3\n      .nest()\n      .key(function(d) {\n        return d.x;\n      })\n      .sortKeys(d3.ascending)\n      .entries(nodes)\n      .map(function(d) {\n        return d.values;\n      });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft((alpha *= 0.99));\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var ky = d3.min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function(nodes, breadth) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth\n        .slice()\n        .reverse()\n        .forEach(function(nodes) {\n          nodes.forEach(function(node) {\n            if (node.sourceLinks.length) {\n              var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n          dy,\n          y0 = 0,\n          n = nodes.length,\n          i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0,\n        ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n}\n"]}]}