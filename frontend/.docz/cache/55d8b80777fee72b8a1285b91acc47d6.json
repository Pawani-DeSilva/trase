{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js","mtime":1544637720679},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport L from 'leaflet';\nimport isNumber from 'lodash/isNumber';\nimport debounce from 'lodash/debounce'; // eslint-disable-next-line camelcase\n\nimport turf_bbox from '@turf/bbox';\nimport { BASEMAPS, CARTO_BASE_URL, COLORS, MAP_PANES, MAP_PANES_Z, CHOROPLETH_COLORS } from 'constants';\nimport 'styles/components/tool/map/leaflet.css';\nimport 'styles/components/tool/map.scss';\nimport 'styles/components/tool/map/map-legend.scss';\nimport 'styles/components/tool/map/map-choropleth.scss';\nvar POINT_RADIUS = 4;\n\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    var _this = this;\n\n    _classCallCheck(this, _default);\n\n    this.canvasRender = !!document.createElement('canvas').getContext && USE_CANVAS_MAP;\n    this.darkBasemap = false;\n    var mapOptions = {\n      zoomControl: false,\n      minZoom: 2,\n      preferCanvas: this.canvasRender\n    };\n    this.map = L.map('js-map', mapOptions);\n    new L.Control.Zoom({\n      position: 'topleft'\n    }).addTo(this.map);\n    L.control.scale({\n      position: 'bottomleft',\n      imperial: false\n    }).addTo(this.map);\n    var worldBounds = L.latLngBounds(L.latLng(-89, -180), L.latLng(89, 180));\n    this.map.setMaxBounds(worldBounds);\n    this.map.on('drag', function () {\n      _this.map.panInsideBounds(worldBounds, {\n        animate: false\n      });\n    });\n    this.map.on('layeradd', function () {\n      return _this._updateAttribution();\n    });\n    this.map.on('dragend zoomend', function () {\n      return _this.callbacks.onMoveEnd(_this.map.getCenter(), _this.map.getZoom());\n    });\n    this.map.on('zoomend', function () {\n      _this._recalculatePointVolumeShadowRadius();\n    });\n    this._setMapViewDebounced = debounce(this._setMapViewDebounced, 500);\n    Object.keys(MAP_PANES).forEach(function (paneKey) {\n      _this.map.createPane(paneKey);\n\n      _this.map.getPane(paneKey).style.zIndex = MAP_PANES_Z[paneKey];\n    });\n    this.contextLayers = [];\n    this.pointVolumeShadowLayer = null;\n    document.querySelector('.js-basemap-switcher').addEventListener('click', function () {\n      _this.callbacks.onToggleMapLayerMenu();\n    });\n    document.querySelector('.js-toggle-map').addEventListener('click', function () {\n      _this.callbacks.onToggleMap();\n    });\n    this.attribution = document.querySelector('.js-map-attribution');\n    this.attributionSource = document.querySelector('.leaflet-control-attribution');\n  }\n\n  _createClass(_default, [{\n    key: \"setMapView\",\n    value: function setMapView(mapView) {\n      if (mapView === null) return;\n\n      this._setMapViewDebounced([mapView.latitude, mapView.longitude], mapView.zoom);\n    }\n  }, {\n    key: \"_setMapViewDebounced\",\n    value: function _setMapViewDebounced(latLng, zoom) {\n      this.map.setView(latLng, zoom);\n    }\n  }, {\n    key: \"setBasemap\",\n    value: function setBasemap(_ref) {\n      var basemapId = _ref.basemapId,\n          choropleth = _ref.choropleth,\n          selectedBiomeFilter = _ref.selectedBiomeFilter,\n          linkedGeoIds = _ref.linkedGeoIds,\n          defaultMapView = _ref.defaultMapView,\n          forceDefaultMapView = _ref.forceDefaultMapView;\n      if (basemapId === null) return;\n\n      if (this.basemap) {\n        this.map.removeLayer(this.basemap);\n      }\n\n      if (this.basemapLabels) {\n        this.map.removeLayer(this.basemapLabels);\n      }\n\n      var basemapOptions = BASEMAPS[basemapId];\n      basemapOptions.pane = MAP_PANES.basemap;\n      this.basemap = L.tileLayer(basemapOptions.url, basemapOptions);\n      this.map.addLayer(this.basemap);\n      this.darkBasemap = basemapOptions.dark === true;\n\n      this._drawChoroplethLayer(choropleth, selectedBiomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n\n      if (basemapOptions.labelsUrl !== undefined) {\n        basemapOptions.pane = MAP_PANES.basemapLabels;\n        this.basemapLabels = L.tileLayer(basemapOptions.labelsUrl, basemapOptions);\n        this.map.addLayer(this.basemapLabels);\n      }\n    }\n  }, {\n    key: \"showLoadedMap\",\n    value: function showLoadedMap(_ref2) {\n      var _this2 = this;\n\n      var mapVectorData = _ref2.mapVectorData,\n          currentPolygonType = _ref2.currentPolygonType,\n          selectedNodesGeoIds = _ref2.selectedNodesGeoIds,\n          choropleth = _ref2.choropleth,\n          linkedGeoIds = _ref2.linkedGeoIds,\n          defaultMapView = _ref2.defaultMapView,\n          biomeFilter = _ref2.biomeFilter,\n          forceDefaultMapView = _ref2.forceDefaultMapView;\n      this.polygonTypesLayers = {};\n      if (!mapVectorData) return; // create geometry layers for all polygonTypes that have their own geometry\n\n      mapVectorData.forEach(function (polygonType) {\n        if (polygonType.useGeometryFromColumnId === undefined) {\n          _this2.polygonTypesLayers[polygonType.id] = _this2._createPolygonTypeLayer(polygonType);\n        }\n      }); // for polygonTypes that don't have their geometry, link to actual geometry layers\n\n      mapVectorData.forEach(function (polygonType) {\n        if (polygonType.useGeometryFromColumnId !== undefined) {\n          _this2.polygonTypesLayers[polygonType.id] = _this2.polygonTypesLayers[polygonType.useGeometryFromColumnId];\n        }\n      });\n      this.selectPolygonType({\n        selectedColumnsIds: currentPolygonType,\n        biomeFilter: biomeFilter\n      });\n\n      if (selectedNodesGeoIds) {\n        this.selectPolygons({\n          selectedGeoIds: selectedNodesGeoIds,\n          linkedGeoIds: linkedGeoIds\n        });\n      } // under normal circumstances, choropleth (depends on loadNodes) and linkedGeoIds (depends on loadLinks)\n      // are not available yet, but this is just a fail-safe for race conditions\n\n\n      if (choropleth) {\n        this._drawChoroplethLayer(choropleth, biomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n      }\n    }\n  }, {\n    key: \"selectPolygons\",\n    value: function selectPolygons(_ref3) {\n      var selectedGeoIds = _ref3.selectedGeoIds,\n          linkedGeoIds = _ref3.linkedGeoIds,\n          highlightedGeoId = _ref3.highlightedGeoId,\n          forceDefaultMapView = _ref3.forceDefaultMapView,\n          defaultMapView = _ref3.defaultMapView;\n\n      this._outlinePolygons({\n        selectedGeoIds: selectedGeoIds,\n        highlightedGeoId: highlightedGeoId\n      });\n\n      if (forceDefaultMapView === true) {\n        this.setMapView(defaultMapView);\n      } else if (!linkedGeoIds || linkedGeoIds.length === 0) {\n        this._fitBoundsToSelectedPolygons(selectedGeoIds);\n      }\n    }\n  }, {\n    key: \"_fitBoundsToSelectedPolygons\",\n    value: function _fitBoundsToSelectedPolygons(selectedGeoIds) {\n      if (this.vectorOutline !== undefined && selectedGeoIds.length && this.currentPolygonTypeLayer) {\n        if (!this.currentPolygonTypeLayer.isPoint) {\n          var bounds = this.vectorOutline.getBounds();\n\n          var boundsCenterZoom = this.map._getBoundsCenterZoom(bounds);\n\n          this._setMapViewDebounced(boundsCenterZoom.center, boundsCenterZoom.zoom);\n        } else {\n          var singlePoint = this.vectorOutline.getBounds().getCenter();\n          this.map.setView(singlePoint);\n        }\n      }\n    }\n  }, {\n    key: \"highlightPolygon\",\n    value: function highlightPolygon(_ref4) {\n      var selectedGeoIds = _ref4.selectedGeoIds,\n          highlightedGeoId = _ref4.highlightedGeoId;\n\n      this._outlinePolygons({\n        selectedGeoIds: selectedGeoIds,\n        highlightedGeoId: highlightedGeoId\n      });\n    }\n  }, {\n    key: \"_outlinePolygons\",\n    value: function _outlinePolygons(_ref5) {\n      var _this3 = this;\n\n      var selectedGeoIds = _ref5.selectedGeoIds,\n          highlightedGeoId = _ref5.highlightedGeoId;\n\n      if (!this.currentPolygonTypeLayer || !selectedGeoIds) {\n        return;\n      }\n\n      if (this.vectorOutline) {\n        this.map.removeLayer(this.vectorOutline);\n      }\n\n      var selectedFeatures = selectedGeoIds.map(function (selectedGeoId) {\n        if (!selectedGeoId) return null;\n\n        var originalPolygon = _this3.currentPolygonTypeLayer.getLayers().find(function (polygon) {\n          return polygon.feature.properties.geoid === selectedGeoId;\n        });\n\n        return originalPolygon.feature;\n      });\n\n      if (highlightedGeoId && selectedGeoIds.indexOf(highlightedGeoId) === -1) {\n        var highlightedPolygon = this.currentPolygonTypeLayer.getLayers().find(function (polygon) {\n          return polygon.feature.properties.geoid === highlightedGeoId;\n        });\n\n        if (highlightedPolygon !== undefined) {\n          selectedFeatures.push(highlightedPolygon.feature);\n        } else {\n          console.warn('no polygon found with geoId ', highlightedGeoId);\n        }\n      }\n\n      if (selectedFeatures.length > 0) {\n        this.vectorOutline = L.geoJSON(selectedFeatures, {\n          pane: MAP_PANES.vectorOutline,\n          pointToLayer: function pointToLayer(feature, latlng) {\n            return L.circleMarker(latlng, {\n              pane: MAP_PANES.vectorOutline,\n              radius: POINT_RADIUS\n            });\n          }\n        });\n\n        var getClassName = function getClassName(feature) {\n          var classes = [];\n          if (_this3.currentPolygonTypeLayer.isPoint) classes.push('-point');\n          classes.push(feature.properties.geoid === highlightedGeoId ? '-highlighted' : '-selected');\n          return classes.join(' ');\n        };\n\n        this.vectorOutline.setStyle(function (feature) {\n          return {\n            className: getClassName(feature)\n          };\n        });\n        this.map.addLayer(this.vectorOutline);\n      }\n    }\n  }, {\n    key: \"selectPolygonType\",\n    value: function selectPolygonType(_ref6) {\n      var selectedColumnsIds = _ref6.selectedColumnsIds,\n          choropleth = _ref6.choropleth,\n          biomeFilter = _ref6.biomeFilter,\n          linkedGeoIds = _ref6.linkedGeoIds,\n          defaultMapView = _ref6.defaultMapView,\n          forceDefaultMapView = _ref6.forceDefaultMapView;\n\n      if (!this.polygonTypesLayers || !selectedColumnsIds.length) {\n        return;\n      }\n\n      var id = selectedColumnsIds[0];\n\n      if (this.currentPolygonTypeLayer) {\n        this.map.removeLayer(this.currentPolygonTypeLayer);\n      }\n\n      this.currentPolygonTypeLayer = this.polygonTypesLayers[id];\n\n      if (this.currentPolygonTypeLayer) {\n        this.map.addLayer(this.currentPolygonTypeLayer);\n\n        if (choropleth) {\n          this._drawChoroplethLayer(choropleth, biomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n        }\n      }\n    }\n  }, {\n    key: \"loadContextLayers\",\n    value: function loadContextLayers(selectedMapContextualLayersData) {\n      var _this4 = this;\n\n      this.contextLayers.forEach(function (layer) {\n        _this4.map.removeLayer(layer);\n      });\n      var forceZoom = 0;\n      selectedMapContextualLayersData.forEach(function (layerData, i) {\n        // TODO: implement multi-year support\n        var cartoData = layerData.cartoLayers[0];\n        var contextLayer = cartoData.rasterUrl ? _this4._createRasterLayer(cartoData.rasterUrl) : _this4._createCartoLayer(layerData, i);\n\n        _this4.contextLayers.push(contextLayer);\n\n        _this4.map.addLayer(contextLayer);\n\n        if (isNumber(layerData.forceZoom)) {\n          forceZoom = Math.max(layerData.forceZoom, forceZoom);\n        }\n      });\n\n      if (forceZoom && this.map.getZoom() < forceZoom) {\n        this.map.setZoom(forceZoom);\n      }\n\n      this._updateAttribution();\n    }\n  }, {\n    key: \"_createRasterLayer\",\n    value: function _createRasterLayer(rasterUrl) {\n      var url = \"\".concat(rasterUrl, \"{z}/{x}/{y}.png\"); // TODO add those params in layer configuration\n\n      var southWest = L.latLng(-36, -76);\n      var northEast = L.latLng(18, -28);\n      var bounds = L.latLngBounds(southWest, northEast);\n      var layer = L.tileLayer(url, {\n        pane: MAP_PANES.contextBelow,\n        tms: true,\n        // TODO add those params in layer configuration\n        maxZoom: 11,\n        bounds: bounds\n      });\n      return layer;\n    }\n  }, {\n    key: \"_createCartoLayer\",\n    value: function _createCartoLayer(layerData\n    /* , i */\n    ) {\n      var baseUrl = \"\".concat(CARTO_BASE_URL).concat(layerData.layergroupid, \"/{z}/{x}/{y}\");\n      var layerUrl = \"\".concat(baseUrl, \".png\"); // eslint-disable-next-line new-cap\n\n      var layer = new L.tileLayer(layerUrl, {\n        pane: MAP_PANES.context\n      }); // TODO enable again and make it work\n      // if (i === 0) {\n      //   const utfGridUrl = `${baseUrl}.grid.json?callback={cb}`;\n      //   const utfGrid = new L.UtfGrid(utfGridUrl);\n      //\n      //   this.contextLayers.push(utfGrid);\n      //   this.map.addLayer(utfGrid, {\n      //     resolution: 2\n      //   });\n      // }\n\n      return layer;\n    }\n  }, {\n    key: \"_createPolygonTypeLayer\",\n    value: function _createPolygonTypeLayer(_ref7) {\n      var geoJSON = _ref7.geoJSON,\n          isPoint = _ref7.isPoint;\n      var style = {\n        smoothFactor: 0.9,\n        stroke: true,\n        color: this.darkBasemap ? CHOROPLETH_COLORS.bright_stroke : CHOROPLETH_COLORS.dark_stroke,\n        weight: 0.3,\n        opacity: 0.5,\n        fillColor: CHOROPLETH_COLORS.default_fill,\n        fillOpacity: 1\n      }; // don't add point layers to canvas\n      // we have problem with port shadow layer being obscured  by canvas layer\n      // which does not pass any pointer events through - and we need to show tooltip\n\n      var pane = this.canvasRender && !isPoint ? MAP_PANES.overlayPane : MAP_PANES.vectorMain;\n      var topoLayer = new L.GeoJSON(geoJSON, {\n        pane: pane,\n        style: style,\n        pointToLayer: function pointToLayer(feature, latlng) {\n          return L.circleMarker(latlng, {\n            pane: pane,\n            radius: POINT_RADIUS\n          });\n        }\n      });\n      topoLayer.isPoint = isPoint;\n\n      this._setEventsForTopoLayer(topoLayer);\n\n      return topoLayer;\n    }\n  }, {\n    key: \"_createPointVolumeShadowLayer\",\n    value: function _createPointVolumeShadowLayer(geoJSON, visibleNodes) {\n      var _this5 = this;\n\n      var style = {\n        smoothFactor: 0.9,\n        stroke: false,\n        fillColor: COLORS.charcoalGrey,\n        fillOpacity: 0.3\n      };\n      var topoLayer = new L.GeoJSON(geoJSON, {\n        pane: MAP_PANES.vectorBelow,\n        style: style,\n        pointToLayer: function pointToLayer(feature, latlng) {\n          var node = visibleNodes.find(function (n) {\n            return n.geoId === feature.properties.geoid;\n          }); // node is not visible bail\n\n          if (!node) return null;\n          feature.properties.nodeHeight = node.height;\n          return L.circleMarker(latlng, {\n            pane: MAP_PANES.vectorBelow,\n            radius: _this5._calculatePointVolumeShadowRadius(node.height)\n          });\n        }\n      });\n\n      this._setEventsForTopoLayer(topoLayer);\n\n      return topoLayer;\n    }\n  }, {\n    key: \"_calculatePointVolumeShadowRadius\",\n    value: function _calculatePointVolumeShadowRadius(value) {\n      var zoomRatio = 10 * Math.exp(this.map.getZoom() / 2.5);\n      return POINT_RADIUS + Math.sqrt(value) * zoomRatio;\n    }\n  }, {\n    key: \"_recalculatePointVolumeShadowRadius\",\n    value: function _recalculatePointVolumeShadowRadius() {\n      var _this6 = this;\n\n      if (!this.pointVolumeShadowLayer) return;\n      this.pointVolumeShadowLayer.eachLayer(function (marker) {\n        var nodeHeight = marker.feature.properties.nodeHeight;\n        marker.setRadius(_this6._calculatePointVolumeShadowRadius(nodeHeight));\n      });\n    }\n  }, {\n    key: \"_setEventsForTopoLayer\",\n    value: function _setEventsForTopoLayer(topoLayer) {\n      var _this7 = this;\n\n      topoLayer.eachLayer(function (layer) {\n        var that = _this7;\n        layer.on({\n          mouseover: function mouseover(event) {\n            that.callbacks.onPolygonHighlighted(this.feature.properties.geoid, {\n              pageX: event.originalEvent.pageX,\n              pageY: event.originalEvent.pageY\n            });\n          },\n          mouseout: function mouseout() {\n            that.callbacks.onPolygonHighlighted();\n          },\n          click: function click(event) {\n            if (event.target.disabled || event.target.classList && event.target.classList.contains('-disabled')) {\n              return;\n            }\n\n            that.callbacks.onPolygonClicked(this.feature.properties.geoid);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setChoropleth\",\n    value: function setChoropleth(_ref8) {\n      var choropleth = _ref8.choropleth,\n          selectedBiomeFilter = _ref8.selectedBiomeFilter,\n          linkedGeoIds = _ref8.linkedGeoIds,\n          defaultMapView = _ref8.defaultMapView,\n          forceDefaultMapView = _ref8.forceDefaultMapView;\n\n      if (!this.currentPolygonTypeLayer) {\n        return;\n      }\n\n      this._drawChoroplethLayer(choropleth, selectedBiomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n    }\n  }, {\n    key: \"_drawChoroplethLayer\",\n    value: function _drawChoroplethLayer(choropleth, biome, linkedGeoIds, defaultMapView, forceDefaultMapView) {\n      var _this8 = this;\n\n      if (!this.currentPolygonTypeLayer) return;\n      var linkedPolygons = [];\n      var hasLinkedGeoIds = linkedGeoIds.length > 0;\n      var hasChoroplethLayersEnabled = Object.values(choropleth).length > 0;\n      var isPoint = this.currentPolygonTypeLayer.isPoint;\n      this.currentPolygonTypeLayer.eachLayer(function (layer) {\n        var isFilteredOut = biome === null || biome.geoId === undefined || layer.feature.properties.biome_geoid === undefined ? false : biome.geoId !== layer.feature.properties.biome_geoid;\n        var isLinked = linkedGeoIds.indexOf(layer.feature.properties.geoid) > -1;\n        var choroItem = choropleth[layer.feature.properties.geoid];\n        var fillColor = CHOROPLETH_COLORS.default_fill;\n        var weight = isPoint ? 1.5 : 0.3;\n        var fillOpacity = 1;\n        var strokeOpacity = isPoint ? 1 : 0.5;\n        var color = _this8.darkBasemap ? CHOROPLETH_COLORS.bright_stroke : CHOROPLETH_COLORS.dark_stroke;\n\n        if (isFilteredOut) {\n          // If region is filtered out by biome filter, hide it and bail\n          fillOpacity = 0;\n          strokeOpacity = 0;\n        } else if (hasChoroplethLayersEnabled) {\n          // Handle cases where we have map choropleth layers enabled\n          switch (true) {\n            case hasLinkedGeoIds && isLinked:\n              // There are nodes selected in the sankey, our node is linked to them\n              // Fill with the choropleth color and show thicker borders\n              fillColor = choroItem;\n              weight = 1.2;\n              break;\n\n            case hasLinkedGeoIds && !isLinked:\n              // There are nodes selected in the sankey, our node is not linked and map has choropleth layers\n              // Show preset color for not linked nodes\n              fillColor = CHOROPLETH_COLORS.fill_not_linked;\n              break;\n\n            case !!choroItem:\n              // Map has choropleth layers enabled, and sankey has no nodes selected\n              // Show the choropleth color\n              fillColor = choroItem;\n              break;\n\n            default:\n              // Default state\n              // Show the default fill\n              fillColor = CHOROPLETH_COLORS.default_fill;\n              break;\n          }\n        } else {\n          // Handle cases where we don't have map choropleth layers enabled\n          switch (true) {\n            case hasLinkedGeoIds && isLinked:\n              // There are nodes selected in the sankey, our node is linked to them and map has no choropleth layers\n              // Fill with preset color and show slightly thicker borders\n              fillColor = CHOROPLETH_COLORS.fill_linked;\n              fillOpacity = 1;\n              weight = isPoint ? 1.5 : 0.5;\n              break;\n\n            case hasLinkedGeoIds && !isLinked:\n              // There are nodes selected in the sankey, our node is not linked and map has choropleth layers\n              // Show preset color for not linked nodes\n              fillColor = CHOROPLETH_COLORS.fill_not_linked;\n              fillOpacity = _this8.darkBasemap ? 0 : 1;\n              strokeOpacity = isPoint ? 0.4 : strokeOpacity;\n              weight = isPoint ? 1.5 : 0.5;\n              break;\n\n            case !isPoint:\n              // Default state for not point\n              // Show transparent\n              fillOpacity = 0;\n              break;\n          }\n        }\n\n        if (_this8.canvasRender) {\n          layer.setStyle({\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            stroke: !isFilteredOut,\n            opacity: strokeOpacity,\n            interactive: !isFilteredOut,\n            color: color,\n            weight: weight\n          });\n        } else {\n          layer.setStyle({\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            stroke: !isFilteredOut,\n            opacity: strokeOpacity,\n            interactive: !isFilteredOut,\n            color: color,\n            weight: weight\n          });\n          layer.disabled = !layer.feature.properties.hasFlows;\n        }\n\n        if (isLinked) {\n          linkedPolygons.push(layer.feature);\n        }\n      });\n\n      if (forceDefaultMapView === true) {\n        this.setMapView(defaultMapView);\n      } else if (linkedPolygons.length) {\n        var bbox = turf_bbox({\n          type: 'FeatureCollection',\n          features: linkedPolygons\n        }); // we use L's _getBoundsCenterZoom internal method + setView as fitBounds does not support a minZoom option\n\n        var bounds = L.latLngBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);\n\n        var boundsCenterZoom = this.map._getBoundsCenterZoom(bounds);\n\n        if (defaultMapView) {\n          boundsCenterZoom.zoom = Math.max(boundsCenterZoom.zoom, defaultMapView.zoom);\n        }\n\n        this._setMapViewDebounced(boundsCenterZoom.center, boundsCenterZoom.zoom);\n      }\n    }\n  }, {\n    key: \"showLinkedGeoIds\",\n    value: function showLinkedGeoIds(_ref9) {\n      var choropleth = _ref9.choropleth,\n          selectedBiomeFilter = _ref9.selectedBiomeFilter,\n          linkedGeoIds = _ref9.linkedGeoIds,\n          selectedGeoIds = _ref9.selectedGeoIds,\n          defaultMapView = _ref9.defaultMapView,\n          forceDefaultMapView = _ref9.forceDefaultMapView;\n\n      this._drawChoroplethLayer(choropleth, selectedBiomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n\n      if (!forceDefaultMapView && linkedGeoIds.length === 0) {\n        this._fitBoundsToSelectedPolygons(selectedGeoIds);\n      }\n    }\n  }, {\n    key: \"_updateAttribution\",\n    value: function _updateAttribution() {\n      this.attribution.innerHTML = this.attributionSource.innerHTML;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      var _this9 = this; // recalculates map size once CSS transition ends\n\n\n      this.map.invalidateSize(true);\n      var mapContainer = this.map.getContainer();\n      var oldWidth = mapContainer.clientWidth;\n      var invalidateSizeDebounced = debounce(function () {\n        _this9.map.invalidateSize(true);\n      }, 200);\n      var interval = window.setInterval(function () {\n        if (mapContainer) {\n          var width = mapContainer.clientWidth;\n\n          if (width !== oldWidth) {\n            oldWidth = width;\n            invalidateSizeDebounced();\n          }\n        }\n      }, 50);\n      window.setTimeout(function () {\n        window.clearInterval(interval);\n      }, 3000);\n    }\n  }, {\n    key: \"filterByBiome\",\n    value: function filterByBiome(_ref10) {\n      var choropleth = _ref10.choropleth,\n          selectedBiomeFilter = _ref10.selectedBiomeFilter,\n          linkedGeoIds = _ref10.linkedGeoIds,\n          defaultMapView = _ref10.defaultMapView,\n          forceDefaultMapView = _ref10.forceDefaultMapView;\n\n      this._drawChoroplethLayer(choropleth, selectedBiomeFilter, linkedGeoIds, defaultMapView, forceDefaultMapView);\n    }\n  }, {\n    key: \"updatePointShadowLayer\",\n    value: function updatePointShadowLayer(_ref11) {\n      var mapVectorData = _ref11.mapVectorData,\n          visibleNodes = _ref11.visibleNodes;\n      if (!mapVectorData) return;\n\n      if (this.pointVolumeShadowLayer) {\n        this.map.removeLayer(this.pointVolumeShadowLayer);\n      }\n\n      var polygonTypeLayer = mapVectorData.find(function (layer) {\n        return layer.isPoint;\n      });\n      if (!polygonTypeLayer) return;\n      this.pointVolumeShadowLayer = this._createPointVolumeShadowLayer(polygonTypeLayer.geoJSON, visibleNodes);\n      this.map.addLayer(this.pointVolumeShadowLayer);\n    }\n  }]);\n\n  return _default;\n}();\n\nexport { _default as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_classCallCheck, \"_classCallCheck\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js\");\n  reactHotLoader.register(_defineProperties, \"_defineProperties\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js\");\n  reactHotLoader.register(_createClass, \"_createClass\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js\");\n  reactHotLoader.register(POINT_RADIUS, \"POINT_RADIUS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js\");\n  reactHotLoader.register(_default, \"_default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/components/tool/map.component.js"],"names":["POINT_RADIUS","document","mapOptions","zoomControl","minZoom","preferCanvas","canvasRender","L","position","imperial","worldBounds","animate","debounce","Object","MAP_PANES_Z","mapView","latLng","zoom","basemapId","choropleth","selectedBiomeFilter","linkedGeoIds","defaultMapView","forceDefaultMapView","basemapOptions","BASEMAPS","MAP_PANES","mapVectorData","currentPolygonType","selectedNodesGeoIds","biomeFilter","polygonType","selectedColumnsIds","selectedGeoIds","highlightedGeoId","bounds","boundsCenterZoom","singlePoint","selectedFeatures","originalPolygon","polygon","highlightedPolygon","console","pane","pointToLayer","radius","getClassName","classes","feature","className","id","selectedMapContextualLayersData","forceZoom","cartoData","layerData","contextLayer","isNumber","Math","rasterUrl","url","southWest","northEast","layer","tms","maxZoom","baseUrl","layerUrl","context","geoJSON","isPoint","style","smoothFactor","stroke","color","CHOROPLETH_COLORS","weight","opacity","fillColor","fillOpacity","topoLayer","visibleNodes","COLORS","node","n","value","zoomRatio","nodeHeight","marker","that","mouseover","pageX","event","pageY","mouseout","click","biome","linkedPolygons","hasLinkedGeoIds","hasChoroplethLayersEnabled","isFilteredOut","isLinked","choroItem","strokeOpacity","interactive","bbox","turf_bbox","type","features","mapContainer","oldWidth","invalidateSizeDebounced","interval","width","window","polygonTypeLayer"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport isNumber from 'lodash/isNumber';\nimport debounce from 'lodash/debounce';\n// eslint-disable-next-line camelcase\nimport turf_bbox from '@turf/bbox';\nimport {\n  BASEMAPS,\n  CARTO_BASE_URL,\n  COLORS,\n  MAP_PANES,\n  MAP_PANES_Z,\n  CHOROPLETH_COLORS\n} from 'constants';\nimport 'styles/components/tool/map/leaflet.css';\nimport 'styles/components/tool/map.scss';\nimport 'styles/components/tool/map/map-legend.scss';\nimport 'styles/components/tool/map/map-choropleth.scss';\n\nconst POINT_RADIUS = 4;\n\nexport default class {\n  constructor() {\n    this.canvasRender = !!document.createElement('canvas').getContext && USE_CANVAS_MAP;\n\n    this.darkBasemap = false;\n\n    const mapOptions = {\n      zoomControl: false,\n      minZoom: 2,\n      preferCanvas: this.canvasRender\n    };\n\n    this.map = L.map('js-map', mapOptions);\n    new L.Control.Zoom({ position: 'topleft' }).addTo(this.map);\n    L.control.scale({ position: 'bottomleft', imperial: false }).addTo(this.map);\n\n    const worldBounds = L.latLngBounds(L.latLng(-89, -180), L.latLng(89, 180));\n    this.map.setMaxBounds(worldBounds);\n    this.map.on('drag', () => {\n      this.map.panInsideBounds(worldBounds, { animate: false });\n    });\n\n    this.map.on('layeradd', () => this._updateAttribution());\n    this.map.on('dragend zoomend', () =>\n      this.callbacks.onMoveEnd(this.map.getCenter(), this.map.getZoom())\n    );\n    this.map.on('zoomend', () => {\n      this._recalculatePointVolumeShadowRadius();\n    });\n\n    this._setMapViewDebounced = debounce(this._setMapViewDebounced, 500);\n\n    Object.keys(MAP_PANES).forEach(paneKey => {\n      this.map.createPane(paneKey);\n      this.map.getPane(paneKey).style.zIndex = MAP_PANES_Z[paneKey];\n    });\n    this.contextLayers = [];\n    this.pointVolumeShadowLayer = null;\n\n    document.querySelector('.js-basemap-switcher').addEventListener('click', () => {\n      this.callbacks.onToggleMapLayerMenu();\n    });\n    document.querySelector('.js-toggle-map').addEventListener('click', () => {\n      this.callbacks.onToggleMap();\n    });\n\n    this.attribution = document.querySelector('.js-map-attribution');\n    this.attributionSource = document.querySelector('.leaflet-control-attribution');\n  }\n\n  setMapView(mapView) {\n    if (mapView === null) return;\n\n    this._setMapViewDebounced([mapView.latitude, mapView.longitude], mapView.zoom);\n  }\n\n  _setMapViewDebounced(latLng, zoom) {\n    this.map.setView(latLng, zoom);\n  }\n\n  setBasemap({\n    basemapId,\n    choropleth,\n    selectedBiomeFilter,\n    linkedGeoIds,\n    defaultMapView,\n    forceDefaultMapView\n  }) {\n    if (basemapId === null) return;\n\n    if (this.basemap) {\n      this.map.removeLayer(this.basemap);\n    }\n    if (this.basemapLabels) {\n      this.map.removeLayer(this.basemapLabels);\n    }\n\n    const basemapOptions = BASEMAPS[basemapId];\n    basemapOptions.pane = MAP_PANES.basemap;\n    this.basemap = L.tileLayer(basemapOptions.url, basemapOptions);\n    this.map.addLayer(this.basemap);\n\n    this.darkBasemap = basemapOptions.dark === true;\n    this._drawChoroplethLayer(\n      choropleth,\n      selectedBiomeFilter,\n      linkedGeoIds,\n      defaultMapView,\n      forceDefaultMapView\n    );\n\n    if (basemapOptions.labelsUrl !== undefined) {\n      basemapOptions.pane = MAP_PANES.basemapLabels;\n      this.basemapLabels = L.tileLayer(basemapOptions.labelsUrl, basemapOptions);\n      this.map.addLayer(this.basemapLabels);\n    }\n  }\n\n  showLoadedMap({\n    mapVectorData,\n    currentPolygonType,\n    selectedNodesGeoIds,\n    choropleth,\n    linkedGeoIds,\n    defaultMapView,\n    biomeFilter,\n    forceDefaultMapView\n  }) {\n    this.polygonTypesLayers = {};\n    if (!mapVectorData) return;\n\n    // create geometry layers for all polygonTypes that have their own geometry\n    mapVectorData.forEach(polygonType => {\n      if (polygonType.useGeometryFromColumnId === undefined) {\n        this.polygonTypesLayers[polygonType.id] = this._createPolygonTypeLayer(polygonType);\n      }\n    });\n\n    // for polygonTypes that don't have their geometry, link to actual geometry layers\n    mapVectorData.forEach(polygonType => {\n      if (polygonType.useGeometryFromColumnId !== undefined) {\n        this.polygonTypesLayers[polygonType.id] = this.polygonTypesLayers[\n          polygonType.useGeometryFromColumnId\n        ];\n      }\n    });\n\n    this.selectPolygonType({ selectedColumnsIds: currentPolygonType, biomeFilter });\n    if (selectedNodesGeoIds) {\n      this.selectPolygons({ selectedGeoIds: selectedNodesGeoIds, linkedGeoIds });\n    }\n\n    // under normal circumstances, choropleth (depends on loadNodes) and linkedGeoIds (depends on loadLinks)\n    // are not available yet, but this is just a fail-safe for race conditions\n    if (choropleth) {\n      this._drawChoroplethLayer(\n        choropleth,\n        biomeFilter,\n        linkedGeoIds,\n        defaultMapView,\n        forceDefaultMapView\n      );\n    }\n  }\n\n  selectPolygons({\n    selectedGeoIds,\n    linkedGeoIds,\n    highlightedGeoId,\n    forceDefaultMapView,\n    defaultMapView\n  }) {\n    this._outlinePolygons({ selectedGeoIds, highlightedGeoId });\n\n    if (forceDefaultMapView === true) {\n      this.setMapView(defaultMapView);\n    } else if (!linkedGeoIds || linkedGeoIds.length === 0) {\n      this._fitBoundsToSelectedPolygons(selectedGeoIds);\n    }\n  }\n\n  _fitBoundsToSelectedPolygons(selectedGeoIds) {\n    if (this.vectorOutline !== undefined && selectedGeoIds.length && this.currentPolygonTypeLayer) {\n      if (!this.currentPolygonTypeLayer.isPoint) {\n        const bounds = this.vectorOutline.getBounds();\n        const boundsCenterZoom = this.map._getBoundsCenterZoom(bounds);\n        this._setMapViewDebounced(boundsCenterZoom.center, boundsCenterZoom.zoom);\n      } else {\n        const singlePoint = this.vectorOutline.getBounds().getCenter();\n        this.map.setView(singlePoint);\n      }\n    }\n  }\n\n  highlightPolygon({ selectedGeoIds, highlightedGeoId }) {\n    this._outlinePolygons({ selectedGeoIds, highlightedGeoId });\n  }\n\n  _outlinePolygons({ selectedGeoIds, highlightedGeoId }) {\n    if (!this.currentPolygonTypeLayer || !selectedGeoIds) {\n      return;\n    }\n\n    if (this.vectorOutline) {\n      this.map.removeLayer(this.vectorOutline);\n    }\n\n    const selectedFeatures = selectedGeoIds.map(selectedGeoId => {\n      if (!selectedGeoId) return null;\n      const originalPolygon = this.currentPolygonTypeLayer\n        .getLayers()\n        .find(polygon => polygon.feature.properties.geoid === selectedGeoId);\n      return originalPolygon.feature;\n    });\n\n    if (highlightedGeoId && selectedGeoIds.indexOf(highlightedGeoId) === -1) {\n      const highlightedPolygon = this.currentPolygonTypeLayer\n        .getLayers()\n        .find(polygon => polygon.feature.properties.geoid === highlightedGeoId);\n      if (highlightedPolygon !== undefined) {\n        selectedFeatures.push(highlightedPolygon.feature);\n      } else {\n        console.warn('no polygon found with geoId ', highlightedGeoId);\n      }\n    }\n\n    if (selectedFeatures.length > 0) {\n      this.vectorOutline = L.geoJSON(selectedFeatures, {\n        pane: MAP_PANES.vectorOutline,\n        pointToLayer(feature, latlng) {\n          return L.circleMarker(latlng, {\n            pane: MAP_PANES.vectorOutline,\n            radius: POINT_RADIUS\n          });\n        }\n      });\n      const getClassName = feature => {\n        const classes = [];\n        if (this.currentPolygonTypeLayer.isPoint) classes.push('-point');\n        classes.push(feature.properties.geoid === highlightedGeoId ? '-highlighted' : '-selected');\n        return classes.join(' ');\n      };\n      this.vectorOutline.setStyle(feature => ({\n        className: getClassName(feature)\n      }));\n\n      this.map.addLayer(this.vectorOutline);\n    }\n  }\n\n  selectPolygonType({\n    selectedColumnsIds,\n    choropleth,\n    biomeFilter,\n    linkedGeoIds,\n    defaultMapView,\n    forceDefaultMapView\n  }) {\n    if (!this.polygonTypesLayers || !selectedColumnsIds.length) {\n      return;\n    }\n    const id = selectedColumnsIds[0];\n    if (this.currentPolygonTypeLayer) {\n      this.map.removeLayer(this.currentPolygonTypeLayer);\n    }\n\n    this.currentPolygonTypeLayer = this.polygonTypesLayers[id];\n    if (this.currentPolygonTypeLayer) {\n      this.map.addLayer(this.currentPolygonTypeLayer);\n      if (choropleth) {\n        this._drawChoroplethLayer(\n          choropleth,\n          biomeFilter,\n          linkedGeoIds,\n          defaultMapView,\n          forceDefaultMapView\n        );\n      }\n    }\n  }\n\n  loadContextLayers(selectedMapContextualLayersData) {\n    this.contextLayers.forEach(layer => {\n      this.map.removeLayer(layer);\n    });\n\n    let forceZoom = 0;\n\n    selectedMapContextualLayersData.forEach((layerData, i) => {\n      // TODO: implement multi-year support\n      const cartoData = layerData.cartoLayers[0];\n      const contextLayer = cartoData.rasterUrl\n        ? this._createRasterLayer(cartoData.rasterUrl)\n        : this._createCartoLayer(layerData, i);\n      this.contextLayers.push(contextLayer);\n      this.map.addLayer(contextLayer);\n\n      if (isNumber(layerData.forceZoom)) {\n        forceZoom = Math.max(layerData.forceZoom, forceZoom);\n      }\n    });\n\n    if (forceZoom && this.map.getZoom() < forceZoom) {\n      this.map.setZoom(forceZoom);\n    }\n\n    this._updateAttribution();\n  }\n\n  _createRasterLayer(rasterUrl) {\n    const url = `${rasterUrl}{z}/{x}/{y}.png`;\n\n    // TODO add those params in layer configuration\n    const southWest = L.latLng(-36, -76);\n    const northEast = L.latLng(18, -28);\n    const bounds = L.latLngBounds(southWest, northEast);\n\n    const layer = L.tileLayer(url, {\n      pane: MAP_PANES.contextBelow,\n      tms: true,\n      // TODO add those params in layer configuration\n      maxZoom: 11,\n      bounds\n    });\n    return layer;\n  }\n\n  _createCartoLayer(layerData /* , i */) {\n    const baseUrl = `${CARTO_BASE_URL}${layerData.layergroupid}/{z}/{x}/{y}`;\n    const layerUrl = `${baseUrl}.png`;\n    // eslint-disable-next-line new-cap\n    const layer = new L.tileLayer(layerUrl, {\n      pane: MAP_PANES.context\n    });\n    // TODO enable again and make it work\n    // if (i === 0) {\n    //   const utfGridUrl = `${baseUrl}.grid.json?callback={cb}`;\n    //   const utfGrid = new L.UtfGrid(utfGridUrl);\n    //\n    //   this.contextLayers.push(utfGrid);\n    //   this.map.addLayer(utfGrid, {\n    //     resolution: 2\n    //   });\n    // }\n    return layer;\n  }\n\n  _createPolygonTypeLayer({ geoJSON, isPoint }) {\n    const style = {\n      smoothFactor: 0.9,\n      stroke: true,\n      color: this.darkBasemap ? CHOROPLETH_COLORS.bright_stroke : CHOROPLETH_COLORS.dark_stroke,\n      weight: 0.3,\n      opacity: 0.5,\n      fillColor: CHOROPLETH_COLORS.default_fill,\n      fillOpacity: 1\n    };\n\n    // don't add point layers to canvas\n    // we have problem with port shadow layer being obscured  by canvas layer\n    // which does not pass any pointer events through - and we need to show tooltip\n    const pane = this.canvasRender && !isPoint ? MAP_PANES.overlayPane : MAP_PANES.vectorMain;\n\n    const topoLayer = new L.GeoJSON(geoJSON, {\n      pane,\n      style,\n      pointToLayer: (feature, latlng) =>\n        L.circleMarker(latlng, {\n          pane,\n          radius: POINT_RADIUS\n        })\n    });\n\n    topoLayer.isPoint = isPoint;\n    this._setEventsForTopoLayer(topoLayer);\n\n    return topoLayer;\n  }\n\n  _createPointVolumeShadowLayer(geoJSON, visibleNodes) {\n    const style = {\n      smoothFactor: 0.9,\n      stroke: false,\n      fillColor: COLORS.charcoalGrey,\n      fillOpacity: 0.3\n    };\n\n    const topoLayer = new L.GeoJSON(geoJSON, {\n      pane: MAP_PANES.vectorBelow,\n      style,\n      pointToLayer: (feature, latlng) => {\n        const node = visibleNodes.find(n => n.geoId === feature.properties.geoid);\n        // node is not visible bail\n        if (!node) return null;\n\n        feature.properties.nodeHeight = node.height;\n\n        return L.circleMarker(latlng, {\n          pane: MAP_PANES.vectorBelow,\n          radius: this._calculatePointVolumeShadowRadius(node.height)\n        });\n      }\n    });\n\n    this._setEventsForTopoLayer(topoLayer);\n\n    return topoLayer;\n  }\n\n  _calculatePointVolumeShadowRadius(value) {\n    const zoomRatio = 10 * Math.exp(this.map.getZoom() / 2.5);\n    return POINT_RADIUS + Math.sqrt(value) * zoomRatio;\n  }\n\n  _recalculatePointVolumeShadowRadius() {\n    if (!this.pointVolumeShadowLayer) return;\n\n    this.pointVolumeShadowLayer.eachLayer(marker => {\n      const nodeHeight = marker.feature.properties.nodeHeight;\n      marker.setRadius(this._calculatePointVolumeShadowRadius(nodeHeight));\n    });\n  }\n\n  _setEventsForTopoLayer(topoLayer) {\n    topoLayer.eachLayer(layer => {\n      const that = this;\n      layer.on({\n        mouseover(event) {\n          that.callbacks.onPolygonHighlighted(this.feature.properties.geoid, {\n            pageX: event.originalEvent.pageX,\n            pageY: event.originalEvent.pageY\n          });\n        },\n        mouseout() {\n          that.callbacks.onPolygonHighlighted();\n        },\n        click(event) {\n          if (\n            event.target.disabled ||\n            (event.target.classList && event.target.classList.contains('-disabled'))\n          ) {\n            return;\n          }\n          that.callbacks.onPolygonClicked(this.feature.properties.geoid);\n        }\n      });\n    });\n  }\n\n  setChoropleth({\n    choropleth,\n    selectedBiomeFilter,\n    linkedGeoIds,\n    defaultMapView,\n    forceDefaultMapView\n  }) {\n    if (!this.currentPolygonTypeLayer) {\n      return;\n    }\n    this._drawChoroplethLayer(\n      choropleth,\n      selectedBiomeFilter,\n      linkedGeoIds,\n      defaultMapView,\n      forceDefaultMapView\n    );\n  }\n\n  _drawChoroplethLayer(choropleth, biome, linkedGeoIds, defaultMapView, forceDefaultMapView) {\n    if (!this.currentPolygonTypeLayer) return;\n\n    const linkedPolygons = [];\n    const hasLinkedGeoIds = linkedGeoIds.length > 0;\n    const hasChoroplethLayersEnabled = Object.values(choropleth).length > 0;\n    const isPoint = this.currentPolygonTypeLayer.isPoint;\n\n    this.currentPolygonTypeLayer.eachLayer(layer => {\n      const isFilteredOut =\n        biome === null ||\n        biome.geoId === undefined ||\n        layer.feature.properties.biome_geoid === undefined\n          ? false\n          : biome.geoId !== layer.feature.properties.biome_geoid;\n\n      const isLinked = linkedGeoIds.indexOf(layer.feature.properties.geoid) > -1;\n      const choroItem = choropleth[layer.feature.properties.geoid];\n\n      let fillColor = CHOROPLETH_COLORS.default_fill;\n      let weight = isPoint ? 1.5 : 0.3;\n      let fillOpacity = 1;\n      let strokeOpacity = isPoint ? 1 : 0.5;\n      const color = this.darkBasemap\n        ? CHOROPLETH_COLORS.bright_stroke\n        : CHOROPLETH_COLORS.dark_stroke;\n\n      if (isFilteredOut) {\n        // If region is filtered out by biome filter, hide it and bail\n        fillOpacity = 0;\n        strokeOpacity = 0;\n      } else if (hasChoroplethLayersEnabled) {\n        // Handle cases where we have map choropleth layers enabled\n        switch (true) {\n          case hasLinkedGeoIds && isLinked:\n            // There are nodes selected in the sankey, our node is linked to them\n            // Fill with the choropleth color and show thicker borders\n            fillColor = choroItem;\n            weight = 1.2;\n            break;\n          case hasLinkedGeoIds && !isLinked:\n            // There are nodes selected in the sankey, our node is not linked and map has choropleth layers\n            // Show preset color for not linked nodes\n            fillColor = CHOROPLETH_COLORS.fill_not_linked;\n            break;\n          case !!choroItem:\n            // Map has choropleth layers enabled, and sankey has no nodes selected\n            // Show the choropleth color\n            fillColor = choroItem;\n            break;\n          default:\n            // Default state\n            // Show the default fill\n            fillColor = CHOROPLETH_COLORS.default_fill;\n            break;\n        }\n      } else {\n        // Handle cases where we don't have map choropleth layers enabled\n        switch (true) {\n          case hasLinkedGeoIds && isLinked:\n            // There are nodes selected in the sankey, our node is linked to them and map has no choropleth layers\n            // Fill with preset color and show slightly thicker borders\n            fillColor = CHOROPLETH_COLORS.fill_linked;\n            fillOpacity = 1;\n            weight = isPoint ? 1.5 : 0.5;\n            break;\n          case hasLinkedGeoIds && !isLinked:\n            // There are nodes selected in the sankey, our node is not linked and map has choropleth layers\n            // Show preset color for not linked nodes\n            fillColor = CHOROPLETH_COLORS.fill_not_linked;\n            fillOpacity = this.darkBasemap ? 0 : 1;\n            strokeOpacity = isPoint ? 0.4 : strokeOpacity;\n            weight = isPoint ? 1.5 : 0.5;\n            break;\n          case !isPoint:\n            // Default state for not point\n            // Show transparent\n            fillOpacity = 0;\n            break;\n        }\n      }\n\n      if (this.canvasRender) {\n        layer.setStyle({\n          fillColor,\n          fillOpacity,\n          stroke: !isFilteredOut,\n          opacity: strokeOpacity,\n          interactive: !isFilteredOut,\n          color,\n          weight\n        });\n      } else {\n        layer.setStyle({\n          fillColor,\n          fillOpacity,\n          stroke: !isFilteredOut,\n          opacity: strokeOpacity,\n          interactive: !isFilteredOut,\n          color,\n          weight\n        });\n        layer.disabled = !layer.feature.properties.hasFlows;\n      }\n\n      if (isLinked) {\n        linkedPolygons.push(layer.feature);\n      }\n    });\n\n    if (forceDefaultMapView === true) {\n      this.setMapView(defaultMapView);\n    } else if (linkedPolygons.length) {\n      const bbox = turf_bbox({ type: 'FeatureCollection', features: linkedPolygons });\n      // we use L's _getBoundsCenterZoom internal method + setView as fitBounds does not support a minZoom option\n      const bounds = L.latLngBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);\n      const boundsCenterZoom = this.map._getBoundsCenterZoom(bounds);\n      if (defaultMapView) {\n        boundsCenterZoom.zoom = Math.max(boundsCenterZoom.zoom, defaultMapView.zoom);\n      }\n      this._setMapViewDebounced(boundsCenterZoom.center, boundsCenterZoom.zoom);\n    }\n  }\n\n  showLinkedGeoIds({\n    choropleth,\n    selectedBiomeFilter,\n    linkedGeoIds,\n    selectedGeoIds,\n    defaultMapView,\n    forceDefaultMapView\n  }) {\n    this._drawChoroplethLayer(\n      choropleth,\n      selectedBiomeFilter,\n      linkedGeoIds,\n      defaultMapView,\n      forceDefaultMapView\n    );\n\n    if (!forceDefaultMapView && linkedGeoIds.length === 0) {\n      this._fitBoundsToSelectedPolygons(selectedGeoIds);\n    }\n  }\n\n  _updateAttribution() {\n    this.attribution.innerHTML = this.attributionSource.innerHTML;\n  }\n\n  invalidate() {\n    // recalculates map size once CSS transition ends\n    this.map.invalidateSize(true);\n    const mapContainer = this.map.getContainer();\n    let oldWidth = mapContainer.clientWidth;\n\n    const invalidateSizeDebounced = debounce(() => {\n      this.map.invalidateSize(true);\n    }, 200);\n\n    const interval = window.setInterval(() => {\n      if (mapContainer) {\n        const width = mapContainer.clientWidth;\n        if (width !== oldWidth) {\n          oldWidth = width;\n          invalidateSizeDebounced();\n        }\n      }\n    }, 50);\n\n    window.setTimeout(() => {\n      window.clearInterval(interval);\n    }, 3000);\n  }\n\n  filterByBiome({\n    choropleth,\n    selectedBiomeFilter,\n    linkedGeoIds,\n    defaultMapView,\n    forceDefaultMapView\n  }) {\n    this._drawChoroplethLayer(\n      choropleth,\n      selectedBiomeFilter,\n      linkedGeoIds,\n      defaultMapView,\n      forceDefaultMapView\n    );\n  }\n\n  updatePointShadowLayer({ mapVectorData, visibleNodes }) {\n    if (!mapVectorData) return;\n\n    if (this.pointVolumeShadowLayer) {\n      this.map.removeLayer(this.pointVolumeShadowLayer);\n    }\n\n    const polygonTypeLayer = mapVectorData.find(layer => layer.isPoint);\n\n    if (!polygonTypeLayer) return;\n\n    this.pointVolumeShadowLayer = this._createPointVolumeShadowLayer(\n      polygonTypeLayer.geoJSON,\n      visibleNodes\n    );\n    this.map.addLayer(this.pointVolumeShadowLayer);\n  }\n}\n"]}]}