{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js","mtime":1543486759506},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createSelector } from 'reselect';\nimport sortBy from 'lodash/sortBy';\n\nvar getCountriesPanel = function getCountriesPanel(state) {\n  return state.dashboardElement.countriesPanel;\n};\n\nvar getSourcesPanel = function getSourcesPanel(state) {\n  return state.dashboardElement.sourcesPanel;\n};\n\nvar getDestinationsPanel = function getDestinationsPanel(state) {\n  return state.dashboardElement.destinationsPanel;\n};\n\nvar getCompaniesPanel = function getCompaniesPanel(state) {\n  return state.dashboardElement.companiesPanel;\n};\n\nvar getCommoditiesPanel = function getCommoditiesPanel(state) {\n  return state.dashboardElement.commoditiesPanel;\n};\n\nvar getIndicators = function getIndicators(state) {\n  return state.dashboardElement.data.indicators;\n};\n\nvar getActiveIndicators = function getActiveIndicators(state) {\n  return state.dashboardElement.activeIndicatorsList;\n};\n\nvar getDashboardPanelTabs = function getDashboardPanelTabs(state) {\n  return state.dashboardElement.tabs;\n};\n\nvar getActiveDashboardPanel = function getActiveDashboardPanel(state) {\n  var _state$dashboardEleme = state.dashboardElement,\n      activePanelId = _state$dashboardEleme.activePanelId,\n      restState = _objectWithoutProperties(_state$dashboardEleme, [\"activePanelId\"]);\n\n  return _objectSpread({\n    id: activePanelId\n  }, restState[\"\".concat(activePanelId, \"Panel\")]);\n};\n\nvar getIndicatorsMeta = function getIndicatorsMeta(state) {\n  return state.dashboardElement.meta.indicators;\n};\n\nexport var getActivePanelTabs = createSelector([getActiveDashboardPanel, getDashboardPanelTabs], function (panel, tabs) {\n  return tabs[panel.id] || [];\n});\nexport var getDirtyBlocks = createSelector([getCountriesPanel, getSourcesPanel, getDestinationsPanel, getCompaniesPanel, getCommoditiesPanel], function (countriesPanel, sourcesPanel, destinationsPanel, companiesPanel, commoditiesPanel) {\n  return {\n    sources: countriesPanel.activeItem !== null,\n    destinations: destinationsPanel.activeItem !== null,\n    companies: companiesPanel.activeItem !== null,\n    commodities: commoditiesPanel.activeItem !== null\n  };\n});\nexport var getDynamicSentence = createSelector([getDirtyBlocks, getCountriesPanel, getSourcesPanel, getDestinationsPanel, getCompaniesPanel, getCommoditiesPanel], function (dirtyBlocks, countriesPanel, sourcesPanel, destinationsPanel, companiesPanel, commoditiesPanel) {\n  if (Object.values(dirtyBlocks).every(function (block) {\n    return !block;\n  })) {\n    return null;\n  }\n\n  var activeCountry = countriesPanel.activeItem;\n  var activeSource = sourcesPanel.activeItem;\n  var activeDestination = destinationsPanel.activeItem;\n  var activeCompany = companiesPanel.activeItem;\n  var activeCommodity = commoditiesPanel.activeItem;\n  return [{\n    panel: 'commodities',\n    prefix: activeCommodity ? 'Explore' : 'Explore commodities',\n    value: activeCommodity && activeCommodity.name.toLowerCase()\n  }, {\n    panel: 'sources',\n    prefix: activeSource || activeCountry ? \"produced in\" : 'produced in countries covered by Trase',\n    value: activeSource && activeSource.name.toLowerCase() || activeCountry && activeCountry.name.toLowerCase()\n  }, {\n    panel: 'companies',\n    prefix: activeCompany ? \"\".concat(activeCompany.nodeType.toLowerCase() === 'exporter' ? 'exported' : 'imported', \" by\") : '',\n    value: activeCompany && activeCompany.name.toLowerCase()\n  }, {\n    panel: 'destinations',\n    prefix: activeDestination ? \"going to\" : '',\n    value: activeDestination && activeDestination.name.toLowerCase()\n  }];\n});\nexport var getActiveIndicatorsData = createSelector([getIndicators, getActiveIndicators], function (indicators, activeIndicatorsList) {\n  return indicators.filter(function (indicator) {\n    return activeIndicatorsList.includes(indicator.id);\n  });\n});\nexport var getIndicatorsByGroup = createSelector([getIndicators, getIndicatorsMeta], function (indicators, groups) {\n  var sortedIndicators = (sortBy(indicators, ['groupId']) || []).map(function (_ref) {\n    var displayName = _ref.displayName,\n        item = _objectWithoutProperties(_ref, [\"displayName\"]);\n\n    return _objectSpread({\n      name: displayName\n    }, item);\n  });\n  var sortedGroups = (sortBy(groups || [], ['id']) || []).map(function (g) {\n    return _objectSpread({}, g, {\n      group: true\n    });\n  });\n  var groupedIndicators = sortedGroups.reduce(function (acc, next) {\n    var index = acc.findIndex(function (i) {\n      return i.groupId === next.id;\n    });\n\n    var result = _toConsumableArray(acc);\n\n    if (index > -1) {\n      result.splice(index, 0, next);\n    }\n\n    return result;\n  }, _toConsumableArray(sortedIndicators));\n  return groupedIndicators;\n});\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_toConsumableArray, \"_toConsumableArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_nonIterableSpread, \"_nonIterableSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_iterableToArray, \"_iterableToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_arrayWithoutHoles, \"_arrayWithoutHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_objectWithoutProperties, \"_objectWithoutProperties\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(_objectWithoutPropertiesLoose, \"_objectWithoutPropertiesLoose\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getCountriesPanel, \"getCountriesPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getSourcesPanel, \"getSourcesPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getDestinationsPanel, \"getDestinationsPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getCompaniesPanel, \"getCompaniesPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getCommoditiesPanel, \"getCommoditiesPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getIndicators, \"getIndicators\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getActiveIndicators, \"getActiveIndicators\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getDashboardPanelTabs, \"getDashboardPanelTabs\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getActiveDashboardPanel, \"getActiveDashboardPanel\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getIndicatorsMeta, \"getIndicatorsMeta\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getActivePanelTabs, \"getActivePanelTabs\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getDirtyBlocks, \"getDirtyBlocks\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getDynamicSentence, \"getDynamicSentence\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getActiveIndicatorsData, \"getActiveIndicatorsData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  reactHotLoader.register(getIndicatorsByGroup, \"getIndicatorsByGroup\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-element.selectors.js"],"names":["getCountriesPanel","state","getSourcesPanel","getDestinationsPanel","getCompaniesPanel","getCommoditiesPanel","getIndicators","getActiveIndicators","getDashboardPanelTabs","getActiveDashboardPanel","activePanelId","restState","id","getIndicatorsMeta","getActivePanelTabs","createSelector","tabs","panel","getDirtyBlocks","sources","countriesPanel","destinations","destinationsPanel","companies","companiesPanel","commodities","commoditiesPanel","getDynamicSentence","activeCountry","activeSource","sourcesPanel","activeDestination","activeCompany","activeCommodity","prefix","value","getActiveIndicatorsData","activeIndicatorsList","indicator","getIndicatorsByGroup","sortedIndicators","sortBy","displayName","item","name","sortedGroups","groups","group","groupedIndicators","index","i","next","result"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport sortBy from 'lodash/sortBy';\n\nconst getCountriesPanel = state => state.dashboardElement.countriesPanel;\nconst getSourcesPanel = state => state.dashboardElement.sourcesPanel;\nconst getDestinationsPanel = state => state.dashboardElement.destinationsPanel;\nconst getCompaniesPanel = state => state.dashboardElement.companiesPanel;\nconst getCommoditiesPanel = state => state.dashboardElement.commoditiesPanel;\nconst getIndicators = state => state.dashboardElement.data.indicators;\nconst getActiveIndicators = state => state.dashboardElement.activeIndicatorsList;\nconst getDashboardPanelTabs = state => state.dashboardElement.tabs;\nconst getActiveDashboardPanel = state => {\n  const { activePanelId, ...restState } = state.dashboardElement;\n  return { id: activePanelId, ...restState[`${activePanelId}Panel`] };\n};\nconst getIndicatorsMeta = state => state.dashboardElement.meta.indicators;\n\nexport const getActivePanelTabs = createSelector(\n  [getActiveDashboardPanel, getDashboardPanelTabs],\n  (panel, tabs) => tabs[panel.id] || []\n);\n\nexport const getDirtyBlocks = createSelector(\n  [\n    getCountriesPanel,\n    getSourcesPanel,\n    getDestinationsPanel,\n    getCompaniesPanel,\n    getCommoditiesPanel\n  ],\n  (countriesPanel, sourcesPanel, destinationsPanel, companiesPanel, commoditiesPanel) => ({\n    sources: countriesPanel.activeItem !== null,\n    destinations: destinationsPanel.activeItem !== null,\n    companies: companiesPanel.activeItem !== null,\n    commodities: commoditiesPanel.activeItem !== null\n  })\n);\n\nexport const getDynamicSentence = createSelector(\n  [\n    getDirtyBlocks,\n    getCountriesPanel,\n    getSourcesPanel,\n    getDestinationsPanel,\n    getCompaniesPanel,\n    getCommoditiesPanel\n  ],\n  (\n    dirtyBlocks,\n    countriesPanel,\n    sourcesPanel,\n    destinationsPanel,\n    companiesPanel,\n    commoditiesPanel\n  ) => {\n    if (Object.values(dirtyBlocks).every(block => !block)) {\n      return null;\n    }\n\n    const activeCountry = countriesPanel.activeItem;\n    const activeSource = sourcesPanel.activeItem;\n    const activeDestination = destinationsPanel.activeItem;\n    const activeCompany = companiesPanel.activeItem;\n    const activeCommodity = commoditiesPanel.activeItem;\n\n    return [\n      {\n        panel: 'commodities',\n        prefix: activeCommodity ? 'Explore' : 'Explore commodities',\n        value: activeCommodity && activeCommodity.name.toLowerCase()\n      },\n      {\n        panel: 'sources',\n        prefix:\n          activeSource || activeCountry ? `produced in` : 'produced in countries covered by Trase',\n        value:\n          (activeSource && activeSource.name.toLowerCase()) ||\n          (activeCountry && activeCountry.name.toLowerCase())\n      },\n      {\n        panel: 'companies',\n        prefix: activeCompany\n          ? `${activeCompany.nodeType.toLowerCase() === 'exporter' ? 'exported' : 'imported'} by`\n          : '',\n        value: activeCompany && activeCompany.name.toLowerCase()\n      },\n      {\n        panel: 'destinations',\n        prefix: activeDestination ? `going to` : '',\n        value: activeDestination && activeDestination.name.toLowerCase()\n      }\n    ];\n  }\n);\n\nexport const getActiveIndicatorsData = createSelector(\n  [getIndicators, getActiveIndicators],\n  (indicators, activeIndicatorsList) =>\n    indicators.filter(indicator => activeIndicatorsList.includes(indicator.id))\n);\n\nexport const getIndicatorsByGroup = createSelector(\n  [getIndicators, getIndicatorsMeta],\n  (indicators, groups) => {\n    const sortedIndicators = (sortBy(indicators, ['groupId']) || []).map(\n      ({ displayName, ...item }) => ({ name: displayName, ...item })\n    );\n    const sortedGroups = (sortBy(groups || [], ['id']) || []).map(g => ({ ...g, group: true }));\n    const groupedIndicators = sortedGroups.reduce(\n      (acc, next) => {\n        const index = acc.findIndex(i => i.groupId === next.id);\n        const result = [...acc];\n        if (index > -1) {\n          result.splice(index, 0, next);\n        }\n        return result;\n      },\n      [...sortedIndicators]\n    );\n\n    return groupedIndicators;\n  }\n);\n"]}]}