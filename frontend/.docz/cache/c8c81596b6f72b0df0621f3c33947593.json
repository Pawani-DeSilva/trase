{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getNodesDict.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getNodesDict.js","mtime":1543486759571},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar _default = function _default(rawNodes, columns\n/* , nodesMeta */\n) {\n  // store in node dict for use in getVisibleNodes\n  var nodesDict = {};\n  var geoIdsDict = {};\n  rawNodes.forEach(function (node) {\n    var columnId = node.columnId;\n    var matchingColumn = columns.find(function (column) {\n      return column.id === columnId;\n    });\n    var newNode = {\n      id: node.id,\n      columnId: parseInt(node.columnId, 10),\n      columnName: matchingColumn.name,\n      type: matchingColumn.name,\n      columnGroup: matchingColumn.group,\n      isDefault: matchingColumn.isDefault,\n      isGeo: matchingColumn.isGeo,\n      name: node.name,\n      profileType: matchingColumn.profileType,\n      geoId: node.geoId\n    };\n\n    if (node.isDomesticConsumption === true || node.isDomesticConsumption === 'true') {\n      newNode.isDomesticConsumption = true;\n    }\n\n    if (node.isAggregated === true || node.isAggregated === 'true') {\n      newNode.isAggregated = true;\n    }\n\n    if (node.isUnknown === true || node.isUnknown === 'true') {\n      newNode.isUnknown = true;\n    }\n\n    if (node.hasFlows === true || node.hasFlows === 'true') {\n      newNode.hasFlows = true;\n    }\n\n    nodesDict[parseInt(node.id, 10)] = newNode;\n\n    if (node.geoId) {\n      geoIdsDict[\"\".concat(columnId, \"-\").concat(node.geoId)] = node.id;\n    }\n  });\n  return {\n    nodesDict: nodesDict,\n    geoIdsDict: geoIdsDict\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getNodesDict.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getNodesDict.js"],"names":["columns","nodesDict","geoIdsDict","rawNodes","columnId","node","matchingColumn","column","newNode","id","parseInt","columnName","type","columnGroup","isDefault","isGeo","name","profileType","geoId"],"mappings":";;;;;;eAAe,kBAAA,QAAA,EAAmBA;AAAQ;AAA3B,EAA8C;AAC3D;AAEA,MAAMC,SAAS,GAAf,EAAA;AACA,MAAMC,UAAU,GAAhB,EAAA;AACAC,EAAAA,QAAQ,CAARA,OAAAA,CAAiB,UAAA,IAAA,EAAQ;AACvB,QAAMC,QAAQ,GAAGC,IAAI,CAArB,QAAA;AACA,QAAMC,cAAc,GAAG,OAAO,CAAP,IAAA,CAAa,UAAA,MAAA,EAAM;AAAA,aAAIC,MAAM,CAANA,EAAAA,KAAJ,QAAA;AAA1C,KAAuB,CAAvB;AACA,QAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEJ,IAAI,CADM,EAAA;AAEdD,MAAAA,QAAQ,EAAEM,QAAQ,CAACL,IAAI,CAAL,QAAA,EAFJ,EAEI,CAFJ;AAGdM,MAAAA,UAAU,EAAEL,cAAc,CAHZ,IAAA;AAIdM,MAAAA,IAAI,EAAEN,cAAc,CAJN,IAAA;AAKdO,MAAAA,WAAW,EAAEP,cAAc,CALb,KAAA;AAMdQ,MAAAA,SAAS,EAAER,cAAc,CANX,SAAA;AAOdS,MAAAA,KAAK,EAAET,cAAc,CAPP,KAAA;AAQdU,MAAAA,IAAI,EAAEX,IAAI,CARI,IAAA;AASdY,MAAAA,WAAW,EAAEX,cAAc,CATb,WAAA;AAUdY,MAAAA,KAAK,EAAEb,IAAI,CAACa;AAVE,KAAhB;;AAaA,QAAIb,IAAI,CAAJA,qBAAAA,KAAAA,IAAAA,IAAuCA,IAAI,CAAJA,qBAAAA,KAA3C,MAAA,EAAkF;AAChFG,MAAAA,OAAO,CAAPA,qBAAAA,GAAAA,IAAAA;AACD;;AAED,QAAIH,IAAI,CAAJA,YAAAA,KAAAA,IAAAA,IAA8BA,IAAI,CAAJA,YAAAA,KAAlC,MAAA,EAAgE;AAC9DG,MAAAA,OAAO,CAAPA,YAAAA,GAAAA,IAAAA;AACD;;AAED,QAAIH,IAAI,CAAJA,SAAAA,KAAAA,IAAAA,IAA2BA,IAAI,CAAJA,SAAAA,KAA/B,MAAA,EAA0D;AACxDG,MAAAA,OAAO,CAAPA,SAAAA,GAAAA,IAAAA;AACD;;AAED,QAAIH,IAAI,CAAJA,QAAAA,KAAAA,IAAAA,IAA0BA,IAAI,CAAJA,QAAAA,KAA9B,MAAA,EAAwD;AACtDG,MAAAA,OAAO,CAAPA,QAAAA,GAAAA,IAAAA;AACD;;AAEDP,IAAAA,SAAS,CAACS,QAAQ,CAACL,IAAI,CAAL,EAAA,EAAlBJ,EAAkB,CAAT,CAATA,GAAAA,OAAAA;;AACA,QAAII,IAAI,CAAR,KAAA,EAAgB;AACdH,MAAAA,UAAU,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,GAAA,EAAA,MAAA,CAAgBG,IAAI,CAA9BH,KAAU,CAAA,CAAVA,GAA0CG,IAAI,CAA9CH,EAAAA;AACD;AAnCHC,GAAAA;AAqCA,SAAO;AAAEF,IAAAA,SAAS,EAAX,SAAA;AAAaC,IAAAA,UAAU,EAAVA;AAAb,GAAP;AACD,C;;AA3CD","sourcesContent":["export default function(rawNodes, columns /* , nodesMeta */) {\n  // store in node dict for use in getVisibleNodes\n\n  const nodesDict = {};\n  const geoIdsDict = {};\n  rawNodes.forEach(node => {\n    const columnId = node.columnId;\n    const matchingColumn = columns.find(column => column.id === columnId);\n    const newNode = {\n      id: node.id,\n      columnId: parseInt(node.columnId, 10),\n      columnName: matchingColumn.name,\n      type: matchingColumn.name,\n      columnGroup: matchingColumn.group,\n      isDefault: matchingColumn.isDefault,\n      isGeo: matchingColumn.isGeo,\n      name: node.name,\n      profileType: matchingColumn.profileType,\n      geoId: node.geoId\n    };\n\n    if (node.isDomesticConsumption === true || node.isDomesticConsumption === 'true') {\n      newNode.isDomesticConsumption = true;\n    }\n\n    if (node.isAggregated === true || node.isAggregated === 'true') {\n      newNode.isAggregated = true;\n    }\n\n    if (node.isUnknown === true || node.isUnknown === 'true') {\n      newNode.isUnknown = true;\n    }\n\n    if (node.hasFlows === true || node.hasFlows === 'true') {\n      newNode.hasFlows = true;\n    }\n\n    nodesDict[parseInt(node.id, 10)] = newNode;\n    if (node.geoId) {\n      geoIdsDict[`${columnId}-${node.geoId}`] = node.id;\n    }\n  });\n  return { nodesDict, geoIdsDict };\n}\n"]}]}