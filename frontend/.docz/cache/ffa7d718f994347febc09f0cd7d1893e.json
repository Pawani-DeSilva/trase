{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/splitLinksByColumn.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/splitLinksByColumn.js","mtime":1543486759573},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar _default = function _default(rawLinks, nodesDict, selectedRecolorBy) {\n  var links = [];\n  rawLinks.forEach(function (link) {\n    var path = link.path;\n\n    for (var i = 0; i < path.length - 1; i++) {\n      var sourceNodeId = path[i];\n      var targetNodeId = path[i + 1];\n      var sourceNode = nodesDict[sourceNodeId];\n      var targetNode = nodesDict[targetNodeId];\n      var recolorBy = null;\n\n      if (link.qual !== undefined && link.qual !== null) {\n        recolorBy = link.qual.replace(/\\s/gi, '-').toLowerCase();\n      } else if (link.ind !== undefined && link.ind !== null) {\n        recolorBy = link.ind; // TODO API used to return a rounded value, forming links groups automatically\n        // This is a hack to force grouping of similar-bucket links\n\n        if (selectedRecolorBy && selectedRecolorBy.legendType === 'percentual') {\n          recolorBy = Math.floor(link.ind / selectedRecolorBy.divisor) * selectedRecolorBy.divisor;\n        }\n      }\n\n      if (!sourceNode || !targetNode) {\n        return;\n      }\n\n      links.push({\n        sourceNodeId: sourceNodeId,\n        targetNodeId: targetNodeId,\n        sourceColumnPosition: sourceNode.columnGroup,\n        targetColumnPosition: targetNode.columnGroup,\n        sourceNodeName: sourceNode.name,\n        targetNodeName: targetNode.name,\n        height: link.height,\n        quant: parseFloat(link.quant),\n        recolorBy: recolorBy,\n        originalPath: path\n      });\n    }\n  });\n  return links;\n};\n\n// break down links into simple src - target binomes\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/splitLinksByColumn.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/splitLinksByColumn.js"],"names":["links","rawLinks","path","link","i","sourceNodeId","targetNodeId","sourceNode","nodesDict","targetNode","recolorBy","selectedRecolorBy","Math","sourceColumnPosition","targetColumnPosition","sourceNodeName","targetNodeName","height","quant","parseFloat","originalPath"],"mappings":";;;;;;eACe,kBAAA,QAAA,EAAA,SAAA,EAAA,iBAAA,EAAiD;AAC9D,MAAMA,KAAK,GAAX,EAAA;AACAC,EAAAA,QAAQ,CAARA,OAAAA,CAAiB,UAAA,IAAA,EAAQ;AACvB,QAAMC,IAAI,GAAGC,IAAI,CAAjB,IAAA;;AACA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,IAAI,CAAJA,MAAAA,GAApB,CAAA,EAAqCE,CAArC,EAAA,EAA0C;AACxC,UAAMC,YAAY,GAAGH,IAAI,CAAzB,CAAyB,CAAzB;AACA,UAAMI,YAAY,GAAGJ,IAAI,CAACE,CAAC,GAA3B,CAAyB,CAAzB;AACA,UAAMG,UAAU,GAAGC,SAAS,CAA5B,YAA4B,CAA5B;AACA,UAAMC,UAAU,GAAGD,SAAS,CAA5B,YAA4B,CAA5B;AAEA,UAAIE,SAAS,GAAb,IAAA;;AACA,UAAIP,IAAI,CAAJA,IAAAA,KAAAA,SAAAA,IAA2BA,IAAI,CAAJA,IAAAA,KAA/B,IAAA,EAAmD;AACjDO,QAAAA,SAAS,GAAGP,IAAI,CAAJA,IAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAZO,WAAYP,EAAZO;AADF,OAAA,MAEO,IAAIP,IAAI,CAAJA,GAAAA,KAAAA,SAAAA,IAA0BA,IAAI,CAAJA,GAAAA,KAA9B,IAAA,EAAiD;AACtDO,QAAAA,SAAS,GAAGP,IAAI,CADsC,GACtDO,CADsD,CAGtD;AACA;;AACA,YAAIC,iBAAiB,IAAIA,iBAAiB,CAAjBA,UAAAA,KAAzB,YAAA,EAAwE;AACtED,UAAAA,SAAS,GAAGE,IAAI,CAAJA,KAAAA,CAAWT,IAAI,CAAJA,GAAAA,GAAWQ,iBAAiB,CAAvCC,OAAAA,IAAmDD,iBAAiB,CAAhFD,OAAAA;AACD;AACF;;AAED,UAAI,CAAA,UAAA,IAAe,CAAnB,UAAA,EAAgC;AAC9B;AACD;;AAEDV,MAAAA,KAAK,CAALA,IAAAA,CAAW;AACTK,QAAAA,YAAY,EADH,YAAA;AAETC,QAAAA,YAAY,EAFH,YAAA;AAGTO,QAAAA,oBAAoB,EAAEN,UAAU,CAHvB,WAAA;AAITO,QAAAA,oBAAoB,EAAEL,UAAU,CAJvB,WAAA;AAKTM,QAAAA,cAAc,EAAER,UAAU,CALjB,IAAA;AAMTS,QAAAA,cAAc,EAAEP,UAAU,CANjB,IAAA;AAOTQ,QAAAA,MAAM,EAAEd,IAAI,CAPH,MAAA;AAQTe,QAAAA,KAAK,EAAEC,UAAU,CAAChB,IAAI,CARb,KAQQ,CARR;AASTO,QAAAA,SAAS,EATA,SAAA;AAUTU,QAAAA,YAAY,EAAElB;AAVL,OAAXF;AAYD;AArCHC,GAAAA;AAuCA,SAAA,KAAA;AACD,C;;AA3CD;AACA","sourcesContent":["// break down links into simple src - target binomes\nexport default function(rawLinks, nodesDict, selectedRecolorBy) {\n  const links = [];\n  rawLinks.forEach(link => {\n    const path = link.path;\n    for (let i = 0; i < path.length - 1; i++) {\n      const sourceNodeId = path[i];\n      const targetNodeId = path[i + 1];\n      const sourceNode = nodesDict[sourceNodeId];\n      const targetNode = nodesDict[targetNodeId];\n\n      let recolorBy = null;\n      if (link.qual !== undefined && link.qual !== null) {\n        recolorBy = link.qual.replace(/\\s/gi, '-').toLowerCase();\n      } else if (link.ind !== undefined && link.ind !== null) {\n        recolorBy = link.ind;\n\n        // TODO API used to return a rounded value, forming links groups automatically\n        // This is a hack to force grouping of similar-bucket links\n        if (selectedRecolorBy && selectedRecolorBy.legendType === 'percentual') {\n          recolorBy = Math.floor(link.ind / selectedRecolorBy.divisor) * selectedRecolorBy.divisor;\n        }\n      }\n\n      if (!sourceNode || !targetNode) {\n        return;\n      }\n\n      links.push({\n        sourceNodeId,\n        targetNodeId,\n        sourceColumnPosition: sourceNode.columnGroup,\n        targetColumnPosition: targetNode.columnGroup,\n        sourceNodeName: sourceNode.name,\n        targetNodeName: targetNode.name,\n        height: link.height,\n        quant: parseFloat(link.quant),\n        recolorBy,\n        originalPath: path\n      });\n    }\n  });\n  return links;\n}\n"]}]}