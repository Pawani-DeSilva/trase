{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js","mtime":1548840708300},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { connect } from 'react-redux';\nimport { toggleDropdown } from 'actions/app.actions';\nimport { selectColumn } from 'actions/tool.actions';\nimport ColumnSelector from 'react-components/tool/column-selector/column-selector.component';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentDropdown: state.app.currentDropdown,\n    allColumns: state.tool.columns,\n    selectedColumnsIds: state.tool.selectedColumnsIds,\n    nodesColoredAtColumn: state.tool.nodesColoredAtColumn\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onToggle: function onToggle(id) {\n      dispatch(toggleDropdown(id));\n    },\n    onColumnSelected: function onColumnSelected(columnIndex, columnId) {\n      dispatch(selectColumn(columnIndex, columnId));\n    }\n  };\n};\n\nvar _default = connect(mapStateToProps, mapDispatchToProps)(ColumnSelector);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/column-selector/column-selector.container.js"],"names":["mapStateToProps","currentDropdown","state","allColumns","selectedColumnsIds","nodesColoredAtColumn","mapDispatchToProps","onToggle","dispatch","toggleDropdown","onColumnSelected","selectColumn","connect"],"mappings":";;;;;;AAAA,SAAA,OAAA,QAAA,aAAA;AACA,SAAA,cAAA,QAAA,qBAAA;AACA,SAAA,YAAA,QAAA,sBAAA;AACA,OAAA,cAAA,MAAA,iEAAA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAK;AAAA,SAAK;AAChCC,IAAAA,eAAe,EAAEC,KAAK,CAALA,GAAAA,CADe,eAAA;AAEhCC,IAAAA,UAAU,EAAED,KAAK,CAALA,IAAAA,CAFoB,OAAA;AAGhCE,IAAAA,kBAAkB,EAAEF,KAAK,CAALA,IAAAA,CAHY,kBAAA;AAIhCG,IAAAA,oBAAoB,EAAEH,KAAK,CAALA,IAAAA,CAAWG;AAJD,GAAL;AAA7B,CAAA;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAQ;AAAA,SAAK;AACtCC,IAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,EAAA,EAAM;AACdC,MAAAA,QAAQ,CAACC,cAAc,CAAvBD,EAAuB,CAAf,CAARA;AAFoC,KAAA;AAItCE,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,WAAA,EAAA,QAAA,EAA2B;AAC3CF,MAAAA,QAAQ,CAACG,YAAY,CAAA,WAAA,EAArBH,QAAqB,CAAb,CAARA;AACD;AANqC,GAAL;AAAnC,CAAA;;eASeI,OAAO,CAAA,eAAA,EAAPA,kBAAO,CAAPA,CAAf,cAAeA,C;;AAAf;;;;;;;;;;;;0BAhBMZ,e;0BAOAM,kB","sourcesContent":["import { connect } from 'react-redux';\nimport { toggleDropdown } from 'actions/app.actions';\nimport { selectColumn } from 'actions/tool.actions';\nimport ColumnSelector from 'react-components/tool/column-selector/column-selector.component';\n\nconst mapStateToProps = state => ({\n  currentDropdown: state.app.currentDropdown,\n  allColumns: state.tool.columns,\n  selectedColumnsIds: state.tool.selectedColumnsIds,\n  nodesColoredAtColumn: state.tool.nodesColoredAtColumn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onToggle: id => {\n    dispatch(toggleDropdown(id));\n  },\n  onColumnSelected: (columnIndex, columnId) => {\n    dispatch(selectColumn(columnIndex, columnId));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ColumnSelector);\n"]}]}