{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js","mtime":1548840708263},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n/* eslint-disable no-shadow */\n\n\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport { selectNode, highlightNode, collapseNodeSelection, expandNodeSelection, resetState } from 'actions/tool.actions';\nimport connect from 'connect';\nimport Sankey from 'components/tool/sankey.component';\n\nvar canExpandSelection = function canExpandSelection(_ref) {\n  var expandedNodesIds = _ref.expandedNodesIds,\n      selectedNodesIds = _ref.selectedNodesIds;\n  return !isEqual(_toConsumableArray(selectedNodesIds).sort(), _toConsumableArray(expandedNodesIds).sort());\n};\n\nvar anyOfConditionsDidChange = function anyOfConditionsDidChange() {\n  for (var _len = arguments.length, conditions = new Array(_len), _key = 0; _key < _len; _key++) {\n    conditions[_key] = arguments[_key];\n  }\n\n  return conditions.map(function (c) {\n    return (!!c).toString();\n  }).join('');\n}; // this maps component methods to app state updates\n// keys correspond to method names, values to state prop path\n\n\nvar mapMethodsToState = function mapMethodsToState(state) {\n  return {\n    showLoadedLinks: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.links;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          sankeySize: state.app.sankeySize,\n          selectedRecolorBy: state.tool.selectedRecolorBy,\n          currentQuant: state.tool.currentQuant,\n          selectedNodesIds: state.tool.selectedNodesIds,\n          links: state.tool.links,\n          detailedView: state.tool.detailedView,\n          visibleNodesByColumn: state.tool.visibleNodesByColumn,\n          nodesColoredAtColumn: state.tool.nodesColoredAtColumn\n        };\n      }\n    },\n    resizeViewport: {\n      _comparedValue: function _comparedValue(state) {\n        return state.app.sankeySize;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          sankeySize: state.app.sankeySize,\n          selectedRecolorBy: state.tool.selectedRecolorBy,\n          currentQuant: state.tool.currentQuant,\n          selectedNodesIds: state.tool.selectedNodesIds\n        };\n      }\n    },\n    selectNodes: state.tool.selectedNodesIds,\n    toggleExpandActionButton: {\n      _comparedValue: function _comparedValue(state) {\n        return anyOfConditionsDidChange(canExpandSelection(state.tool), isEmpty(state.tool.expandedNodesIds));\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          isVisible: canExpandSelection(state.tool),\n          isReExpand: !isEmpty(state.tool.expandedNodesIds) && canExpandSelection(state.tool)\n        };\n      }\n    },\n    toggleCollapseActionButton: !isEmpty(state.tool.expandedNodesIds),\n    highlightNodes: state.tool.highlightedNodesIds,\n    translateNodes: {\n      _comparedValue: function _comparedValue(state) {\n        return state.location.query && state.location.query.lang;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          selectedRecolorBy: state.tool.selectedRecolorBy,\n          currentQuant: state.tool.currentQuant,\n          selectedNodesIds: state.tool.selectedNodesIds\n        };\n      }\n    }\n  };\n}; // maps component callbacks (ie user events) to redux actions\n// in the component, call this.callbacks.someMethod\n// and from here return an object with keys = callback name (someMethod),\n// and values = functions returning an action\n\n\nvar mapViewCallbacksToActions = function mapViewCallbacksToActions() {\n  return {\n    onNodeClicked: function onNodeClicked(id, isAggregated) {\n      return selectNode(id, isAggregated);\n    },\n    onNodeHighlighted: function onNodeHighlighted(id, isAggregated) {\n      return highlightNode(id, isAggregated);\n    },\n    onExpandClick: function onExpandClick() {\n      return expandNodeSelection();\n    },\n    onCollapseClick: function onCollapseClick() {\n      return collapseNodeSelection();\n    },\n    onClearClick: function onClearClick() {\n      return resetState();\n    }\n  };\n};\n\nvar _default = connect(Sankey, mapMethodsToState, mapViewCallbacksToActions);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_toConsumableArray, \"_toConsumableArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(_nonIterableSpread, \"_nonIterableSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(_iterableToArray, \"_iterableToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(_arrayWithoutHoles, \"_arrayWithoutHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(canExpandSelection, \"canExpandSelection\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(anyOfConditionsDidChange, \"anyOfConditionsDidChange\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(mapMethodsToState, \"mapMethodsToState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(mapViewCallbacksToActions, \"mapViewCallbacksToActions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/sankey.container.js"],"names":["canExpandSelection","expandedNodesIds","selectedNodesIds","isEqual","anyOfConditionsDidChange","conditions","mapMethodsToState","showLoadedLinks","_comparedValue","state","_returnedValue","sankeySize","selectedRecolorBy","currentQuant","links","detailedView","visibleNodesByColumn","nodesColoredAtColumn","resizeViewport","selectNodes","toggleExpandActionButton","isEmpty","isVisible","isReExpand","toggleCollapseActionButton","highlightNodes","translateNodes","mapViewCallbacksToActions","onNodeClicked","selectNode","onNodeHighlighted","highlightNode","onExpandClick","expandNodeSelection","onCollapseClick","collapseNodeSelection","onClearClick","resetState","connect"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n  selectNode,\n  highlightNode,\n  collapseNodeSelection,\n  expandNodeSelection,\n  resetState\n} from 'actions/tool.actions';\nimport connect from 'connect';\nimport Sankey from 'components/tool/sankey.component';\n\nconst canExpandSelection = ({ expandedNodesIds, selectedNodesIds }) =>\n  !isEqual([...selectedNodesIds].sort(), [...expandedNodesIds].sort());\n\nconst anyOfConditionsDidChange = (...conditions) => conditions.map(c => (!!c).toString()).join('');\n\n// this maps component methods to app state updates\n// keys correspond to method names, values to state prop path\nconst mapMethodsToState = state => ({\n  showLoadedLinks: {\n    _comparedValue: state => state.tool.links,\n    _returnedValue: state => ({\n      sankeySize: state.app.sankeySize,\n      selectedRecolorBy: state.tool.selectedRecolorBy,\n      currentQuant: state.tool.currentQuant,\n      selectedNodesIds: state.tool.selectedNodesIds,\n      links: state.tool.links,\n      detailedView: state.tool.detailedView,\n      visibleNodesByColumn: state.tool.visibleNodesByColumn,\n      nodesColoredAtColumn: state.tool.nodesColoredAtColumn\n    })\n  },\n  resizeViewport: {\n    _comparedValue: state => state.app.sankeySize,\n    _returnedValue: state => ({\n      sankeySize: state.app.sankeySize,\n      selectedRecolorBy: state.tool.selectedRecolorBy,\n      currentQuant: state.tool.currentQuant,\n      selectedNodesIds: state.tool.selectedNodesIds\n    })\n  },\n  selectNodes: state.tool.selectedNodesIds,\n  toggleExpandActionButton: {\n    _comparedValue: state =>\n      anyOfConditionsDidChange(\n        canExpandSelection(state.tool),\n        isEmpty(state.tool.expandedNodesIds)\n      ),\n    _returnedValue: state => ({\n      isVisible: canExpandSelection(state.tool),\n      isReExpand: !isEmpty(state.tool.expandedNodesIds) && canExpandSelection(state.tool)\n    })\n  },\n  toggleCollapseActionButton: !isEmpty(state.tool.expandedNodesIds),\n  highlightNodes: state.tool.highlightedNodesIds,\n  translateNodes: {\n    _comparedValue: state => state.location.query && state.location.query.lang,\n    _returnedValue: state => ({\n      selectedRecolorBy: state.tool.selectedRecolorBy,\n      currentQuant: state.tool.currentQuant,\n      selectedNodesIds: state.tool.selectedNodesIds\n    })\n  }\n});\n\n// maps component callbacks (ie user events) to redux actions\n// in the component, call this.callbacks.someMethod\n// and from here return an object with keys = callback name (someMethod),\n// and values = functions returning an action\nconst mapViewCallbacksToActions = () => ({\n  onNodeClicked: (id, isAggregated) => selectNode(id, isAggregated),\n  onNodeHighlighted: (id, isAggregated) => highlightNode(id, isAggregated),\n  onExpandClick: () => expandNodeSelection(),\n  onCollapseClick: () => collapseNodeSelection(),\n  onClearClick: () => resetState()\n});\n\nexport default connect(\n  Sankey,\n  mapMethodsToState,\n  mapViewCallbacksToActions\n);\n"]}]}