{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js","mtime":1543486759615},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable no-use-before-define, no-console */\n// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      var swUrl = '/service-worker.js';\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.'); // Execute callback\n\n            if (config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(isLocalhost, \"isLocalhost\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js\");\n  reactHotLoader.register(register, \"register\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js\");\n  reactHotLoader.register(registerValidSW, \"registerValidSW\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js\");\n  reactHotLoader.register(checkValidServiceWorker, \"checkValidServiceWorker\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js\");\n  reactHotLoader.register(unregister, \"unregister\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/worker.js"],"names":["isLocalhost","Boolean","window","config","process","swUrl","checkValidServiceWorker","navigator","console","registerValidSW","registration","installingWorker","fetch","response"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define, no-console */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config = {}) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = '/service-worker.js';\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]}]}