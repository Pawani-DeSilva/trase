{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/filterLinks.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/filterLinks.js","mtime":1548840716977},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport intersection from 'lodash/intersection'; // keep link if path passes test:\n// at each column, path should pass by one of the selected nodes for the column\n// if a column does not have a selected node, path always passes for this column\n\nvar filterPath = function filterPath(path, nodesAtColumns) {\n  return path.every(function (pathNodeId, columnPosition) {\n    var selectedNodesAtColumn = nodesAtColumns[columnPosition];\n\n    if (selectedNodesAtColumn !== undefined) {\n      if (selectedNodesAtColumn.indexOf(pathNodeId) === -1) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n/**\n * filter links using node Ids.\n *\n * @param  {array} links                   array of link objects\n * @param  {array} selectedNodesAtColumns  selected node Ids, organized by column indexes\n * @param  {array} nodesColoredBySelection the nodes that will actually determine the coloring of links.\n * They can be different from selectedNodesIds when nodes are selected across multiple columns,\n * in which case the rule is to use the column where most nodes are selected\n * @param  {object} recolorGroups          a hash matching selected node Ids with color Ids (represented by integers)\n * @return {array}                         a copy of the original links object\n */\n\n\nvar _default = function _default(links, selectedNodesAtColumns, nodesColoredBySelection, recolorGroups) {\n  var filteredLinks = [];\n\n  for (var i = 0, linksLen = links.length; i < linksLen; i++) {\n    var link = links[i];\n    var linkPasses = filterPath(link.originalPath, selectedNodesAtColumns);\n\n    if (linkPasses) {\n      var clonedLink = cloneDeep(link);\n      var nodeIds = intersection(link.originalPath, nodesColoredBySelection);\n\n      if (nodeIds) {\n        var nodeId = nodeIds[0]; // clonedLink.recolorGroup = nodesColoredBySelection.length - nodesColoredBySelection.indexOf(nodeId);\n\n        clonedLink.recolorGroup = recolorGroups[nodeId];\n      }\n\n      filteredLinks.push(clonedLink);\n    }\n  }\n\n  return filteredLinks;\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(filterPath, \"filterPath\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/filterLinks.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/filterLinks.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/filterLinks.js"],"names":["filterPath","selectedNodesAtColumn","nodesAtColumns","filteredLinks","i","linksLen","links","link","linkPasses","clonedLink","cloneDeep","nodeIds","intersection","nodeId","recolorGroups"],"mappings":";;;;;;AAAA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,YAAA,MAAA,qBAAA,C,CAEA;AACA;AACA;;AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAA,cAAA,EAAA;AAAA,SACjB,IAAI,CAAJ,KAAA,CAAW,UAAA,UAAA,EAAA,cAAA,EAAgC;AACzC,QAAMC,qBAAqB,GAAGC,cAAc,CAA5C,cAA4C,CAA5C;;AACA,QAAID,qBAAqB,KAAzB,SAAA,EAAyC;AACvC,UAAIA,qBAAqB,CAArBA,OAAAA,CAAAA,UAAAA,MAA8C,CAAlD,CAAA,EAAsD;AACpD,eAAA,KAAA;AACD;AACF;;AACD,WAAA,IAAA;AARe,GACjB,CADiB;AAAnB,CAAA;AAWA;;;;;;;;;;;;;eAWe,kBAAA,KAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,aAAA,EAAgF;AAC7F,MAAME,aAAa,GAAnB,EAAA;;AAEA,OAAK,IAAIC,CAAC,GAAL,CAAA,EAAWC,QAAQ,GAAGC,KAAK,CAAhC,MAAA,EAAyCF,CAAC,GAA1C,QAAA,EAAuDA,CAAvD,EAAA,EAA4D;AAC1D,QAAMG,IAAI,GAAGD,KAAK,CAAlB,CAAkB,CAAlB;AACA,QAAME,UAAU,GAAGR,UAAU,CAACO,IAAI,CAAL,YAAA,EAA7B,sBAA6B,CAA7B;;AACA,QAAA,UAAA,EAAgB;AACd,UAAME,UAAU,GAAGC,SAAS,CAA5B,IAA4B,CAA5B;AACA,UAAMC,OAAO,GAAGC,YAAY,CAACL,IAAI,CAAL,YAAA,EAA5B,uBAA4B,CAA5B;;AACA,UAAA,OAAA,EAAa;AACX,YAAMM,MAAM,GAAGF,OAAO,CADX,CACW,CAAtB,CADW,CAEX;;AACAF,QAAAA,UAAU,CAAVA,YAAAA,GAA0BK,aAAa,CAAvCL,MAAuC,CAAvCA;AACD;;AACDN,MAAAA,aAAa,CAAbA,IAAAA,CAAAA,UAAAA;AACD;AACF;;AAED,SAAA,aAAA;AACD,C;;AAnBD;;;;;;;;;;;;0BAtBMH,U","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport intersection from 'lodash/intersection';\n\n// keep link if path passes test:\n// at each column, path should pass by one of the selected nodes for the column\n// if a column does not have a selected node, path always passes for this column\nconst filterPath = (path, nodesAtColumns) =>\n  path.every((pathNodeId, columnPosition) => {\n    const selectedNodesAtColumn = nodesAtColumns[columnPosition];\n    if (selectedNodesAtColumn !== undefined) {\n      if (selectedNodesAtColumn.indexOf(pathNodeId) === -1) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n/**\n * filter links using node Ids.\n *\n * @param  {array} links                   array of link objects\n * @param  {array} selectedNodesAtColumns  selected node Ids, organized by column indexes\n * @param  {array} nodesColoredBySelection the nodes that will actually determine the coloring of links.\n * They can be different from selectedNodesIds when nodes are selected across multiple columns,\n * in which case the rule is to use the column where most nodes are selected\n * @param  {object} recolorGroups          a hash matching selected node Ids with color Ids (represented by integers)\n * @return {array}                         a copy of the original links object\n */\nexport default function(links, selectedNodesAtColumns, nodesColoredBySelection, recolorGroups) {\n  const filteredLinks = [];\n\n  for (let i = 0, linksLen = links.length; i < linksLen; i++) {\n    const link = links[i];\n    const linkPasses = filterPath(link.originalPath, selectedNodesAtColumns);\n    if (linkPasses) {\n      const clonedLink = cloneDeep(link);\n      const nodeIds = intersection(link.originalPath, nodesColoredBySelection);\n      if (nodeIds) {\n        const nodeId = nodeIds[0];\n        // clonedLink.recolorGroup = nodesColoredBySelection.length - nodesColoredBySelection.indexOf(nodeId);\n        clonedLink.recolorGroup = recolorGroups[nodeId];\n      }\n      filteredLinks.push(clonedLink);\n    }\n  }\n\n  return filteredLinks;\n}\n"]}]}