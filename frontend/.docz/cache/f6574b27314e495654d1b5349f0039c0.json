{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/abbreviateNumber.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/abbreviateNumber.js","mtime":1543486759611},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar _default = function _default(number, decPlaces) {\n  var powDecPlaces = Math.pow(10, decPlaces); // Enumerate number abbreviations\n\n  var abbrev = ['K', 'M', 'B', 'T']; // Go through the array backwards, so we do the largest first\n\n  for (var i = abbrev.length - 1; i >= 0; i--) {\n    // Convert array index to \"1000\", \"1000000\", etc\n    var size = Math.pow(10, (i + 1) * 3); // If the number is bigger or equal do the abbreviation\n\n    if (size <= number) {\n      // Here, we multiply by decPlaces, round, and then divide by decPlaces.\n      // This gives us nice rounding to a particular decimal place.\n      number = Math.round(number * powDecPlaces / size) / powDecPlaces; // Handle special case where we round up to the next abbreviation\n\n      if (number === 1000 && i < abbrev.length - 1) {\n        number = 1;\n        i++;\n      } // Add the letter for the abbreviation\n\n\n      number += abbrev[i]; // We are done... stop\n\n      break;\n    }\n  }\n\n  return number;\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/abbreviateNumber.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/abbreviateNumber.js"],"names":["powDecPlaces","abbrev","i","size","number","Math"],"mappings":";;;;;;eAAe,kBAAA,MAAA,EAAA,SAAA,EAAuB;AACpC,MAAMA,YAAY,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA,EADkB,SAClB,CAAlB,CADoC,CAGpC;;AACA,MAAMC,MAAM,GAAG,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAJqB,GAIrB,CAAf,CAJoC,CAMpC;;AACA,OAAK,IAAIC,CAAC,GAAGD,MAAM,CAANA,MAAAA,GAAb,CAAA,EAAgCC,CAAC,IAAjC,CAAA,EAAwCA,CAAxC,EAAA,EAA6C;AAC3C;AACA,QAAMC,IAAI,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA,EAAU,CAACD,CAAC,GAAF,CAAA,IAFuB,CAEjC,CAAV,CAF2C,CAI3C;;AACA,QAAIC,IAAI,IAAR,MAAA,EAAoB;AAClB;AACA;AACAC,MAAAA,MAAM,GAAGC,IAAI,CAAJA,KAAAA,CAAYD,MAAM,GAAP,YAACA,GAAZC,IAAAA,IAHS,YAGlBD,CAHkB,CAKlB;;AACA,UAAIA,MAAM,KAANA,IAAAA,IAAmBF,CAAC,GAAGD,MAAM,CAANA,MAAAA,GAA3B,CAAA,EAA8C;AAC5CG,QAAAA,MAAM,GAANA,CAAAA;AACAF,QAAAA,CAAC;AARe,OAAA,CAWlB;;;AACAE,MAAAA,MAAM,IAAIH,MAAM,CAZE,CAYF,CAAhBG,CAZkB,CAclB;;AACA;AACD;AACF;;AAED,SAAA,MAAA;AA/BF,C;;AAAA","sourcesContent":["export default (number, decPlaces) => {\n  const powDecPlaces = 10 ** decPlaces;\n\n  // Enumerate number abbreviations\n  const abbrev = ['K', 'M', 'B', 'T'];\n\n  // Go through the array backwards, so we do the largest first\n  for (let i = abbrev.length - 1; i >= 0; i--) {\n    // Convert array index to \"1000\", \"1000000\", etc\n    const size = 10 ** ((i + 1) * 3);\n\n    // If the number is bigger or equal do the abbreviation\n    if (size <= number) {\n      // Here, we multiply by decPlaces, round, and then divide by decPlaces.\n      // This gives us nice rounding to a particular decimal place.\n      number = Math.round((number * powDecPlaces) / size) / powDecPlaces;\n\n      // Handle special case where we round up to the next abbreviation\n      if (number === 1000 && i < abbrev.length - 1) {\n        number = 1;\n        i++;\n      }\n\n      // Add the letter for the abbreviation\n      number += abbrev[i];\n\n      // We are done... stop\n      break;\n    }\n  }\n\n  return number;\n};\n"]}]}