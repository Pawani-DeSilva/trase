{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js","mtime":1548840708304},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { displayStoryModal, loadDisclaimer, resize } from 'actions/app.actions';\nimport { GET_COLUMNS, RESET_TOOL_LOADERS, loadMapVectorData, loadNodes, loadLinks } from 'scripts/actions/tool.actions';\nimport { GET_COLUMNS_URL, GET_ALL_NODES_URL, getURLFromParams } from 'scripts/utils/getURLFromParams'; // TODO: custom container prevents from optimizing this\n// currently we need to load initial data every time we enter the page\n// the implementation of the vanilla redux container doesn't pass existing props to the sankey\n// passes callbacks that after execution assign values to local variables\n// This means that we need to wait for the new data to load when re-entering to the flows page\n// and the contextId has changed.\n// In order to avoid adding loading states when not needed we check that the selectedContext\n// has indeed changed.\n\nexport var setToolLoaders = function setToolLoaders(dispatch) {\n  return dispatch({\n    type: RESET_TOOL_LOADERS\n  });\n};\nexport var loadDisclaimerTool = function loadDisclaimerTool(dispatch) {\n  return dispatch(loadDisclaimer());\n};\nexport var resizeSankeyTool = function resizeSankeyTool(dispatch) {\n  return dispatch(resize());\n};\nexport var loadStoryModalTool = function loadStoryModalTool(dispatch, getState) {\n  var _getState$location$qu = getState().location.query,\n      query = _getState$location$qu === void 0 ? {} : _getState$location$qu;\n  return query.story && dispatch(displayStoryModal(query.story));\n};\nexport var loadToolInitialData = function loadToolInitialData(dispatch, getState) {\n  var state = getState();\n\n  if (!state.app.selectedContext) {\n    return;\n  }\n\n  var params = {\n    context_id: state.app.selectedContext.id\n  };\n  var allNodesURL = getURLFromParams(GET_ALL_NODES_URL, params);\n  var columnsURL = getURLFromParams(GET_COLUMNS_URL, params);\n  var promises = [allNodesURL, columnsURL].map(function (url) {\n    return fetch(url).then(function (resp) {\n      return resp.json();\n    });\n  });\n  Promise.all(promises).then(function (payload) {\n    // TODO do not wait for end of all promises/use another .all call\n    dispatch({\n      type: GET_COLUMNS,\n      payload: payload\n    });\n    dispatch(loadLinks());\n    dispatch(loadNodes());\n    dispatch(loadMapVectorData());\n  });\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(setToolLoaders, \"setToolLoaders\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js\");\n  reactHotLoader.register(loadDisclaimerTool, \"loadDisclaimerTool\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js\");\n  reactHotLoader.register(resizeSankeyTool, \"resizeSankeyTool\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js\");\n  reactHotLoader.register(loadStoryModalTool, \"loadStoryModalTool\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js\");\n  reactHotLoader.register(loadToolInitialData, \"loadToolInitialData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.thunks.js"],"names":["setToolLoaders","dispatch","type","RESET_TOOL_LOADERS","loadDisclaimerTool","loadDisclaimer","resizeSankeyTool","resize","loadStoryModalTool","query","getState","displayStoryModal","loadToolInitialData","state","params","context_id","id","allNodesURL","getURLFromParams","columnsURL","promises","resp","Promise","payload","loadLinks","loadNodes","loadMapVectorData"],"mappings":";;;;;;AAAA,SAAA,iBAAA,EAAA,cAAA,EAAA,MAAA,QAAA,qBAAA;AACA,SAAA,WAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,SAAA,QAAA,8BAAA;AAOA,SAAA,eAAA,EAAA,iBAAA,EAAA,gBAAA,QAAA,gCAAA,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,QAAA,EAAQ;AAAA,SACpCC,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEC;AADC,GAAD,CAD4B;AAA/B,CAAA;AAKP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAQ;AAAA,SAAIH,QAAQ,CAACI,cAAb,EAAY,CAAZ;AAAnC,CAAA;AAEP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,QAAA,EAAQ;AAAA,SAAIL,QAAQ,CAACM,MAAb,EAAY,CAAZ;AAAjC,CAAA;AAEP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAA,QAAA,EAAwB;AAAA,MAAA,qBAAA,GACjCE,QAAQ,GADyB,QACjCA,CADiC,KAAA;AAAA,MAChDD,KADgD,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAExD,SAAOA,KAAK,CAALA,KAAAA,IAAeR,QAAQ,CAACU,iBAAiB,CAACF,KAAK,CAAtD,KAAgD,CAAlB,CAA9B;AAFK,CAAA;AAKP,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,QAAA,EAAA,QAAA,EAAwB;AACzD,MAAMC,KAAK,GAAGH,QAAd,EAAA;;AACA,MAAI,CAACG,KAAK,CAALA,GAAAA,CAAL,eAAA,EAAgC;AAC9B;AACD;;AAED,MAAMC,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAEF,KAAK,CAALA,GAAAA,CAAAA,eAAAA,CAA0BG;AADzB,GAAf;AAGA,MAAMC,WAAW,GAAGC,gBAAgB,CAAA,iBAAA,EAApC,MAAoC,CAApC;AACA,MAAMC,UAAU,GAAGD,gBAAgB,CAAA,eAAA,EAAnC,MAAmC,CAAnC;AACA,MAAME,QAAQ,GAAG,CAAA,WAAA,EAAA,UAAA,EAAA,GAAA,CAA8B,UAAA,GAAA,EAAG;AAAA,WAAI,KAAK,CAAL,GAAK,CAAL,CAAA,IAAA,CAAgB,UAAA,IAAA,EAAI;AAAA,aAAIC,IAAI,CAAR,IAAIA,EAAJ;AAAxB,KAAI,CAAJ;AAAlD,GAAiB,CAAjB;AAEAC,EAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,EAAAA,IAAAA,CAA2B,UAAA,OAAA,EAAW;AACpC;AACArB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EADG,WAAA;AAEPqB,MAAAA,OAAO,EAAPA;AAFO,KAAD,CAARtB;AAKAA,IAAAA,QAAQ,CAACuB,SAATvB,EAAQ,CAARA;AACAA,IAAAA,QAAQ,CAACwB,SAATxB,EAAQ,CAARA;AACAA,IAAAA,QAAQ,CAACyB,iBAATzB,EAAQ,CAARA;AATFqB,GAAAA;AAbK,CAAA;;;;;;;;;;;;0BAdMtB,c;0BAKAI,kB;0BAEAE,gB;0BAEAE,kB;0BAKAI,mB","sourcesContent":["import { displayStoryModal, loadDisclaimer, resize } from 'actions/app.actions';\nimport {\n  GET_COLUMNS,\n  RESET_TOOL_LOADERS,\n  loadMapVectorData,\n  loadNodes,\n  loadLinks\n} from 'scripts/actions/tool.actions';\nimport {\n  GET_COLUMNS_URL,\n  GET_ALL_NODES_URL,\n  getURLFromParams\n} from 'scripts/utils/getURLFromParams';\n\n// TODO: custom container prevents from optimizing this\n// currently we need to load initial data every time we enter the page\n// the implementation of the vanilla redux container doesn't pass existing props to the sankey\n// passes callbacks that after execution assign values to local variables\n// This means that we need to wait for the new data to load when re-entering to the flows page\n// and the contextId has changed.\n// In order to avoid adding loading states when not needed we check that the selectedContext\n// has indeed changed.\n\nexport const setToolLoaders = dispatch =>\n  dispatch({\n    type: RESET_TOOL_LOADERS\n  });\n\nexport const loadDisclaimerTool = dispatch => dispatch(loadDisclaimer());\n\nexport const resizeSankeyTool = dispatch => dispatch(resize());\n\nexport const loadStoryModalTool = (dispatch, getState) => {\n  const { query = {} } = getState().location;\n  return query.story && dispatch(displayStoryModal(query.story));\n};\n\nexport const loadToolInitialData = (dispatch, getState) => {\n  const state = getState();\n  if (!state.app.selectedContext) {\n    return;\n  }\n\n  const params = {\n    context_id: state.app.selectedContext.id\n  };\n  const allNodesURL = getURLFromParams(GET_ALL_NODES_URL, params);\n  const columnsURL = getURLFromParams(GET_COLUMNS_URL, params);\n  const promises = [allNodesURL, columnsURL].map(url => fetch(url).then(resp => resp.json()));\n\n  Promise.all(promises).then(payload => {\n    // TODO do not wait for end of all promises/use another .all call\n    dispatch({\n      type: GET_COLUMNS,\n      payload\n    });\n\n    dispatch(loadLinks());\n    dispatch(loadNodes());\n    dispatch(loadMapVectorData());\n  });\n};\n"]}]}