{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js","mtime":1543486759566},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport compact from 'lodash/compact';\nimport { createSelector } from 'reselect';\n\nvar getNodeSelectedMeta = function getNodeSelectedMeta(selectedMapDimension, node, selectedResizeByLabel, visibleNode) {\n  if (!node.meta || selectedMapDimension === null) {\n    return null;\n  }\n\n  var meta = node.meta[selectedMapDimension];\n\n  if (meta && meta.name !== selectedResizeByLabel) {\n    return meta;\n  }\n\n  if (meta && visibleNode && visibleNode.quant && meta.rawValue !== visibleNode.quant && NODE_ENV_DEV === true) {\n    // See https://basecamp.com/1756858/projects/12498794/todos/312319406\n    console.warn('Attempting to show different values two dimensions with the same name.', \"ResizeBy: \".concat(selectedResizeByLabel, \" with value \").concat(visibleNode.quant), \"Map layer: \".concat(meta.name, \" with value \").concat(meta.rawValue));\n  }\n\n  return null;\n};\n\nvar getNodesData = function getNodesData(nodesIds, visibleNodes, nodesDict, nodesDictWithMeta, selectedMapDimensions, selectedResizeBy) {\n  if (!nodesIds || !visibleNodes || !nodesDict) {\n    return [];\n  }\n\n  return nodesIds.map(function (nodeId) {\n    var visibleNode = visibleNodes.find(function (node) {\n      return node.id === nodeId;\n    });\n    var node = {}; // get_nodes might still be loading at this point, in this case just skip adding metadata\n\n    if (nodesDictWithMeta) {\n      node = Object.assign(node, nodesDictWithMeta[nodeId]); // add metas from the map layers to the selected nodes data\n\n      node.selectedMetas = compact([getNodeSelectedMeta(selectedMapDimensions[0], node, selectedResizeBy.label, visibleNode), getNodeSelectedMeta(selectedMapDimensions[1], node, selectedResizeBy.label, visibleNode)]);\n    }\n\n    if (visibleNode) {\n      node = Object.assign(node, visibleNode);\n    } else if (nodesDict[nodeId]) {\n      node = Object.assign(node, nodesDict[nodeId]);\n    }\n\n    return node;\n  });\n};\n\nvar getNodesGeoIds = function getNodesGeoIds(nodesData) {\n  return nodesData.filter(function (node) {\n    return node.isGeo === true && typeof node.geoId !== 'undefined' && node.geoId !== null;\n  }).map(function (node) {\n    return node.geoId;\n  });\n};\n\nvar getSelectedNodesIds = function getSelectedNodesIds(state) {\n  return state.selectedNodesIds;\n};\n\nvar getHighlightedNodesIds = function getHighlightedNodesIds(state) {\n  return state.highlightedNodesIds;\n};\n\nvar getVisibleNodes = function getVisibleNodes(state) {\n  return state.visibleNodes;\n};\n\nvar getNodesDictWithMeta = function getNodesDictWithMeta(state) {\n  return state.nodesDictWithMeta;\n};\n\nvar getSelectedMapDimensions = function getSelectedMapDimensions(state) {\n  return state.selectedMapDimensions;\n};\n\nvar getSelectedResizeBy = function getSelectedResizeBy(state) {\n  return state.selectedResizeBy;\n};\n\nvar getNodesDict = function getNodesDict(state) {\n  return state.nodesDict;\n};\n\nvar getChoropleth = function getChoropleth(state) {\n  return state.choropleth;\n};\n\nexport var getSelectedNodesData = createSelector([getSelectedNodesIds, getVisibleNodes, getNodesDict, getNodesDictWithMeta, getSelectedMapDimensions, getSelectedResizeBy], getNodesData);\nexport var getSelectedNodesGeoIds = createSelector([getSelectedNodesData], getNodesGeoIds);\nexport var getSelectedNodesColumnsPos = createSelector([getSelectedNodesData], function (selectedNodesData) {\n  return selectedNodesData.map(function (node) {\n    return node.columnGroup;\n  });\n});\nexport var getHighlightedNodesData = createSelector([getHighlightedNodesIds, getVisibleNodes, getNodesDict, getNodesDictWithMeta, getSelectedMapDimensions, getSelectedResizeBy], getNodesData);\nexport var getHighlightedNodesGeoIds = createSelector([getHighlightedNodesData], getNodesGeoIds);\nexport var getCurrentHighlightedChoroplethBucket = createSelector([getHighlightedNodesData, getChoropleth], function (highlightedNodesData, choropleth) {\n  if (highlightedNodesData.length === 1 && highlightedNodesData[0].geoId !== null && choropleth !== undefined) {\n    return choropleth[highlightedNodesData[0].geoId] || 'ch-default';\n  }\n\n  return undefined;\n});\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getNodeSelectedMeta, \"getNodeSelectedMeta\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getNodesData, \"getNodesData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getNodesGeoIds, \"getNodesGeoIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedNodesIds, \"getSelectedNodesIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getHighlightedNodesIds, \"getHighlightedNodesIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getVisibleNodes, \"getVisibleNodes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getNodesDictWithMeta, \"getNodesDictWithMeta\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedMapDimensions, \"getSelectedMapDimensions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedResizeBy, \"getSelectedResizeBy\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getNodesDict, \"getNodesDict\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getChoropleth, \"getChoropleth\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedNodesData, \"getSelectedNodesData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedNodesGeoIds, \"getSelectedNodesGeoIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getSelectedNodesColumnsPos, \"getSelectedNodesColumnsPos\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getHighlightedNodesData, \"getHighlightedNodesData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getHighlightedNodesGeoIds, \"getHighlightedNodesGeoIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  reactHotLoader.register(getCurrentHighlightedChoroplethBucket, \"getCurrentHighlightedChoroplethBucket\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/tool/tool.selectors.js"],"names":["getNodeSelectedMeta","node","selectedMapDimension","meta","visibleNode","NODE_ENV_DEV","console","getNodesData","Object","nodesDictWithMeta","compact","selectedMapDimensions","selectedResizeBy","nodesDict","getNodesGeoIds","getSelectedNodesIds","state","getHighlightedNodesIds","getVisibleNodes","getNodesDictWithMeta","getSelectedMapDimensions","getSelectedResizeBy","getNodesDict","getChoropleth","getSelectedNodesData","createSelector","getSelectedNodesGeoIds","getSelectedNodesColumnsPos","getHighlightedNodesData","getHighlightedNodesGeoIds","getCurrentHighlightedChoroplethBucket","highlightedNodesData","choropleth"],"mappings":"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","sourcesContent":["import compact from 'lodash/compact';\nimport { createSelector } from 'reselect';\n\nconst getNodeSelectedMeta = (selectedMapDimension, node, selectedResizeByLabel, visibleNode) => {\n  if (!node.meta || selectedMapDimension === null) {\n    return null;\n  }\n  const meta = node.meta[selectedMapDimension];\n  if (meta && meta.name !== selectedResizeByLabel) {\n    return meta;\n  }\n  if (\n    meta &&\n    visibleNode &&\n    visibleNode.quant &&\n    meta.rawValue !== visibleNode.quant &&\n    NODE_ENV_DEV === true\n  ) {\n    // See https://basecamp.com/1756858/projects/12498794/todos/312319406\n    console.warn(\n      'Attempting to show different values two dimensions with the same name.',\n      `ResizeBy: ${selectedResizeByLabel} with value ${visibleNode.quant}`,\n      `Map layer: ${meta.name} with value ${meta.rawValue}`\n    );\n  }\n  return null;\n};\n\nconst getNodesData = (\n  nodesIds,\n  visibleNodes,\n  nodesDict,\n  nodesDictWithMeta,\n  selectedMapDimensions,\n  selectedResizeBy\n) => {\n  if (!nodesIds || !visibleNodes || !nodesDict) {\n    return [];\n  }\n\n  return nodesIds.map(nodeId => {\n    const visibleNode = visibleNodes.find(node => node.id === nodeId);\n    let node = {};\n\n    // get_nodes might still be loading at this point, in this case just skip adding metadata\n    if (nodesDictWithMeta) {\n      node = Object.assign(node, nodesDictWithMeta[nodeId]);\n      // add metas from the map layers to the selected nodes data\n      node.selectedMetas = compact([\n        getNodeSelectedMeta(selectedMapDimensions[0], node, selectedResizeBy.label, visibleNode),\n        getNodeSelectedMeta(selectedMapDimensions[1], node, selectedResizeBy.label, visibleNode)\n      ]);\n    }\n\n    if (visibleNode) {\n      node = Object.assign(node, visibleNode);\n    } else if (nodesDict[nodeId]) {\n      node = Object.assign(node, nodesDict[nodeId]);\n    }\n\n    return node;\n  });\n};\nconst getNodesGeoIds = nodesData =>\n  nodesData\n    .filter(node => node.isGeo === true && typeof node.geoId !== 'undefined' && node.geoId !== null)\n    .map(node => node.geoId);\n\nconst getSelectedNodesIds = state => state.selectedNodesIds;\nconst getHighlightedNodesIds = state => state.highlightedNodesIds;\nconst getVisibleNodes = state => state.visibleNodes;\nconst getNodesDictWithMeta = state => state.nodesDictWithMeta;\nconst getSelectedMapDimensions = state => state.selectedMapDimensions;\nconst getSelectedResizeBy = state => state.selectedResizeBy;\nconst getNodesDict = state => state.nodesDict;\nconst getChoropleth = state => state.choropleth;\n\nexport const getSelectedNodesData = createSelector(\n  [\n    getSelectedNodesIds,\n    getVisibleNodes,\n    getNodesDict,\n    getNodesDictWithMeta,\n    getSelectedMapDimensions,\n    getSelectedResizeBy\n  ],\n  getNodesData\n);\n\nexport const getSelectedNodesGeoIds = createSelector([getSelectedNodesData], getNodesGeoIds);\n\nexport const getSelectedNodesColumnsPos = createSelector(\n  [getSelectedNodesData],\n  selectedNodesData => selectedNodesData.map(node => node.columnGroup)\n);\n\nexport const getHighlightedNodesData = createSelector(\n  [\n    getHighlightedNodesIds,\n    getVisibleNodes,\n    getNodesDict,\n    getNodesDictWithMeta,\n    getSelectedMapDimensions,\n    getSelectedResizeBy\n  ],\n  getNodesData\n);\n\nexport const getHighlightedNodesGeoIds = createSelector([getHighlightedNodesData], getNodesGeoIds);\n\nexport const getCurrentHighlightedChoroplethBucket = createSelector(\n  [getHighlightedNodesData, getChoropleth],\n  (highlightedNodesData, choropleth) => {\n    if (\n      highlightedNodesData.length === 1 &&\n      highlightedNodesData[0].geoId !== null &&\n      choropleth !== undefined\n    ) {\n      return choropleth[highlightedNodesData[0].geoId] || 'ch-default';\n    }\n\n    return undefined;\n  }\n);\n"]}]}