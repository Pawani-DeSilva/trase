{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js","mtime":1543486759570},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport chroma from 'chroma-js';\nimport compact from 'lodash/compact';\nimport filter from 'lodash/filter';\nimport { CHOROPLETH_COLORS, CHOROPLETH_CLASS_ZERO } from 'constants';\n\nvar _shortenTitle = function _shortenTitle(title) {\n  if (title.length < 50) {\n    return title;\n  }\n\n  return [title.slice(0, 34), title.slice(-12)].join('(â€¦)');\n};\n\nvar generateColorScale = function generateColorScale(baseColorScale, length) {\n  if (length === baseColorScale.length) return baseColorScale;\n  return chroma.scale(baseColorScale).colors(length);\n};\n\nvar _default = function _default(selectedMapDimensionsUids, nodesDictWithMeta, mapDimensions) {\n  var uids = compact(selectedMapDimensionsUids);\n\n  if (!uids.length || !mapDimensions.length) {\n    return {\n      choropleth: {},\n      choroplethLegend: null\n    };\n  }\n\n  var selectedMapDimensions = uids.map(function (uid) {\n    return mapDimensions.find(function (dimension) {\n      return dimension.uid === uid;\n    });\n  });\n  var selectedMapDimension = selectedMapDimensions[0];\n  var uid = uids[0];\n  var uidB = uids[1];\n  var isBivariate = selectedMapDimensions.length === 2;\n  var isEmpty = selectedMapDimensions.length === 0;\n  var bucket = selectedMapDimensions.map(function (d) {\n    return isBivariate ? _toConsumableArray(d.dualLayerBuckets) : _toConsumableArray(d.singleLayerBuckets);\n  });\n  var colors = isBivariate ? CHOROPLETH_COLORS.bidimensional : generateColorScale(CHOROPLETH_COLORS[selectedMapDimension.colorScale] || CHOROPLETH_COLORS.red, bucket[0].length + 1);\n  var geoNodes = filter(nodesDictWithMeta, function (node) {\n    return node.geoId !== undefined && node.geoId !== null && node.isGeo;\n  });\n  var geoNodesIds = Object.keys(geoNodes);\n  var choropleth = {};\n  var choroplethLegend = {\n    colors: colors,\n    isBivariate: isBivariate,\n    titles: selectedMapDimensions.map(function (d) {\n      return _shortenTitle(d.name);\n    }),\n    bucket: bucket\n  };\n  geoNodesIds.forEach(function (nodeId) {\n    var node = geoNodes[nodeId];\n    var color = CHOROPLETH_COLORS.default_fill;\n\n    if (isEmpty) {\n      color = CHOROPLETH_COLORS.default_fill;\n    } else if (!node.meta) {\n      color = CHOROPLETH_COLORS.error_no_metadata; // no metadata on this node has been found (something missing in get_nodes)\n    } else {\n      var colorIndex;\n\n      if (isBivariate) {\n        var nodeMetaA = node.meta[uid];\n        var nodeMetaB = node.meta[uidB];\n\n        if (!nodeMetaA || !nodeMetaB) {\n          color = CHOROPLETH_COLORS.error_no_metadata_for_layer;\n        } else {\n          var valueA = nodeMetaA.dualLayerBucket;\n          var valueB = nodeMetaB.dualLayerBucket; // use zero class only when both A and B values are zero\n\n          if (valueA === 0 || valueB === 0) {\n            color = CHOROPLETH_CLASS_ZERO;\n          } else {\n            color = colors[Math.max(0, valueB - 1)][Math.max(0, valueA - 1)];\n          }\n        }\n      } else {\n        var nodeMeta = node.meta[uid];\n\n        if (!nodeMeta) {\n          color = CHOROPLETH_COLORS.error_no_metadata_for_layer; // no metadata on this node has been found for this layer\n        } else {\n          var value = nodeMeta.singleLayerBucket;\n\n          if (value === 0) {\n            color = CHOROPLETH_CLASS_ZERO;\n          } else {\n            colorIndex = Math.max(0, value - 1);\n            color = colors[colorIndex];\n          }\n        }\n      }\n    }\n\n    choropleth[node.geoId] = color;\n  });\n  return {\n    choropleth: choropleth,\n    choroplethLegend: choroplethLegend\n  };\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_toConsumableArray, \"_toConsumableArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(_nonIterableSpread, \"_nonIterableSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(_iterableToArray, \"_iterableToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(_arrayWithoutHoles, \"_arrayWithoutHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(_shortenTitle, \"_shortenTitle\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(generateColorScale, \"generateColorScale\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/getChoropleth.js"],"names":["_shortenTitle","title","generateColorScale","length","baseColorScale","chroma","uids","compact","mapDimensions","choropleth","choroplethLegend","selectedMapDimensions","dimension","selectedMapDimension","uid","uidB","isBivariate","isEmpty","bucket","d","colors","CHOROPLETH_COLORS","geoNodes","filter","node","geoNodesIds","Object","titles","color","nodeMetaA","nodeMetaB","valueA","valueB","Math","nodeMeta","value","colorIndex"],"mappings":"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","sourcesContent":["import chroma from 'chroma-js';\nimport compact from 'lodash/compact';\nimport filter from 'lodash/filter';\nimport { CHOROPLETH_COLORS, CHOROPLETH_CLASS_ZERO } from 'constants';\n\nconst _shortenTitle = title => {\n  if (title.length < 50) {\n    return title;\n  }\n  return [title.slice(0, 34), title.slice(-12)].join('(â€¦)');\n};\n\nconst generateColorScale = (baseColorScale, length) => {\n  if (length === baseColorScale.length) return baseColorScale;\n  return chroma.scale(baseColorScale).colors(length);\n};\n\nexport default function(selectedMapDimensionsUids, nodesDictWithMeta, mapDimensions) {\n  const uids = compact(selectedMapDimensionsUids);\n\n  if (!uids.length || !mapDimensions.length) {\n    return {\n      choropleth: {},\n      choroplethLegend: null\n    };\n  }\n\n  const selectedMapDimensions = uids.map(uid =>\n    mapDimensions.find(dimension => dimension.uid === uid)\n  );\n  const selectedMapDimension = selectedMapDimensions[0];\n  const uid = uids[0];\n  const uidB = uids[1];\n  const isBivariate = selectedMapDimensions.length === 2;\n  const isEmpty = selectedMapDimensions.length === 0;\n\n  const bucket = selectedMapDimensions.map(\n    d => (isBivariate ? [...d.dualLayerBuckets] : [...d.singleLayerBuckets])\n  );\n\n  const colors = isBivariate\n    ? CHOROPLETH_COLORS.bidimensional\n    : generateColorScale(\n        CHOROPLETH_COLORS[selectedMapDimension.colorScale] || CHOROPLETH_COLORS.red,\n        bucket[0].length + 1\n      );\n\n  const geoNodes = filter(\n    nodesDictWithMeta,\n    node => node.geoId !== undefined && node.geoId !== null && node.isGeo\n  );\n  const geoNodesIds = Object.keys(geoNodes);\n  const choropleth = {};\n\n  const choroplethLegend = {\n    colors,\n    isBivariate,\n    titles: selectedMapDimensions.map(d => _shortenTitle(d.name)),\n    bucket\n  };\n\n  geoNodesIds.forEach(nodeId => {\n    const node = geoNodes[nodeId];\n    let color = CHOROPLETH_COLORS.default_fill;\n\n    if (isEmpty) {\n      color = CHOROPLETH_COLORS.default_fill;\n    } else if (!node.meta) {\n      color = CHOROPLETH_COLORS.error_no_metadata; // no metadata on this node has been found (something missing in get_nodes)\n    } else {\n      let colorIndex;\n\n      if (isBivariate) {\n        const nodeMetaA = node.meta[uid];\n        const nodeMetaB = node.meta[uidB];\n\n        if (!nodeMetaA || !nodeMetaB) {\n          color = CHOROPLETH_COLORS.error_no_metadata_for_layer;\n        } else {\n          const valueA = nodeMetaA.dualLayerBucket;\n          const valueB = nodeMetaB.dualLayerBucket;\n\n          // use zero class only when both A and B values are zero\n          if (valueA === 0 || valueB === 0) {\n            color = CHOROPLETH_CLASS_ZERO;\n          } else {\n            color = colors[Math.max(0, valueB - 1)][Math.max(0, valueA - 1)];\n          }\n        }\n      } else {\n        const nodeMeta = node.meta[uid];\n        if (!nodeMeta) {\n          color = CHOROPLETH_COLORS.error_no_metadata_for_layer; // no metadata on this node has been found for this layer\n        } else {\n          const value = nodeMeta.singleLayerBucket;\n          if (value === 0) {\n            color = CHOROPLETH_CLASS_ZERO;\n          } else {\n            colorIndex = Math.max(0, value - 1);\n            color = colors[colorIndex];\n          }\n        }\n      }\n    }\n\n    choropleth[node.geoId] = color;\n  });\n\n  return { choropleth, choroplethLegend };\n}\n"]}]}