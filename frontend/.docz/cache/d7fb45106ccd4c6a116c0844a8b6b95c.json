{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js","mtime":1548424841349},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { getURLFromParams, GET_ALL_NODES_URL, GET_INDICATORS_URL } from 'utils/getURLFromParams';\nexport var LOAD_EXPORTERS = 'LOAD_EXPORTERS';\nexport var LOAD_CONSUMPTION_COUNTRIES = 'LOAD_CONSUMPTION_COUNTRIES';\nexport var LOAD_INDICATORS = 'LOAD_INDICATORS';\nexport function loadContextNodes(contextId) {\n  return function (dispatch) {\n    var allNodesURL = getURLFromParams(GET_ALL_NODES_URL, {\n      context_id: contextId\n    });\n    var indicatorsURL = getURLFromParams(GET_INDICATORS_URL, {\n      context_id: contextId\n    });\n    Promise.all([allNodesURL, indicatorsURL].map(function (url) {\n      return fetch(url).then(function (resp) {\n        return resp.text();\n      });\n    })).then(function (rawPayload) {\n      var payload = {\n        nodes: JSON.parse(rawPayload[0]).data,\n        indicators: JSON.parse(rawPayload[1]).indicators\n      };\n      var flowNodes = payload.nodes.filter(function (node) {\n        return node.hasFlows === true;\n      });\n      var exporters = flowNodes.filter(function (node) {\n        return node.type === 'EXPORTER';\n      });\n      var consumptionCountries = flowNodes.filter(function (node) {\n        return node.type === 'COUNTRY';\n      });\n      var indicators = payload.indicators;\n      dispatch({\n        type: LOAD_EXPORTERS,\n        exporters: exporters\n      });\n      dispatch({\n        type: LOAD_CONSUMPTION_COUNTRIES,\n        consumptionCountries: consumptionCountries\n      });\n      dispatch({\n        type: LOAD_INDICATORS,\n        indicators: indicators\n      });\n    });\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(LOAD_EXPORTERS, \"LOAD_EXPORTERS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js\");\n  reactHotLoader.register(LOAD_CONSUMPTION_COUNTRIES, \"LOAD_CONSUMPTION_COUNTRIES\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js\");\n  reactHotLoader.register(LOAD_INDICATORS, \"LOAD_INDICATORS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js\");\n  reactHotLoader.register(loadContextNodes, \"loadContextNodes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/data.actions.js"],"names":["LOAD_EXPORTERS","LOAD_CONSUMPTION_COUNTRIES","LOAD_INDICATORS","allNodesURL","getURLFromParams","context_id","contextId","indicatorsURL","Promise","resp","payload","nodes","JSON","rawPayload","indicators","flowNodes","node","exporters","consumptionCountries","dispatch","type"],"mappings":";;;;;;AAAA,SAAA,gBAAA,EAAA,iBAAA,EAAA,kBAAA,QAAA,wBAAA;AAEA,OAAO,IAAMA,cAAc,GAApB,gBAAA;AACP,OAAO,IAAMC,0BAA0B,GAAhC,4BAAA;AACP,OAAO,IAAMC,eAAe,GAArB,iBAAA;AAEP,OAAO,SAAA,gBAAA,CAAA,SAAA,EAAqC;AAC1C,SAAO,UAAA,QAAA,EAAY;AACjB,QAAMC,WAAW,GAAGC,gBAAgB,CAAA,iBAAA,EAAoB;AAAEC,MAAAA,UAAU,EAAEC;AAAd,KAApB,CAApC;AACA,QAAMC,aAAa,GAAGH,gBAAgB,CAAA,kBAAA,EAAqB;AAAEC,MAAAA,UAAU,EAAEC;AAAd,KAArB,CAAtC;AAEAE,IAAAA,OAAO,CAAPA,GAAAA,CAAY,CAAA,WAAA,EAAA,aAAA,EAAA,GAAA,CAAiC,UAAA,GAAA,EAAG;AAAA,aAAI,KAAK,CAAL,GAAK,CAAL,CAAA,IAAA,CAAgB,UAAA,IAAA,EAAI;AAAA,eAAIC,IAAI,CAAR,IAAIA,EAAJ;AAAxB,OAAI,CAAJ;AAAhDD,KAAY,CAAZA,EAAAA,IAAAA,CACE,UAAA,UAAA,EAAc;AACZ,UAAME,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAEC,IAAI,CAAJA,KAAAA,CAAWC,UAAU,CAArBD,CAAqB,CAArBA,EADO,IAAA;AAEdE,QAAAA,UAAU,EAAEF,IAAI,CAAJA,KAAAA,CAAWC,UAAU,CAArBD,CAAqB,CAArBA,EAA0BE;AAFxB,OAAhB;AAKA,UAAMC,SAAS,GAAG,OAAO,CAAP,KAAA,CAAA,MAAA,CAAqB,UAAA,IAAA,EAAI;AAAA,eAAIC,IAAI,CAAJA,QAAAA,KAAJ,IAAA;AAA3C,OAAkB,CAAlB;AACA,UAAMC,SAAS,GAAG,SAAS,CAAT,MAAA,CAAiB,UAAA,IAAA,EAAI;AAAA,eAAID,IAAI,CAAJA,IAAAA,KAAJ,UAAA;AAAvC,OAAkB,CAAlB;AACA,UAAME,oBAAoB,GAAG,SAAS,CAAT,MAAA,CAAiB,UAAA,IAAA,EAAI;AAAA,eAAIF,IAAI,CAAJA,IAAAA,KAAJ,SAAA;AAAlD,OAA6B,CAA7B;AARY,UASJF,UATI,GASWJ,OATX,CAAA,UAAA;AAWZS,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EADG,cAAA;AAEPH,QAAAA,SAAS,EAATA;AAFO,OAAD,CAARE;AAKAA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EADG,0BAAA;AAEPF,QAAAA,oBAAoB,EAApBA;AAFO,OAAD,CAARC;AAKAA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EADG,eAAA;AAEPN,QAAAA,UAAU,EAAVA;AAFO,OAAD,CAARK;AAtBJX,KAAAA;AAJF,GAAA;AAiCD;;;;;;;;;;;;0BAtCYR,c;0BACAC,0B;0BACAC,e;0BAEN,gB","sourcesContent":["import { getURLFromParams, GET_ALL_NODES_URL, GET_INDICATORS_URL } from 'utils/getURLFromParams';\n\nexport const LOAD_EXPORTERS = 'LOAD_EXPORTERS';\nexport const LOAD_CONSUMPTION_COUNTRIES = 'LOAD_CONSUMPTION_COUNTRIES';\nexport const LOAD_INDICATORS = 'LOAD_INDICATORS';\n\nexport function loadContextNodes(contextId) {\n  return dispatch => {\n    const allNodesURL = getURLFromParams(GET_ALL_NODES_URL, { context_id: contextId });\n    const indicatorsURL = getURLFromParams(GET_INDICATORS_URL, { context_id: contextId });\n\n    Promise.all([allNodesURL, indicatorsURL].map(url => fetch(url).then(resp => resp.text()))).then(\n      rawPayload => {\n        const payload = {\n          nodes: JSON.parse(rawPayload[0]).data,\n          indicators: JSON.parse(rawPayload[1]).indicators\n        };\n\n        const flowNodes = payload.nodes.filter(node => node.hasFlows === true);\n        const exporters = flowNodes.filter(node => node.type === 'EXPORTER');\n        const consumptionCountries = flowNodes.filter(node => node.type === 'COUNTRY');\n        const { indicators } = payload;\n\n        dispatch({\n          type: LOAD_EXPORTERS,\n          exporters\n        });\n\n        dispatch({\n          type: LOAD_CONSUMPTION_COUNTRIES,\n          consumptionCountries\n        });\n\n        dispatch({\n          type: LOAD_INDICATORS,\n          indicators\n        });\n      }\n    );\n  };\n}\n"]}]}