{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js","mtime":1548840716957},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable camelcase */\n\n\nimport { getURLFromParams, GET_TOP_NODES_URL } from 'utils/getURLFromParams';\nexport var EXPLORE__SET_TOP_NODES = 'EXPLORE__SET_TOP_NODES';\nexport var EXPLORE__SET_TOP_NODES_LOADING = 'EXPLORE__SET_TOP_NODES_LOADING';\nexport var EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE = 'EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE';\nexport var getTopNodesKey = function getTopNodesKey(ctx, col, start, end) {\n  return ctx && col && start && end ? \"CTX\".concat(ctx, \"_COL\").concat(col, \"_START\").concat(start, \"_END\").concat(end) : null;\n};\nexport var setExploreTopNodes = function setExploreTopNodes(columnType) {\n  return function (dispatch, getState) {\n    if (!columnType) return null;\n    var state = getState();\n    var selectedContext = state.app.selectedContext;\n    var columnId;\n\n    switch (columnType) {\n      case 'exporter':\n        columnId = selectedContext.worldMap.exporterColumnId;\n        break;\n\n      case 'country':\n        columnId = selectedContext.worldMap.countryColumnId;\n        break;\n\n      default:\n        columnId = null;\n        break;\n    }\n\n    if (!columnType) {\n      console.warn(\"Column type set to \".concat(columnType, \" but no matching column id was found on context data.\"));\n      return null;\n    }\n\n    var _state$app$selectedYe = _slicedToArray(state.app.selectedYears, 2),\n        start_year = _state$app$selectedYe[0],\n        end_year = _state$app$selectedYe[1];\n\n    var topNodes = state.explore.topNodes;\n    var params = {\n      start_year: start_year,\n      end_year: end_year,\n      column_id: columnId,\n      context_id: selectedContext.id\n    };\n    var topNodesKey = getTopNodesKey(selectedContext.id, columnType, start_year, end_year);\n\n    if (!topNodes[topNodesKey]) {\n      dispatch({\n        type: EXPLORE__SET_TOP_NODES_LOADING,\n        payload: {\n          topNodesKey: topNodesKey,\n          loading: true\n        }\n      });\n    }\n\n    var url = getURLFromParams(GET_TOP_NODES_URL, params);\n    return !topNodes[topNodesKey] && fetch(url).then(function (res) {\n      return res.ok ? res.json() : Promise.reject(res.statusText);\n    }).then(function (res) {\n      return dispatch({\n        type: EXPLORE__SET_TOP_NODES,\n        payload: {\n          topNodesKey: topNodesKey,\n          columnType: columnType,\n          data: res.data,\n          country: selectedContext.countryName\n        }\n      });\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  };\n};\nexport var setSelectedTableColumnType = function setSelectedTableColumnType(columnType) {\n  return {\n    type: EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE,\n    payload: {\n      columnType: columnType\n    }\n  };\n};\nexport var setExploreTopNodesLoading = function setExploreTopNodesLoading(loading) {\n  return {\n    type: EXPLORE__SET_TOP_NODES_LOADING,\n    payload: {\n      loading: loading\n    }\n  };\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_slicedToArray, \"_slicedToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(_nonIterableRest, \"_nonIterableRest\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(_iterableToArrayLimit, \"_iterableToArrayLimit\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(_arrayWithHoles, \"_arrayWithHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(EXPLORE__SET_TOP_NODES, \"EXPLORE__SET_TOP_NODES\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(EXPLORE__SET_TOP_NODES_LOADING, \"EXPLORE__SET_TOP_NODES_LOADING\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE, \"EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(getTopNodesKey, \"getTopNodesKey\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(setExploreTopNodes, \"setExploreTopNodes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(setSelectedTableColumnType, \"setSelectedTableColumnType\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  reactHotLoader.register(setExploreTopNodesLoading, \"setExploreTopNodesLoading\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/explore/explore.actions.js"],"names":["EXPLORE__SET_TOP_NODES","EXPLORE__SET_TOP_NODES_LOADING","EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE","getTopNodesKey","ctx","setExploreTopNodes","state","getState","selectedContext","columnId","console","start_year","end_year","topNodes","params","column_id","context_id","id","topNodesKey","dispatch","type","payload","loading","url","getURLFromParams","res","Promise","columnType","data","country","countryName","setSelectedTableColumnType","setExploreTopNodesLoading"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport { getURLFromParams, GET_TOP_NODES_URL } from 'utils/getURLFromParams';\n\nexport const EXPLORE__SET_TOP_NODES = 'EXPLORE__SET_TOP_NODES';\nexport const EXPLORE__SET_TOP_NODES_LOADING = 'EXPLORE__SET_TOP_NODES_LOADING';\nexport const EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE = 'EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE';\n\nexport const getTopNodesKey = (ctx, col, start, end) =>\n  ctx && col && start && end ? `CTX${ctx}_COL${col}_START${start}_END${end}` : null;\n\nexport const setExploreTopNodes = columnType => (dispatch, getState) => {\n  if (!columnType) return null;\n\n  const state = getState();\n  const { selectedContext } = state.app;\n  let columnId;\n\n  switch (columnType) {\n    case 'exporter':\n      columnId = selectedContext.worldMap.exporterColumnId;\n      break;\n    case 'country':\n      columnId = selectedContext.worldMap.countryColumnId;\n      break;\n    default:\n      columnId = null;\n      break;\n  }\n\n  if (!columnType) {\n    console.warn(\n      `Column type set to ${columnType} but no matching column id was found on context data.`\n    );\n    return null;\n  }\n\n  const {\n    selectedYears: [start_year, end_year]\n  } = state.app;\n  const { topNodes } = state.explore;\n  const params = {\n    start_year,\n    end_year,\n    column_id: columnId,\n    context_id: selectedContext.id\n  };\n  const topNodesKey = getTopNodesKey(selectedContext.id, columnType, start_year, end_year);\n  if (!topNodes[topNodesKey]) {\n    dispatch({\n      type: EXPLORE__SET_TOP_NODES_LOADING,\n      payload: { topNodesKey, loading: true }\n    });\n  }\n  const url = getURLFromParams(GET_TOP_NODES_URL, params);\n\n  return (\n    !topNodes[topNodesKey] &&\n    fetch(url)\n      .then(res => (res.ok ? res.json() : Promise.reject(res.statusText)))\n      .then(res =>\n        dispatch({\n          type: EXPLORE__SET_TOP_NODES,\n          payload: {\n            topNodesKey,\n            columnType,\n            data: res.data,\n            country: selectedContext.countryName\n          }\n        })\n      )\n      .catch(error => console.error(error))\n  );\n};\n\nexport const setSelectedTableColumnType = columnType => ({\n  type: EXPLORE__SET_SELECTED_TABLE_COLUMN_TYPE,\n  payload: { columnType }\n});\n\nexport const setExploreTopNodesLoading = loading => ({\n  type: EXPLORE__SET_TOP_NODES_LOADING,\n  payload: { loading }\n});\n"]}]}