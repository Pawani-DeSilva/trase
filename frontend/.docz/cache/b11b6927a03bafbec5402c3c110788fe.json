{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js","mtime":1548840716951},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable no-use-before-define */\n\n\nimport { feature as topojsonFeature } from 'topojson';\nimport { CARTO_NAMED_MAPS_BASE_URL, NUM_NODES_DETAILED, NUM_NODES_EXPANDED, NUM_NODES_SUMMARY, YEARS_INCOMPLETE, YEARS_DISABLED_UNAVAILABLE } from 'constants';\nimport { GET_ALL_NODES_URL, GET_COLUMNS_URL, GET_FLOWS_URL, GET_LINKED_GEO_IDS_URL, GET_MAP_BASE_DATA_URL, GET_NODE_ATTRIBUTES_URL, getURLFromParams } from 'utils/getURLFromParams';\nimport contextLayersCarto from 'named-maps/tool_named_maps_carto';\nimport getNodeIdFromGeoId from 'actions/helpers/getNodeIdFromGeoId';\nimport setGeoJSONMeta from 'actions/helpers/setGeoJSONMeta';\nimport getNodeMetaUid from 'reducers/helpers/getNodeMetaUid';\nimport { getSingleMapDimensionWarning } from 'reducers/helpers/getMapDimensionsWarnings';\nimport isNodeColumnVisible from 'utils/isNodeColumnVisible';\nimport difference from 'lodash/difference';\nimport intesection from 'lodash/intersection';\nimport compact from 'lodash/compact';\nimport uniq from 'lodash/uniq';\nimport isEmpty from 'lodash/isEmpty';\nimport xor from 'lodash/xor';\nimport { getCurrentContext } from 'reducers/helpers/contextHelper';\nimport { getSelectedNodesColumnsPos } from 'react-components/tool/tool.selectors';\nimport pSettle from 'p-settle';\nexport var RESET_SELECTION = 'RESET_SELECTION';\nexport var GET_COLUMNS = 'GET_COLUMNS';\nexport var RESET_TOOL_LOADERS = 'RESET_TOOL_LOADERS';\nexport var SET_FLOWS_LOADING_STATE = 'SET_FLOWS_LOADING_STATE';\nexport var SET_MAP_LOADING_STATE = 'SET_MAP_LOADING_STATE';\nexport var GET_LINKS = 'GET_LINKS';\nexport var SET_NODE_ATTRIBUTES = 'SET_NODE_ATTRIBUTES';\nexport var SET_MAP_DIMENSIONS_DATA = 'SET_MAP_DIMENSIONS_DATA';\nexport var UPDATE_NODE_SELECTION = 'UPDATE_NODE_SELECTION';\nexport var HIGHLIGHT_NODE = 'HIGHLIGHT_NODE';\nexport var FILTER_LINKS_BY_NODES = 'FILTER_LINKS_BY_NODES';\nexport var SELECT_BIOME_FILTER = 'SELECT_BIOME_FILTER';\nexport var SELECT_YEARS = 'SELECT_YEARS';\nexport var SELECT_RESIZE_BY = 'SELECT_RESIZE_BY';\nexport var SELECT_RECOLOR_BY = 'SELECT_RECOLOR_BY';\nexport var SELECT_VIEW = 'SELECT_VIEW';\nexport var SELECT_COLUMN = 'SELECT_COLUMN';\nexport var GET_MAP_VECTOR_DATA = 'GET_MAP_VECTOR_DATA';\nexport var GET_CONTEXT_LAYERS = 'GET_CONTEXT_LAYERS';\nexport var SET_MAP_DIMENSIONS_SELECTION = 'SET_MAP_DIMENSIONS_SELECTION';\nexport var TOGGLE_MAP_DIMENSION = 'TOGGLE_MAP_DIMENSION';\nexport var SELECT_CONTEXTUAL_LAYERS = 'SELECT_CONTEXTUAL_LAYERS';\nexport var SELECT_BASEMAP = 'SELECT_BASEMAP';\nexport var TOGGLE_MAP = 'TOGGLE_MAP';\nexport var EXPAND_NODE_SELECTION = 'EXPAND_NODE_SELECTION';\nexport var COLLAPSE_NODE_SELECTION = 'COLLAPSE_NODE_SELECTION';\nexport var GET_LINKED_GEOIDS = 'GET_LINKED_GEOIDS';\nexport var SAVE_MAP_VIEW = 'SAVE_MAP_VIEW';\nexport var TOGGLE_MAP_SIDEBAR_GROUP = 'TOGGLE_MAP_SIDEBAR_GROUP';\nexport var SHOW_LINKS_ERROR = 'SHOW_LINKS_ERROR';\nexport var RESET_TOOL_STATE = 'RESET_TOOL_STATE';\nexport var SET_SANKEY_SEARCH_VISIBILITY = 'SET_SANKEY_SEARCH_VISIBILITY';\n\nvar _reloadLinks = function _reloadLinks(param, value, type) {\n  var reloadLinks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (dispatch) {\n    var action = {\n      type: type\n    };\n    action[param] = value;\n    dispatch(action);\n\n    if (reloadLinks) {\n      dispatch(loadLinks());\n    }\n  };\n};\n\nvar _setRecolorByAction = function _setRecolorByAction(recolorBy, state) {\n  var selectedRecolorBy;\n\n  if (recolorBy.value === 'none') {\n    selectedRecolorBy = {\n      type: 'none',\n      name: 'none'\n    };\n  } else {\n    var currentContext = getCurrentContext(state);\n    selectedRecolorBy = currentContext.recolorBy.find(function (contextRecolorBy) {\n      return contextRecolorBy.name === recolorBy.name;\n    });\n  }\n\n  return {\n    type: SELECT_RECOLOR_BY,\n    payload: selectedRecolorBy\n  };\n};\n\nvar _setResizeByAction = function _setResizeByAction(resizeByName, state) {\n  var selectedResizeBy;\n\n  if (resizeByName === 'none') {\n    selectedResizeBy = {\n      name: 'none'\n    };\n  } else {\n    var currentContext = getCurrentContext(state);\n    selectedResizeBy = currentContext.resizeBy.find(function (contextResizeBy) {\n      return contextResizeBy.name === resizeByName;\n    });\n  }\n\n  return {\n    type: SELECT_RESIZE_BY,\n    payload: selectedResizeBy\n  };\n};\n\nvar _setBiomeFilterAction = function _setBiomeFilterAction(biomeFilterName, state) {\n  var selectedBiomeFilter;\n\n  if (biomeFilterName === 'none') {\n    selectedBiomeFilter = {\n      value: 'none',\n      name: 'none'\n    };\n  } else {\n    var currentContext = getCurrentContext(state);\n    selectedBiomeFilter = Object.assign({}, currentContext.filterBy[0].nodes.find(function (filterBy) {\n      return filterBy.name === biomeFilterName;\n    }));\n    selectedBiomeFilter.geoId = state.tool.nodesDict[selectedBiomeFilter.nodeId].geoId;\n  }\n\n  return {\n    type: SELECT_BIOME_FILTER,\n    payload: selectedBiomeFilter\n  };\n};\n\nexport function selectView(detailedView, reloadLinks) {\n  return _reloadLinks('detailedView', detailedView, SELECT_VIEW, reloadLinks);\n}\nexport function resetState() {\n  var refilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return function (dispatch) {\n    dispatch({\n      type: RESET_SELECTION\n    });\n\n    if (refilter === true) {\n      dispatch({\n        type: FILTER_LINKS_BY_NODES\n      });\n    }\n\n    selectView(false, true);\n    dispatch(loadLinks());\n  };\n} // Resets sankey's params that may lead to no flows being returned from the API\n\nexport function resetSankey() {\n  return function (dispatch, getState) {\n    var _getState$tool = getState().tool,\n        columns = _getState$tool.columns,\n        expandedNodesIds = _getState$tool.expandedNodesIds;\n    var _getState$app = getState().app,\n        contexts = _getState$app.contexts,\n        selectedContext = _getState$app.selectedContext;\n    var areNodesExpanded = !isEmpty(expandedNodesIds);\n    var currentContext = contexts.find(function (context) {\n      return context.id === selectedContext.id;\n    });\n    var defaultColumns = columns.filter(function (column) {\n      return column.isDefault;\n    });\n    var defaultResizeBy = currentContext && currentContext.resizeBy.find(function (resizeBy) {\n      return resizeBy.isDefault;\n    });\n    var defaultRecolorBy = currentContext && currentContext.recolorBy.find(function (recolorBy) {\n      return recolorBy.isDefault;\n    });\n    dispatch({\n      type: SELECT_YEARS,\n      years: [currentContext.defaultYear, currentContext.defaultYear]\n    });\n    defaultColumns.forEach(function (defaultColumn) {\n      dispatch({\n        type: SELECT_COLUMN,\n        columnIndex: defaultColumn.group,\n        columnId: defaultColumn.id\n      });\n    });\n\n    if (areNodesExpanded) {\n      dispatch(collapseNodeSelection());\n    }\n\n    dispatch({\n      type: SELECT_VIEW,\n      detailedView: false,\n      forcedOverview: true\n    });\n    var state = getState();\n\n    if (defaultRecolorBy) {\n      dispatch(_setRecolorByAction({\n        value: defaultRecolorBy[0].name\n      }, state));\n    } else {\n      dispatch(_setRecolorByAction({\n        value: 'none'\n      }, state));\n    }\n\n    dispatch(_setResizeByAction(defaultResizeBy.name, state));\n    dispatch({\n      type: RESET_SELECTION\n    });\n    dispatch({\n      type: FILTER_LINKS_BY_NODES\n    });\n    dispatch(loadLinks());\n  };\n}\nexport function selectBiomeFilter(biomeFilter) {\n  return function (dispatch, getState) {\n    dispatch(_setBiomeFilterAction(biomeFilter, getState()));\n    dispatch(loadLinks());\n  };\n}\nexport function selectResizeBy(resizeByName) {\n  return function (dispatch, getState) {\n    dispatch(_setResizeByAction(resizeByName, getState()));\n    dispatch(loadLinks());\n  };\n}\nexport function selectRecolorBy(recolorBy) {\n  return function (dispatch, getState) {\n    dispatch(_setRecolorByAction(recolorBy, getState()));\n    dispatch(loadLinks());\n  };\n}\nexport function selectColumn(columnIndex, columnId) {\n  var reloadLinks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (dispatch, getState) {\n    var state = getState(); // Action triggered but the column is already present - do nothing\n\n    if (state.tool.selectedColumnsIds.indexOf(columnId) !== -1) {\n      return;\n    }\n\n    dispatch({\n      type: SELECT_COLUMN,\n      columnIndex: columnIndex,\n      columnId: columnId\n    });\n    var selectedNodesIds = getSelectedNodeIdsNotInColumnIndex(state.tool.selectedNodesIds, columnIndex, state.tool.nodesDict);\n    dispatch(updateNodes(selectedNodesIds));\n    var selectedColumn = state.tool.columns.find(function (c) {\n      return c.id === columnId;\n    });\n\n    if (selectedColumn && selectedColumn.group === 0 && selectedColumn.isChoroplethDisabled) {\n      dispatch(setMapDimensions([null, null]));\n      state.tool.expandedMapSidebarGroupsIds.forEach(function (id) {\n        return dispatch(toggleMapSidebarGroup(id));\n      });\n    }\n\n    dispatch({\n      type: FILTER_LINKS_BY_NODES\n    });\n\n    if (reloadLinks) {\n      dispatch(loadLinks());\n    }\n  };\n}\nexport function loadToolDataForCurrentContext() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (!state.app.selectedContext) {\n      return;\n    }\n\n    var params = {\n      context_id: state.app.selectedContext.id\n    };\n    var allNodesURL = getURLFromParams(GET_ALL_NODES_URL, params);\n    var columnsURL = getURLFromParams(GET_COLUMNS_URL, params);\n    var promises = [allNodesURL, columnsURL].map(function (url) {\n      return fetch(url).then(function (resp) {\n        return resp.json();\n      });\n    });\n    Promise.all(promises).then(function (payload) {\n      // TODO do not wait for end of all promises/use another .all call\n      dispatch({\n        type: GET_COLUMNS,\n        payload: payload\n      });\n      dispatch(loadLinks());\n      dispatch(loadNodes());\n      dispatch(loadMapVectorData());\n    });\n  };\n}\nexport function loadNodes() {\n  return function (dispatch, getState) {\n    var params = {\n      context_id: getState().app.selectedContext.id,\n      start_year: getState().app.selectedYears[0],\n      end_year: getState().app.selectedYears[1]\n    };\n    var getMapBaseDataURL = getURLFromParams(GET_MAP_BASE_DATA_URL, params);\n    var selectedMapDimensions = getState().tool.selectedMapDimensions;\n    fetch(getMapBaseDataURL).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(response.statusText));\n    }).then(function (jsonPayload) {\n      var payload = {\n        mapDimensionsMetaJSON: jsonPayload\n      };\n\n      var _getState$app$selecte = _slicedToArray(getState().app.selectedYears, 2),\n          startYear = _getState$app$selecte[0],\n          endYear = _getState$app$selecte[1];\n\n      var allSelectedYears = Array(endYear - startYear + 1).fill(startYear).map(function (year, index) {\n        return year + index;\n      });\n      payload.mapDimensionsMetaJSON.dimensions.forEach(function (dimension) {\n        var allYearsCovered = dimension.years === null || dimension.years.length === 0 || allSelectedYears.every(function (year) {\n          return dimension.years.includes(year);\n        });\n        var yearsWithDataToDisplay = intesection(dimension.years, allSelectedYears);\n\n        if (!allYearsCovered && allSelectedYears.length > 1 && yearsWithDataToDisplay.length > 0) {\n          dimension.disabledYearRangeReason = YEARS_INCOMPLETE;\n          dimension.disabledYearRangeReasonText = getSingleMapDimensionWarning(dimension.disabledYearRangeReason, yearsWithDataToDisplay, dimension.years);\n        } else if (!allYearsCovered) {\n          dimension.disabledYearRangeReason = YEARS_DISABLED_UNAVAILABLE;\n          dimension.disabledYearRangeReasonText = getSingleMapDimensionWarning(dimension.disabledYearRangeReason, yearsWithDataToDisplay, dimension.years);\n        }\n      });\n      dispatch(setMapContextLayers(payload.mapDimensionsMetaJSON.contextualLayers));\n      dispatch({\n        type: SET_MAP_DIMENSIONS_DATA,\n        payload: payload\n      });\n      var selectedBiomeFilter = getState().tool.selectedBiomeFilter;\n\n      if (selectedBiomeFilter && selectedBiomeFilter.nodeId) {\n        dispatch(_setBiomeFilterAction(selectedBiomeFilter.name, getState()));\n      }\n\n      var allAvailableMapDimensionsUids = payload.mapDimensionsMetaJSON.dimensions.map(function (dimension) {\n        return getNodeMetaUid(dimension.type, dimension.layerAttributeId);\n      });\n      var selectedMapDimensionsSet = compact(selectedMapDimensions); // are all currently selected map dimensions available ?\n\n      if (selectedMapDimensionsSet.length > 0 && difference(selectedMapDimensionsSet, allAvailableMapDimensionsUids).length === 0) {\n        dispatch(setMapDimensions(selectedMapDimensions.concat([])));\n      } else {\n        // use default map dimensions\n        var defaultMapDimensions = payload.mapDimensionsMetaJSON.dimensions.filter(function (dimension) {\n          return dimension.isDefault;\n        });\n\n        if (defaultMapDimensions !== undefined) {\n          var uids = defaultMapDimensions.map(function (selectedDimension) {\n            return getNodeMetaUid(selectedDimension.type, selectedDimension.layerAttributeId);\n          });\n          if (uids[0] === undefined) uids[0] = null;\n          if (uids[1] === undefined) uids[1] = null;\n          dispatch(setMapDimensions(uids));\n        }\n      }\n    });\n  };\n}\nexport function loadLinks() {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch({\n      type: SET_FLOWS_LOADING_STATE,\n      payload: {\n        loadedFlowsContextId: state.app.selectedContext.id\n      }\n    });\n    var params = {\n      context_id: state.app.selectedContext.id,\n      start_year: state.app.selectedYears[0],\n      end_year: state.app.selectedYears[1],\n      include_columns: state.tool.selectedColumnsIds.join(','),\n      flow_quant: state.tool.selectedResizeBy.name,\n      locked_nodes: state.tool.selectedNodesIds\n    };\n    var areNodesExpanded = !isEmpty(state.tool.expandedNodesIds);\n\n    if (state.tool.detailedView === true) {\n      params.n_nodes = NUM_NODES_DETAILED;\n    } else if (areNodesExpanded) {\n      params.n_nodes = NUM_NODES_EXPANDED;\n    } else {\n      params.n_nodes = NUM_NODES_SUMMARY;\n    }\n\n    if (state.tool.selectedRecolorBy) {\n      if (state.tool.selectedRecolorBy.type === 'qual') {\n        params.flow_qual = state.tool.selectedRecolorBy.name;\n      } else if (state.tool.selectedRecolorBy.type === 'ind') {\n        params.flow_ind = state.tool.selectedRecolorBy.name;\n      }\n    }\n\n    var selectedBiomeFilter = state.tool.selectedBiomeFilter;\n\n    if (selectedBiomeFilter && selectedBiomeFilter.name && selectedBiomeFilter.name !== 'none') {\n      params.biome_filter_id = selectedBiomeFilter.nodeId;\n    }\n\n    if (areNodesExpanded) {\n      params.selected_nodes = state.tool.expandedNodesIds.join(',');\n    }\n\n    var url = getURLFromParams(GET_FLOWS_URL, params);\n    fetch(url).then(function (response) {\n      if (response.status === 404) {\n        return null;\n      }\n\n      return response.json();\n    }).then(function (jsonPayload) {\n      if (jsonPayload.data === undefined || !jsonPayload.data.length) {\n        console.error('server returned empty flows/link list, with params:', params);\n        dispatch({\n          type: SHOW_LINKS_ERROR\n        });\n        return;\n      }\n\n      dispatch({\n        type: GET_LINKS,\n        jsonPayload: jsonPayload\n      }); // if nodes were expanded and some of expanded nodes are not present anymore\n      // re-expand nodes\n\n      if (!isEmpty(difference(getState().tool.expandedNodesIds, getState().tool.selectedNodesIds))) {\n        dispatch(expandNodeSelection());\n      }\n\n      if (!isEmpty(getState().tool.selectedNodesIds)) {\n        dispatch({\n          type: FILTER_LINKS_BY_NODES\n        });\n      } // load related geoIds to show on the map\n\n\n      dispatch(loadLinkedGeoIDs());\n    }).catch(console.error);\n  };\n}\nexport function loadMapVectorData() {\n  return function (dispatch, getState) {\n    var geoColumns = getState().tool.columns.filter(function (column) {\n      return column.isGeo === true;\n    });\n    var vectorMaps = geoColumns.map(function (geoColumn) {\n      var vectorData = {\n        id: geoColumn.id,\n        name: geoColumn.name,\n        useGeometryFromColumnId: geoColumn.useGeometryFromColumnId\n      };\n\n      if (geoColumn.useGeometryFromColumnId === undefined) {\n        var countryName = getState().app.selectedContext.countryName;\n        var vectorLayerURL = \"vector_layers/\".concat(countryName, \"_\").concat(geoColumn.name.replace(/ /g, '_'), \".topo.json\");\n        return fetch(vectorLayerURL).then(function (res) {\n          return res.json();\n        }).then(function (topoJSON) {\n          var key = Object.keys(topoJSON.objects)[0];\n          var geoJSON = topojsonFeature(topoJSON, topoJSON.objects[key]);\n          setGeoJSONMeta(geoJSON, getState().tool.nodesDict, getState().tool.geoIdsDict, geoColumn.id);\n          return _objectSpread({\n            geoJSON: geoJSON\n          }, vectorData);\n        }).catch(function () {\n          return Promise.reject(vectorLayerURL);\n        });\n      }\n\n      return Promise.resolve(vectorData);\n    });\n    pSettle(vectorMaps).then(function (results) {\n      var mapVectorData = results.map(function (res) {\n        if (res.isFulfilled && !res.isRejected) {\n          return _objectSpread({}, res.value, {\n            isPoint: !!res.value.geoJSON && !!res.value.geoJSON.features.length && res.value.geoJSON.features[0].geometry.type === 'Point'\n          });\n        }\n\n        console.warn('missing vector layer file', res.reason);\n        return null;\n      }).filter(function (item) {\n        return item !== null;\n      });\n      dispatch({\n        type: GET_MAP_VECTOR_DATA,\n        mapVectorData: mapVectorData\n      });\n    });\n  };\n}\nexport function resetContextLayers() {\n  return function (dispatch) {\n    dispatch({\n      type: GET_CONTEXT_LAYERS,\n      mapContextualLayers: []\n    });\n    dispatch({\n      type: SELECT_CONTEXTUAL_LAYERS,\n      contextualLayers: []\n    });\n  };\n}\nexport function setMapContextLayers(contextualLayers) {\n  return function (dispatch, getState) {\n    var mapContextualLayers = contextualLayers.map(function (layer) {\n      var contextLayer = Object.assign({}, layer);\n\n      if (!NAMED_MAPS_ENV || !contextLayersCarto[NAMED_MAPS_ENV]) {\n        console.error('Invalid or missing NAMED_MAPS_ENV is preventing contextual layer loading.');\n        return {};\n      }\n\n      var cartoIds = contextLayersCarto[NAMED_MAPS_ENV][layer.identifier]; // TODO: implement multi-year support\n\n      var cartoData = layer.cartoLayers[0];\n\n      if (!cartoData.rasterUrl && cartoIds) {\n        contextLayer.cartoURL = \"\".concat(CARTO_NAMED_MAPS_BASE_URL).concat(cartoIds.uid, \"/jsonp?callback=cb\");\n        contextLayer.layergroupid = cartoIds.layergroupid;\n      }\n\n      return contextLayer;\n    });\n    resetContextLayers();\n    Promise.all(mapContextualLayers.filter(function (l) {\n      return l.cartoURL;\n    }).map(function (l) {\n      return fetch(l.cartoURL).then(function (resp) {\n        return resp.text();\n      });\n    })).then(function () {\n      // we actually don't care about layergroupids because we already have them pregenerated\n      // this is just about reinstanciating named maps, you know, because CARTO\n      dispatch({\n        type: GET_CONTEXT_LAYERS,\n        mapContextualLayers: mapContextualLayers\n      });\n\n      if (typeof contextualLayers !== 'undefined' && contextualLayers.length) {\n        dispatch({\n          type: GET_CONTEXT_LAYERS,\n          mapContextualLayers: mapContextualLayers\n        });\n        var selectedMapContextualLayers = getState().tool.selectedMapContextualLayers;\n\n        if (typeof selectedMapContextualLayers !== 'undefined' && selectedMapContextualLayers.length) {\n          dispatch({\n            type: SELECT_CONTEXTUAL_LAYERS,\n            contextualLayers: selectedMapContextualLayers\n          });\n        }\n      }\n    });\n  };\n} // Get a list of selected node that are NOT part of the given column index\n\nfunction getSelectedNodeIdsNotInColumnIndex(currentSelectedNodesIds, columnIndex, nodesDict) {\n  return currentSelectedNodesIds.filter(function (nodeId) {\n    return nodesDict[nodeId].columnGroup !== columnIndex;\n  });\n} // remove or add nodeIds from selectedNodesIds\n\n\nfunction getSelectedNodeIds(currentSelectedNodesIds, changedNodeIds) {\n  return xor(currentSelectedNodesIds, changedNodeIds);\n}\n\nexport function selectNode(param) {\n  var isAggregated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ids = Array.isArray(param) ? param : [param];\n  return function (dispatch, getState) {\n    ids.forEach(function (nodeId) {\n      var _getState$tool2 = getState().tool,\n          currentSelectedNodesIds = _getState$tool2.selectedNodesIds,\n          expandedNodesIds = _getState$tool2.expandedNodesIds;\n      var areNodesExpanded = !isEmpty(expandedNodesIds);\n\n      if (isAggregated) {\n        dispatch(setSankeySearchVisibility(true));\n      } else {\n        // we are unselecting the node that is currently expanded: just shrink it and bail\n        if (areNodesExpanded && currentSelectedNodesIds.length === 1 && currentSelectedNodesIds.indexOf(nodeId) > -1) {\n          dispatch(collapseNodeSelection());\n        }\n\n        var selectedNodesIds = getSelectedNodeIds(currentSelectedNodesIds, [nodeId]); // send to state the new node selection\n\n        dispatch(updateNodes(selectedNodesIds)); // refilter links by selected nodes\n\n        dispatch({\n          type: FILTER_LINKS_BY_NODES\n        });\n      }\n    });\n\n    if (!isAggregated) {\n      // load related geoIds to show on the map\n      return dispatch(loadLinkedGeoIDs());\n    }\n\n    return undefined;\n  };\n}\nexport function updateNodes(selectedNodesIds) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NODE_SELECTION,\n      ids: selectedNodesIds\n    });\n  };\n}\nexport function setSankeySearchVisibility(searchVisibility) {\n  return function (dispatch) {\n    return dispatch({\n      type: SET_SANKEY_SEARCH_VISIBILITY,\n      searchVisibility: searchVisibility\n    });\n  };\n}\nexport function selectNodeFromGeoId(geoId) {\n  return function (dispatch, getState) {\n    var nodeId = getNodeIdFromGeoId(geoId, getState().tool.nodesDict, getState().tool.selectedColumnsIds[0]); // node not in visible Nodes ---> expand node (same behavior as search)\n\n    if (nodeId !== null) {\n      dispatch(selectExpandedNode(nodeId));\n    }\n  };\n}\nexport function selectExpandedNode(param) {\n  var ids = Array.isArray(param) ? param : [param];\n  return function (dispatch, getState) {\n    var hasInvisibleNodes = ids.some(function (elem) {\n      return !_isNodeVisible(getState, elem);\n    });\n\n    if (hasInvisibleNodes) {\n      var _getState = getState(),\n          tool = _getState.tool;\n\n      if (tool.selectedNodesIds.length === ids.length && intesection(tool.selectedNodesIds, ids).length === ids.length) {\n        dispatch(resetState());\n      } else {\n        var nodes = ids.map(function (nodeId) {\n          if (!tool.nodesDict[nodeId]) {\n            console.warn(\"requested node \".concat(nodeId, \" does not exist in nodesDict\"));\n          }\n\n          return tool.nodesDict[nodeId];\n        });\n        nodes.forEach(function (node) {\n          if (!isNodeColumnVisible(node, tool.selectedColumnsIds)) {\n            dispatch(selectColumn(node.columnGroup, node.columnId, false));\n          }\n        });\n        var currentSelectedNodesIds = getState().tool.selectedNodesIds;\n        var selectedNodesIds = getSelectedNodeIds(currentSelectedNodesIds, ids);\n        dispatch(updateNodes(selectedNodesIds));\n        dispatch(expandNodeSelection());\n      }\n    } else {\n      dispatch(selectNode(ids, false));\n    }\n  };\n}\nexport function highlightNode(nodeId, isAggregated, coordinates) {\n  return function (dispatch) {\n    if (isAggregated) {\n      return;\n    }\n\n    dispatch({\n      ids: compact([nodeId]),\n      type: HIGHLIGHT_NODE,\n      coordinates: coordinates\n    });\n  };\n}\nexport function highlightNodeFromGeoId(geoId, coordinates) {\n  return function (dispatch, getState) {\n    var _getState$tool3 = getState().tool,\n        nodesDict = _getState$tool3.nodesDict,\n        selectedColumnsIds = _getState$tool3.selectedColumnsIds,\n        highlightedNodesIds = _getState$tool3.highlightedNodesIds;\n    var nodeId = getNodeIdFromGeoId(geoId, nodesDict, selectedColumnsIds[0]);\n\n    if (nodeId === null) {\n      if (highlightedNodesIds.length) {\n        dispatch(highlightNode(null));\n      }\n    } else {\n      dispatch(highlightNode(nodeId, false, coordinates));\n    }\n  };\n}\nexport function expandNodeSelection() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: EXPAND_NODE_SELECTION\n    });\n    var detailedView = getState().tool.detailedView; // if expanding, and if in detailed mode, toggle to overview mode\n\n    if (detailedView) {\n      dispatch({\n        type: SELECT_VIEW,\n        detailedView: false,\n        forcedOverview: true\n      });\n    }\n\n    dispatch(loadLinks());\n  };\n}\nexport function collapseNodeSelection() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: COLLAPSE_NODE_SELECTION\n    });\n    var forcedOverview = getState().tool.forcedOverview; // if shrinking, and if overview was previously forced, go back to detailed\n\n    if (forcedOverview) {\n      dispatch({\n        type: SELECT_VIEW,\n        detailedView: true,\n        forcedOverview: false\n      });\n    }\n\n    dispatch(loadLinks());\n  };\n}\nexport function navigateToProfile(nodeId, year, contextId) {\n  return function (dispatch, getState) {\n    var node = getState().tool.nodesDict[nodeId];\n    dispatch({\n      type: 'profileNode',\n      payload: {\n        query: {\n          nodeId: nodeId,\n          year: year,\n          contextId: contextId\n        },\n        profileType: node.profileType\n      }\n    });\n  };\n}\nexport function loadLinkedGeoIDs() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var selectedNodesIds = state.tool.selectedNodesIds; // when selection only contains geo nodes (column 0), we should not call get_linked_geoids\n\n    var selectedNodesColumnsPos = getSelectedNodesColumnsPos(state.tool);\n    var selectedNonGeoNodeIds = selectedNodesIds.filter(function (nodeId, index) {\n      return selectedNodesColumnsPos[index] !== 0;\n    });\n\n    if (selectedNonGeoNodeIds.length === 0) {\n      dispatch({\n        type: GET_LINKED_GEOIDS,\n        payload: []\n      });\n      return undefined;\n    }\n\n    var params = {\n      context_id: state.app.selectedContext.id,\n      years: uniq([state.app.selectedYears[0], state.app.selectedYears[1]]),\n      nodes_ids: selectedNodesIds,\n      target_column_id: state.tool.selectedColumnsIds[0]\n    };\n    var url = getURLFromParams(GET_LINKED_GEO_IDS_URL, params);\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status >= 200 && xhr.status < 400) {\n        dispatch({\n          type: GET_LINKED_GEOIDS,\n          payload: JSON.parse(xhr.response)\n        });\n      }\n    };\n\n    xhr.send();\n    return xhr;\n  };\n}\nexport function saveMapView(latlng, zoom) {\n  return {\n    type: SAVE_MAP_VIEW,\n    latlng: latlng,\n    zoom: zoom\n  };\n}\nexport function toggleMapDimension(uid) {\n  return function (dispatch, getState) {\n    var selectedYears = getState().app.selectedYears;\n    dispatch({\n      type: TOGGLE_MAP_DIMENSION,\n      payload: {\n        uid: uid,\n        selectedYears: selectedYears\n      }\n    });\n    loadMapChoropeth(getState, dispatch);\n  };\n}\nexport function setMapDimensions(uids) {\n  return function (dispatch, getState) {\n    var selectedYears = getState().app.selectedYears;\n    dispatch({\n      type: SET_MAP_DIMENSIONS_SELECTION,\n      payload: {\n        uids: uids,\n        selectedYears: selectedYears\n      }\n    });\n    loadMapChoropeth(getState, dispatch);\n  };\n}\nexport function loadMapChoropeth(getState, dispatch) {\n  var state = getState();\n  var uids = state.tool.selectedMapDimensions;\n\n  if (compact(uids).length === 0) {\n    dispatch({\n      type: SET_NODE_ATTRIBUTES\n    });\n    return;\n  }\n\n  var selectedMapDimensions = compact(uids).map(function (uid) {\n    return state.tool.mapDimensions.find(function (dimension) {\n      return dimension.uid === uid;\n    });\n  });\n  var params = {\n    context_id: state.app.selectedContext.id,\n    start_year: state.app.selectedYears[0],\n    end_year: state.app.selectedYears[1],\n    layer_ids: selectedMapDimensions.map(function (layer) {\n      return layer.id;\n    })\n  };\n  var getNodesURL = getURLFromParams(GET_NODE_ATTRIBUTES_URL, params);\n  fetch(getNodesURL).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(new Error(response.statusText));\n  }).then(function (payload) {\n    dispatch({\n      type: SET_NODE_ATTRIBUTES,\n      payload: payload\n    });\n  });\n}\nexport function selectContextualLayers(contextualLayers) {\n  return {\n    type: SELECT_CONTEXTUAL_LAYERS,\n    contextualLayers: contextualLayers\n  };\n}\nexport function selectMapBasemap(selectedMapBasemap) {\n  return {\n    type: SELECT_BASEMAP,\n    selectedMapBasemap: selectedMapBasemap\n  };\n}\nexport function toggleMapSidebarGroup(id) {\n  return {\n    type: TOGGLE_MAP_SIDEBAR_GROUP,\n    id: parseInt(id, 10)\n  };\n}\n\nvar _isNodeVisible = function _isNodeVisible(getState, nodeId) {\n  return getState().tool.visibleNodes.map(function (node) {\n    return node.id;\n  }).indexOf(nodeId) > -1;\n};\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_slicedToArray, \"_slicedToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_nonIterableRest, \"_nonIterableRest\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_iterableToArrayLimit, \"_iterableToArrayLimit\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_arrayWithHoles, \"_arrayWithHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(RESET_SELECTION, \"RESET_SELECTION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(GET_COLUMNS, \"GET_COLUMNS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(RESET_TOOL_LOADERS, \"RESET_TOOL_LOADERS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_FLOWS_LOADING_STATE, \"SET_FLOWS_LOADING_STATE\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_MAP_LOADING_STATE, \"SET_MAP_LOADING_STATE\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(GET_LINKS, \"GET_LINKS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_NODE_ATTRIBUTES, \"SET_NODE_ATTRIBUTES\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_MAP_DIMENSIONS_DATA, \"SET_MAP_DIMENSIONS_DATA\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(UPDATE_NODE_SELECTION, \"UPDATE_NODE_SELECTION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(HIGHLIGHT_NODE, \"HIGHLIGHT_NODE\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(FILTER_LINKS_BY_NODES, \"FILTER_LINKS_BY_NODES\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_BIOME_FILTER, \"SELECT_BIOME_FILTER\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_YEARS, \"SELECT_YEARS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_RESIZE_BY, \"SELECT_RESIZE_BY\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_RECOLOR_BY, \"SELECT_RECOLOR_BY\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_VIEW, \"SELECT_VIEW\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_COLUMN, \"SELECT_COLUMN\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(GET_MAP_VECTOR_DATA, \"GET_MAP_VECTOR_DATA\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(GET_CONTEXT_LAYERS, \"GET_CONTEXT_LAYERS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_MAP_DIMENSIONS_SELECTION, \"SET_MAP_DIMENSIONS_SELECTION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(TOGGLE_MAP_DIMENSION, \"TOGGLE_MAP_DIMENSION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_CONTEXTUAL_LAYERS, \"SELECT_CONTEXTUAL_LAYERS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SELECT_BASEMAP, \"SELECT_BASEMAP\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(TOGGLE_MAP, \"TOGGLE_MAP\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(EXPAND_NODE_SELECTION, \"EXPAND_NODE_SELECTION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(COLLAPSE_NODE_SELECTION, \"COLLAPSE_NODE_SELECTION\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(GET_LINKED_GEOIDS, \"GET_LINKED_GEOIDS\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SAVE_MAP_VIEW, \"SAVE_MAP_VIEW\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(TOGGLE_MAP_SIDEBAR_GROUP, \"TOGGLE_MAP_SIDEBAR_GROUP\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SHOW_LINKS_ERROR, \"SHOW_LINKS_ERROR\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(RESET_TOOL_STATE, \"RESET_TOOL_STATE\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(SET_SANKEY_SEARCH_VISIBILITY, \"SET_SANKEY_SEARCH_VISIBILITY\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_reloadLinks, \"_reloadLinks\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_setRecolorByAction, \"_setRecolorByAction\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_setResizeByAction, \"_setResizeByAction\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_setBiomeFilterAction, \"_setBiomeFilterAction\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectView, \"selectView\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(resetState, \"resetState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(resetSankey, \"resetSankey\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectBiomeFilter, \"selectBiomeFilter\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectResizeBy, \"selectResizeBy\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectRecolorBy, \"selectRecolorBy\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectColumn, \"selectColumn\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadToolDataForCurrentContext, \"loadToolDataForCurrentContext\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadNodes, \"loadNodes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadLinks, \"loadLinks\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadMapVectorData, \"loadMapVectorData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(resetContextLayers, \"resetContextLayers\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(setMapContextLayers, \"setMapContextLayers\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(getSelectedNodeIdsNotInColumnIndex, \"getSelectedNodeIdsNotInColumnIndex\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(getSelectedNodeIds, \"getSelectedNodeIds\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectNode, \"selectNode\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(updateNodes, \"updateNodes\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(setSankeySearchVisibility, \"setSankeySearchVisibility\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectNodeFromGeoId, \"selectNodeFromGeoId\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectExpandedNode, \"selectExpandedNode\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(highlightNode, \"highlightNode\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(highlightNodeFromGeoId, \"highlightNodeFromGeoId\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(expandNodeSelection, \"expandNodeSelection\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(collapseNodeSelection, \"collapseNodeSelection\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(navigateToProfile, \"navigateToProfile\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadLinkedGeoIDs, \"loadLinkedGeoIDs\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(saveMapView, \"saveMapView\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(toggleMapDimension, \"toggleMapDimension\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(setMapDimensions, \"setMapDimensions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(loadMapChoropeth, \"loadMapChoropeth\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectContextualLayers, \"selectContextualLayers\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(selectMapBasemap, \"selectMapBasemap\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(toggleMapSidebarGroup, \"toggleMapSidebarGroup\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  reactHotLoader.register(_isNodeVisible, \"_isNodeVisible\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/actions/tool.actions.js"],"names":["feature","RESET_SELECTION","GET_COLUMNS","RESET_TOOL_LOADERS","SET_FLOWS_LOADING_STATE","SET_MAP_LOADING_STATE","GET_LINKS","SET_NODE_ATTRIBUTES","SET_MAP_DIMENSIONS_DATA","UPDATE_NODE_SELECTION","HIGHLIGHT_NODE","FILTER_LINKS_BY_NODES","SELECT_BIOME_FILTER","SELECT_YEARS","SELECT_RESIZE_BY","SELECT_RECOLOR_BY","SELECT_VIEW","SELECT_COLUMN","GET_MAP_VECTOR_DATA","GET_CONTEXT_LAYERS","SET_MAP_DIMENSIONS_SELECTION","TOGGLE_MAP_DIMENSION","SELECT_CONTEXTUAL_LAYERS","SELECT_BASEMAP","TOGGLE_MAP","EXPAND_NODE_SELECTION","COLLAPSE_NODE_SELECTION","GET_LINKED_GEOIDS","SAVE_MAP_VIEW","TOGGLE_MAP_SIDEBAR_GROUP","SHOW_LINKS_ERROR","RESET_TOOL_STATE","SET_SANKEY_SEARCH_VISIBILITY","_reloadLinks","reloadLinks","action","type","dispatch","loadLinks","_setRecolorByAction","recolorBy","selectedRecolorBy","name","currentContext","getCurrentContext","contextRecolorBy","payload","_setResizeByAction","resizeByName","selectedResizeBy","contextResizeBy","_setBiomeFilterAction","biomeFilterName","selectedBiomeFilter","value","filterBy","state","refilter","selectView","columns","expandedNodesIds","getState","contexts","selectedContext","areNodesExpanded","isEmpty","context","defaultColumns","column","defaultResizeBy","resizeBy","defaultRecolorBy","years","columnIndex","defaultColumn","columnId","id","collapseNodeSelection","detailedView","forcedOverview","selectedNodesIds","getSelectedNodeIdsNotInColumnIndex","updateNodes","selectedColumn","c","setMapDimensions","toggleMapSidebarGroup","params","context_id","allNodesURL","getURLFromParams","columnsURL","promises","resp","Promise","loadNodes","loadMapVectorData","start_year","end_year","getMapBaseDataURL","selectedMapDimensions","fetch","response","mapDimensionsMetaJSON","jsonPayload","startYear","endYear","allSelectedYears","year","allYearsCovered","dimension","yearsWithDataToDisplay","intesection","getSingleMapDimensionWarning","setMapContextLayers","allAvailableMapDimensionsUids","getNodeMetaUid","selectedMapDimensionsSet","compact","difference","defaultMapDimensions","uids","selectedDimension","loadedFlowsContextId","include_columns","flow_quant","locked_nodes","url","console","expandNodeSelection","loadLinkedGeoIDs","geoColumns","vectorMaps","vectorData","geoColumn","useGeometryFromColumnId","countryName","vectorLayerURL","res","key","Object","topoJSON","geoJSON","topojsonFeature","setGeoJSONMeta","pSettle","mapVectorData","isPoint","item","mapContextualLayers","contextualLayers","contextLayer","contextLayersCarto","cartoIds","layer","cartoData","resetContextLayers","l","selectedMapContextualLayers","nodesDict","xor","isAggregated","ids","Array","currentSelectedNodesIds","setSankeySearchVisibility","getSelectedNodeIds","searchVisibility","nodeId","getNodeIdFromGeoId","selectExpandedNode","hasInvisibleNodes","_isNodeVisible","tool","resetState","nodes","isNodeColumnVisible","selectColumn","node","selectNode","coordinates","selectedColumnsIds","highlightedNodesIds","highlightNode","query","contextId","profileType","selectedNodesColumnsPos","getSelectedNodesColumnsPos","selectedNonGeoNodeIds","uniq","nodes_ids","target_column_id","xhr","XMLHttpRequest","JSON","latlng","zoom","selectedYears","uid","loadMapChoropeth","layer_ids","getNodesURL","selectedMapBasemap","parseInt"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport { feature as topojsonFeature } from 'topojson';\nimport {\n  CARTO_NAMED_MAPS_BASE_URL,\n  NUM_NODES_DETAILED,\n  NUM_NODES_EXPANDED,\n  NUM_NODES_SUMMARY,\n  YEARS_INCOMPLETE,\n  YEARS_DISABLED_UNAVAILABLE\n} from 'constants';\nimport {\n  GET_ALL_NODES_URL,\n  GET_COLUMNS_URL,\n  GET_FLOWS_URL,\n  GET_LINKED_GEO_IDS_URL,\n  GET_MAP_BASE_DATA_URL,\n  GET_NODE_ATTRIBUTES_URL,\n  getURLFromParams\n} from 'utils/getURLFromParams';\nimport contextLayersCarto from 'named-maps/tool_named_maps_carto';\nimport getNodeIdFromGeoId from 'actions/helpers/getNodeIdFromGeoId';\nimport setGeoJSONMeta from 'actions/helpers/setGeoJSONMeta';\nimport getNodeMetaUid from 'reducers/helpers/getNodeMetaUid';\nimport { getSingleMapDimensionWarning } from 'reducers/helpers/getMapDimensionsWarnings';\nimport isNodeColumnVisible from 'utils/isNodeColumnVisible';\nimport difference from 'lodash/difference';\nimport intesection from 'lodash/intersection';\nimport compact from 'lodash/compact';\nimport uniq from 'lodash/uniq';\nimport isEmpty from 'lodash/isEmpty';\nimport xor from 'lodash/xor';\nimport { getCurrentContext } from 'reducers/helpers/contextHelper';\nimport { getSelectedNodesColumnsPos } from 'react-components/tool/tool.selectors';\nimport pSettle from 'p-settle';\n\nexport const RESET_SELECTION = 'RESET_SELECTION';\nexport const GET_COLUMNS = 'GET_COLUMNS';\nexport const RESET_TOOL_LOADERS = 'RESET_TOOL_LOADERS';\nexport const SET_FLOWS_LOADING_STATE = 'SET_FLOWS_LOADING_STATE';\nexport const SET_MAP_LOADING_STATE = 'SET_MAP_LOADING_STATE';\nexport const GET_LINKS = 'GET_LINKS';\nexport const SET_NODE_ATTRIBUTES = 'SET_NODE_ATTRIBUTES';\nexport const SET_MAP_DIMENSIONS_DATA = 'SET_MAP_DIMENSIONS_DATA';\nexport const UPDATE_NODE_SELECTION = 'UPDATE_NODE_SELECTION';\nexport const HIGHLIGHT_NODE = 'HIGHLIGHT_NODE';\nexport const FILTER_LINKS_BY_NODES = 'FILTER_LINKS_BY_NODES';\nexport const SELECT_BIOME_FILTER = 'SELECT_BIOME_FILTER';\nexport const SELECT_YEARS = 'SELECT_YEARS';\nexport const SELECT_RESIZE_BY = 'SELECT_RESIZE_BY';\nexport const SELECT_RECOLOR_BY = 'SELECT_RECOLOR_BY';\nexport const SELECT_VIEW = 'SELECT_VIEW';\nexport const SELECT_COLUMN = 'SELECT_COLUMN';\nexport const GET_MAP_VECTOR_DATA = 'GET_MAP_VECTOR_DATA';\nexport const GET_CONTEXT_LAYERS = 'GET_CONTEXT_LAYERS';\nexport const SET_MAP_DIMENSIONS_SELECTION = 'SET_MAP_DIMENSIONS_SELECTION';\nexport const TOGGLE_MAP_DIMENSION = 'TOGGLE_MAP_DIMENSION';\nexport const SELECT_CONTEXTUAL_LAYERS = 'SELECT_CONTEXTUAL_LAYERS';\nexport const SELECT_BASEMAP = 'SELECT_BASEMAP';\nexport const TOGGLE_MAP = 'TOGGLE_MAP';\nexport const EXPAND_NODE_SELECTION = 'EXPAND_NODE_SELECTION';\nexport const COLLAPSE_NODE_SELECTION = 'COLLAPSE_NODE_SELECTION';\nexport const GET_LINKED_GEOIDS = 'GET_LINKED_GEOIDS';\nexport const SAVE_MAP_VIEW = 'SAVE_MAP_VIEW';\nexport const TOGGLE_MAP_SIDEBAR_GROUP = 'TOGGLE_MAP_SIDEBAR_GROUP';\nexport const SHOW_LINKS_ERROR = 'SHOW_LINKS_ERROR';\nexport const RESET_TOOL_STATE = 'RESET_TOOL_STATE';\nexport const SET_SANKEY_SEARCH_VISIBILITY = 'SET_SANKEY_SEARCH_VISIBILITY';\n\nconst _reloadLinks = (param, value, type, reloadLinks = true) => dispatch => {\n  const action = {\n    type\n  };\n  action[param] = value;\n  dispatch(action);\n  if (reloadLinks) {\n    dispatch(loadLinks());\n  }\n};\n\nconst _setRecolorByAction = (recolorBy, state) => {\n  let selectedRecolorBy;\n  if (recolorBy.value === 'none') {\n    selectedRecolorBy = { type: 'none', name: 'none' };\n  } else {\n    const currentContext = getCurrentContext(state);\n    selectedRecolorBy = currentContext.recolorBy.find(\n      contextRecolorBy => contextRecolorBy.name === recolorBy.name\n    );\n  }\n\n  return {\n    type: SELECT_RECOLOR_BY,\n    payload: selectedRecolorBy\n  };\n};\n\nconst _setResizeByAction = (resizeByName, state) => {\n  let selectedResizeBy;\n  if (resizeByName === 'none') {\n    selectedResizeBy = { name: 'none' };\n  } else {\n    const currentContext = getCurrentContext(state);\n    selectedResizeBy = currentContext.resizeBy.find(\n      contextResizeBy => contextResizeBy.name === resizeByName\n    );\n  }\n\n  return {\n    type: SELECT_RESIZE_BY,\n    payload: selectedResizeBy\n  };\n};\n\nconst _setBiomeFilterAction = (biomeFilterName, state) => {\n  let selectedBiomeFilter;\n  if (biomeFilterName === 'none') {\n    selectedBiomeFilter = { value: 'none', name: 'none' };\n  } else {\n    const currentContext = getCurrentContext(state);\n    selectedBiomeFilter = Object.assign(\n      {},\n      currentContext.filterBy[0].nodes.find(filterBy => filterBy.name === biomeFilterName)\n    );\n    selectedBiomeFilter.geoId = state.tool.nodesDict[selectedBiomeFilter.nodeId].geoId;\n  }\n\n  return {\n    type: SELECT_BIOME_FILTER,\n    payload: selectedBiomeFilter\n  };\n};\n\nexport function selectView(detailedView, reloadLinks) {\n  return _reloadLinks('detailedView', detailedView, SELECT_VIEW, reloadLinks);\n}\n\nexport function resetState(refilter = true) {\n  return dispatch => {\n    dispatch({\n      type: RESET_SELECTION\n    });\n    if (refilter === true) {\n      dispatch({\n        type: FILTER_LINKS_BY_NODES\n      });\n    }\n    selectView(false, true);\n    dispatch(loadLinks());\n  };\n}\n\n// Resets sankey's params that may lead to no flows being returned from the API\nexport function resetSankey() {\n  return (dispatch, getState) => {\n    const { columns, expandedNodesIds } = getState().tool;\n    const { contexts, selectedContext } = getState().app;\n    const areNodesExpanded = !isEmpty(expandedNodesIds);\n    const currentContext = contexts.find(context => context.id === selectedContext.id);\n    const defaultColumns = columns.filter(column => column.isDefault);\n    const defaultResizeBy =\n      currentContext && currentContext.resizeBy.find(resizeBy => resizeBy.isDefault);\n    const defaultRecolorBy =\n      currentContext && currentContext.recolorBy.find(recolorBy => recolorBy.isDefault);\n\n    dispatch({\n      type: SELECT_YEARS,\n      years: [currentContext.defaultYear, currentContext.defaultYear]\n    });\n\n    defaultColumns.forEach(defaultColumn => {\n      dispatch({\n        type: SELECT_COLUMN,\n        columnIndex: defaultColumn.group,\n        columnId: defaultColumn.id\n      });\n    });\n\n    if (areNodesExpanded) {\n      dispatch(collapseNodeSelection());\n    }\n\n    dispatch({\n      type: SELECT_VIEW,\n      detailedView: false,\n      forcedOverview: true\n    });\n\n    const state = getState();\n\n    if (defaultRecolorBy) {\n      dispatch(_setRecolorByAction({ value: defaultRecolorBy[0].name }, state));\n    } else {\n      dispatch(_setRecolorByAction({ value: 'none' }, state));\n    }\n\n    dispatch(_setResizeByAction(defaultResizeBy.name, state));\n\n    dispatch({\n      type: RESET_SELECTION\n    });\n    dispatch({\n      type: FILTER_LINKS_BY_NODES\n    });\n\n    dispatch(loadLinks());\n  };\n}\n\nexport function selectBiomeFilter(biomeFilter) {\n  return (dispatch, getState) => {\n    dispatch(_setBiomeFilterAction(biomeFilter, getState()));\n    dispatch(loadLinks());\n  };\n}\n\nexport function selectResizeBy(resizeByName) {\n  return (dispatch, getState) => {\n    dispatch(_setResizeByAction(resizeByName, getState()));\n    dispatch(loadLinks());\n  };\n}\n\nexport function selectRecolorBy(recolorBy) {\n  return (dispatch, getState) => {\n    dispatch(_setRecolorByAction(recolorBy, getState()));\n    dispatch(loadLinks());\n  };\n}\n\nexport function selectColumn(columnIndex, columnId, reloadLinks = true) {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    // Action triggered but the column is already present - do nothing\n    if (state.tool.selectedColumnsIds.indexOf(columnId) !== -1) {\n      return;\n    }\n\n    dispatch({\n      type: SELECT_COLUMN,\n      columnIndex,\n      columnId\n    });\n    const selectedNodesIds = getSelectedNodeIdsNotInColumnIndex(\n      state.tool.selectedNodesIds,\n      columnIndex,\n      state.tool.nodesDict\n    );\n    dispatch(updateNodes(selectedNodesIds));\n\n    const selectedColumn = state.tool.columns.find(c => c.id === columnId);\n    if (selectedColumn && selectedColumn.group === 0 && selectedColumn.isChoroplethDisabled) {\n      dispatch(setMapDimensions([null, null]));\n      state.tool.expandedMapSidebarGroupsIds.forEach(id => dispatch(toggleMapSidebarGroup(id)));\n    }\n\n    dispatch({\n      type: FILTER_LINKS_BY_NODES\n    });\n\n    if (reloadLinks) {\n      dispatch(loadLinks());\n    }\n  };\n}\n\nexport function loadToolDataForCurrentContext() {\n  return (dispatch, getState) => {\n    const state = getState();\n\n    if (!state.app.selectedContext) {\n      return;\n    }\n\n    const params = {\n      context_id: state.app.selectedContext.id\n    };\n    const allNodesURL = getURLFromParams(GET_ALL_NODES_URL, params);\n    const columnsURL = getURLFromParams(GET_COLUMNS_URL, params);\n    const promises = [allNodesURL, columnsURL].map(url => fetch(url).then(resp => resp.json()));\n\n    Promise.all(promises).then(payload => {\n      // TODO do not wait for end of all promises/use another .all call\n      dispatch({\n        type: GET_COLUMNS,\n        payload\n      });\n\n      dispatch(loadLinks());\n      dispatch(loadNodes());\n      dispatch(loadMapVectorData());\n    });\n  };\n}\n\nexport function loadNodes() {\n  return (dispatch, getState) => {\n    const params = {\n      context_id: getState().app.selectedContext.id,\n      start_year: getState().app.selectedYears[0],\n      end_year: getState().app.selectedYears[1]\n    };\n\n    const getMapBaseDataURL = getURLFromParams(GET_MAP_BASE_DATA_URL, params);\n    const selectedMapDimensions = getState().tool.selectedMapDimensions;\n\n    fetch(getMapBaseDataURL)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error(response.statusText));\n      })\n      .then(jsonPayload => {\n        const payload = {\n          mapDimensionsMetaJSON: jsonPayload\n        };\n\n        const [startYear, endYear] = getState().app.selectedYears;\n        const allSelectedYears = Array(endYear - startYear + 1)\n          .fill(startYear)\n          .map((year, index) => year + index);\n\n        payload.mapDimensionsMetaJSON.dimensions.forEach(dimension => {\n          const allYearsCovered =\n            dimension.years === null ||\n            dimension.years.length === 0 ||\n            allSelectedYears.every(year => dimension.years.includes(year));\n          const yearsWithDataToDisplay = intesection(dimension.years, allSelectedYears);\n          if (\n            !allYearsCovered &&\n            allSelectedYears.length > 1 &&\n            yearsWithDataToDisplay.length > 0\n          ) {\n            dimension.disabledYearRangeReason = YEARS_INCOMPLETE;\n            dimension.disabledYearRangeReasonText = getSingleMapDimensionWarning(\n              dimension.disabledYearRangeReason,\n              yearsWithDataToDisplay,\n              dimension.years\n            );\n          } else if (!allYearsCovered) {\n            dimension.disabledYearRangeReason = YEARS_DISABLED_UNAVAILABLE;\n            dimension.disabledYearRangeReasonText = getSingleMapDimensionWarning(\n              dimension.disabledYearRangeReason,\n              yearsWithDataToDisplay,\n              dimension.years\n            );\n          }\n        });\n\n        dispatch(setMapContextLayers(payload.mapDimensionsMetaJSON.contextualLayers));\n\n        dispatch({\n          type: SET_MAP_DIMENSIONS_DATA,\n          payload\n        });\n\n        const selectedBiomeFilter = getState().tool.selectedBiomeFilter;\n        if (selectedBiomeFilter && selectedBiomeFilter.nodeId) {\n          dispatch(_setBiomeFilterAction(selectedBiomeFilter.name, getState()));\n        }\n\n        const allAvailableMapDimensionsUids = payload.mapDimensionsMetaJSON.dimensions.map(\n          dimension => getNodeMetaUid(dimension.type, dimension.layerAttributeId)\n        );\n        const selectedMapDimensionsSet = compact(selectedMapDimensions);\n\n        // are all currently selected map dimensions available ?\n        if (\n          selectedMapDimensionsSet.length > 0 &&\n          difference(selectedMapDimensionsSet, allAvailableMapDimensionsUids).length === 0\n        ) {\n          dispatch(setMapDimensions(selectedMapDimensions.concat([])));\n        } else {\n          // use default map dimensions\n          const defaultMapDimensions = payload.mapDimensionsMetaJSON.dimensions.filter(\n            dimension => dimension.isDefault\n          );\n          if (defaultMapDimensions !== undefined) {\n            const uids = defaultMapDimensions.map(selectedDimension =>\n              getNodeMetaUid(selectedDimension.type, selectedDimension.layerAttributeId)\n            );\n            if (uids[0] === undefined) uids[0] = null;\n            if (uids[1] === undefined) uids[1] = null;\n            dispatch(setMapDimensions(uids));\n          }\n        }\n      });\n  };\n}\n\nexport function loadLinks() {\n  return (dispatch, getState) => {\n    const state = getState();\n    dispatch({\n      type: SET_FLOWS_LOADING_STATE,\n      payload: { loadedFlowsContextId: state.app.selectedContext.id }\n    });\n    const params = {\n      context_id: state.app.selectedContext.id,\n      start_year: state.app.selectedYears[0],\n      end_year: state.app.selectedYears[1],\n      include_columns: state.tool.selectedColumnsIds.join(','),\n      flow_quant: state.tool.selectedResizeBy.name,\n      locked_nodes: state.tool.selectedNodesIds\n    };\n    const areNodesExpanded = !isEmpty(state.tool.expandedNodesIds);\n\n    if (state.tool.detailedView === true) {\n      params.n_nodes = NUM_NODES_DETAILED;\n    } else if (areNodesExpanded) {\n      params.n_nodes = NUM_NODES_EXPANDED;\n    } else {\n      params.n_nodes = NUM_NODES_SUMMARY;\n    }\n\n    if (state.tool.selectedRecolorBy) {\n      if (state.tool.selectedRecolorBy.type === 'qual') {\n        params.flow_qual = state.tool.selectedRecolorBy.name;\n      } else if (state.tool.selectedRecolorBy.type === 'ind') {\n        params.flow_ind = state.tool.selectedRecolorBy.name;\n      }\n    }\n\n    const selectedBiomeFilter = state.tool.selectedBiomeFilter;\n    if (selectedBiomeFilter && selectedBiomeFilter.name && selectedBiomeFilter.name !== 'none') {\n      params.biome_filter_id = selectedBiomeFilter.nodeId;\n    }\n\n    if (areNodesExpanded) {\n      params.selected_nodes = state.tool.expandedNodesIds.join(',');\n    }\n\n    const url = getURLFromParams(GET_FLOWS_URL, params);\n\n    fetch(url)\n      .then(response => {\n        if (response.status === 404) {\n          return null;\n        }\n        return response.json();\n      })\n      .then(jsonPayload => {\n        if (jsonPayload.data === undefined || !jsonPayload.data.length) {\n          console.error('server returned empty flows/link list, with params:', params);\n          dispatch({\n            type: SHOW_LINKS_ERROR\n          });\n          return;\n        }\n\n        dispatch({\n          type: GET_LINKS,\n          jsonPayload\n        });\n\n        // if nodes were expanded and some of expanded nodes are not present anymore\n        // re-expand nodes\n        if (\n          !isEmpty(difference(getState().tool.expandedNodesIds, getState().tool.selectedNodesIds))\n        ) {\n          dispatch(expandNodeSelection());\n        }\n\n        if (!isEmpty(getState().tool.selectedNodesIds)) {\n          dispatch({\n            type: FILTER_LINKS_BY_NODES\n          });\n        }\n\n        // load related geoIds to show on the map\n        dispatch(loadLinkedGeoIDs());\n      })\n      .catch(console.error);\n  };\n}\n\nexport function loadMapVectorData() {\n  return (dispatch, getState) => {\n    const geoColumns = getState().tool.columns.filter(column => column.isGeo === true);\n\n    const vectorMaps = geoColumns.map(geoColumn => {\n      const vectorData = {\n        id: geoColumn.id,\n        name: geoColumn.name,\n        useGeometryFromColumnId: geoColumn.useGeometryFromColumnId\n      };\n      if (geoColumn.useGeometryFromColumnId === undefined) {\n        const countryName = getState().app.selectedContext.countryName;\n        const vectorLayerURL = `vector_layers/${countryName}_${geoColumn.name.replace(\n          / /g,\n          '_'\n        )}.topo.json`;\n        return fetch(vectorLayerURL)\n          .then(res => res.json())\n          .then(topoJSON => {\n            const key = Object.keys(topoJSON.objects)[0];\n            const geoJSON = topojsonFeature(topoJSON, topoJSON.objects[key]);\n            setGeoJSONMeta(\n              geoJSON,\n              getState().tool.nodesDict,\n              getState().tool.geoIdsDict,\n              geoColumn.id\n            );\n            return {\n              geoJSON,\n              ...vectorData\n            };\n          })\n          .catch(() => Promise.reject(vectorLayerURL));\n      }\n      return Promise.resolve(vectorData);\n    });\n\n    pSettle(vectorMaps).then(results => {\n      const mapVectorData = results\n        .map(res => {\n          if (res.isFulfilled && !res.isRejected) {\n            return {\n              ...res.value,\n              isPoint:\n                !!res.value.geoJSON &&\n                !!res.value.geoJSON.features.length &&\n                res.value.geoJSON.features[0].geometry.type === 'Point'\n            };\n          }\n          console.warn('missing vector layer file', res.reason);\n          return null;\n        })\n        .filter(item => item !== null);\n      dispatch({\n        type: GET_MAP_VECTOR_DATA,\n        mapVectorData\n      });\n    });\n  };\n}\n\nexport function resetContextLayers() {\n  return dispatch => {\n    dispatch({\n      type: GET_CONTEXT_LAYERS,\n      mapContextualLayers: []\n    });\n    dispatch({\n      type: SELECT_CONTEXTUAL_LAYERS,\n      contextualLayers: []\n    });\n  };\n}\n\nexport function setMapContextLayers(contextualLayers) {\n  return (dispatch, getState) => {\n    const mapContextualLayers = contextualLayers.map(layer => {\n      const contextLayer = Object.assign({}, layer);\n      if (!NAMED_MAPS_ENV || !contextLayersCarto[NAMED_MAPS_ENV]) {\n        console.error('Invalid or missing NAMED_MAPS_ENV is preventing contextual layer loading.');\n        return {};\n      }\n      const cartoIds = contextLayersCarto[NAMED_MAPS_ENV][layer.identifier];\n      // TODO: implement multi-year support\n      const cartoData = layer.cartoLayers[0];\n      if (!cartoData.rasterUrl && cartoIds) {\n        contextLayer.cartoURL = `${CARTO_NAMED_MAPS_BASE_URL}${cartoIds.uid}/jsonp?callback=cb`;\n        contextLayer.layergroupid = cartoIds.layergroupid;\n      }\n      return contextLayer;\n    });\n\n    resetContextLayers();\n\n    Promise.all(\n      mapContextualLayers\n        .filter(l => l.cartoURL)\n        .map(l => fetch(l.cartoURL).then(resp => resp.text()))\n    ).then(() => {\n      // we actually don't care about layergroupids because we already have them pregenerated\n      // this is just about reinstanciating named maps, you know, because CARTO\n      dispatch({\n        type: GET_CONTEXT_LAYERS,\n        mapContextualLayers\n      });\n\n      if (typeof contextualLayers !== 'undefined' && contextualLayers.length) {\n        dispatch({\n          type: GET_CONTEXT_LAYERS,\n          mapContextualLayers\n        });\n\n        const { selectedMapContextualLayers } = getState().tool;\n\n        if (\n          typeof selectedMapContextualLayers !== 'undefined' &&\n          selectedMapContextualLayers.length\n        ) {\n          dispatch({\n            type: SELECT_CONTEXTUAL_LAYERS,\n            contextualLayers: selectedMapContextualLayers\n          });\n        }\n      }\n    });\n  };\n}\n\n// Get a list of selected node that are NOT part of the given column index\nfunction getSelectedNodeIdsNotInColumnIndex(currentSelectedNodesIds, columnIndex, nodesDict) {\n  return currentSelectedNodesIds.filter(nodeId => nodesDict[nodeId].columnGroup !== columnIndex);\n}\n\n// remove or add nodeIds from selectedNodesIds\nfunction getSelectedNodeIds(currentSelectedNodesIds, changedNodeIds) {\n  return xor(currentSelectedNodesIds, changedNodeIds);\n}\n\nexport function selectNode(param, isAggregated = false) {\n  const ids = Array.isArray(param) ? param : [param];\n  return (dispatch, getState) => {\n    ids.forEach(nodeId => {\n      const { selectedNodesIds: currentSelectedNodesIds, expandedNodesIds } = getState().tool;\n      const areNodesExpanded = !isEmpty(expandedNodesIds);\n\n      if (isAggregated) {\n        dispatch(setSankeySearchVisibility(true));\n      } else {\n        // we are unselecting the node that is currently expanded: just shrink it and bail\n        if (\n          areNodesExpanded &&\n          currentSelectedNodesIds.length === 1 &&\n          currentSelectedNodesIds.indexOf(nodeId) > -1\n        ) {\n          dispatch(collapseNodeSelection());\n        }\n\n        const selectedNodesIds = getSelectedNodeIds(currentSelectedNodesIds, [nodeId]);\n\n        // send to state the new node selection\n        dispatch(updateNodes(selectedNodesIds));\n\n        // refilter links by selected nodes\n        dispatch({\n          type: FILTER_LINKS_BY_NODES\n        });\n      }\n    });\n    if (!isAggregated) {\n      // load related geoIds to show on the map\n      return dispatch(loadLinkedGeoIDs());\n    }\n    return undefined;\n  };\n}\n\nexport function updateNodes(selectedNodesIds) {\n  return dispatch => {\n    dispatch({\n      type: UPDATE_NODE_SELECTION,\n      ids: selectedNodesIds\n    });\n  };\n}\n\nexport function setSankeySearchVisibility(searchVisibility) {\n  return dispatch =>\n    dispatch({\n      type: SET_SANKEY_SEARCH_VISIBILITY,\n      searchVisibility\n    });\n}\n\nexport function selectNodeFromGeoId(geoId) {\n  return (dispatch, getState) => {\n    const nodeId = getNodeIdFromGeoId(\n      geoId,\n      getState().tool.nodesDict,\n      getState().tool.selectedColumnsIds[0]\n    );\n\n    // node not in visible Nodes ---> expand node (same behavior as search)\n    if (nodeId !== null) {\n      dispatch(selectExpandedNode(nodeId));\n    }\n  };\n}\n\nexport function selectExpandedNode(param) {\n  const ids = Array.isArray(param) ? param : [param];\n  return (dispatch, getState) => {\n    const hasInvisibleNodes = ids.some(elem => !_isNodeVisible(getState, elem));\n\n    if (hasInvisibleNodes) {\n      const { tool } = getState();\n      if (\n        tool.selectedNodesIds.length === ids.length &&\n        intesection(tool.selectedNodesIds, ids).length === ids.length\n      ) {\n        dispatch(resetState());\n      } else {\n        const nodes = ids.map(nodeId => {\n          if (!tool.nodesDict[nodeId]) {\n            console.warn(`requested node ${nodeId} does not exist in nodesDict`);\n          }\n          return tool.nodesDict[nodeId];\n        });\n\n        nodes.forEach(node => {\n          if (!isNodeColumnVisible(node, tool.selectedColumnsIds)) {\n            dispatch(selectColumn(node.columnGroup, node.columnId, false));\n          }\n        });\n\n        const currentSelectedNodesIds = getState().tool.selectedNodesIds;\n        const selectedNodesIds = getSelectedNodeIds(currentSelectedNodesIds, ids);\n\n        dispatch(updateNodes(selectedNodesIds));\n        dispatch(expandNodeSelection());\n      }\n    } else {\n      dispatch(selectNode(ids, false));\n    }\n  };\n}\n\nexport function highlightNode(nodeId, isAggregated, coordinates) {\n  return dispatch => {\n    if (isAggregated) {\n      return;\n    }\n\n    dispatch({\n      ids: compact([nodeId]),\n      type: HIGHLIGHT_NODE,\n      coordinates\n    });\n  };\n}\n\nexport function highlightNodeFromGeoId(geoId, coordinates) {\n  return (dispatch, getState) => {\n    const { nodesDict, selectedColumnsIds, highlightedNodesIds } = getState().tool;\n\n    const nodeId = getNodeIdFromGeoId(geoId, nodesDict, selectedColumnsIds[0]);\n    if (nodeId === null) {\n      if (highlightedNodesIds.length) {\n        dispatch(highlightNode(null));\n      }\n    } else {\n      dispatch(highlightNode(nodeId, false, coordinates));\n    }\n  };\n}\n\nexport function expandNodeSelection() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: EXPAND_NODE_SELECTION\n    });\n\n    const { detailedView } = getState().tool;\n\n    // if expanding, and if in detailed mode, toggle to overview mode\n    if (detailedView) {\n      dispatch({\n        type: SELECT_VIEW,\n        detailedView: false,\n        forcedOverview: true\n      });\n    }\n\n    dispatch(loadLinks());\n  };\n}\n\nexport function collapseNodeSelection() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: COLLAPSE_NODE_SELECTION\n    });\n\n    const { forcedOverview } = getState().tool;\n\n    // if shrinking, and if overview was previously forced, go back to detailed\n    if (forcedOverview) {\n      dispatch({\n        type: SELECT_VIEW,\n        detailedView: true,\n        forcedOverview: false\n      });\n    }\n\n    dispatch(loadLinks());\n  };\n}\n\nexport function navigateToProfile(nodeId, year, contextId) {\n  return (dispatch, getState) => {\n    const node = getState().tool.nodesDict[nodeId];\n    dispatch({\n      type: 'profileNode',\n      payload: { query: { nodeId, year, contextId }, profileType: node.profileType }\n    });\n  };\n}\n\nexport function loadLinkedGeoIDs() {\n  return (dispatch, getState) => {\n    const state = getState();\n    const selectedNodesIds = state.tool.selectedNodesIds;\n\n    // when selection only contains geo nodes (column 0), we should not call get_linked_geoids\n    const selectedNodesColumnsPos = getSelectedNodesColumnsPos(state.tool);\n    const selectedNonGeoNodeIds = selectedNodesIds.filter(\n      (nodeId, index) => selectedNodesColumnsPos[index] !== 0\n    );\n    if (selectedNonGeoNodeIds.length === 0) {\n      dispatch({\n        type: GET_LINKED_GEOIDS,\n        payload: []\n      });\n      return undefined;\n    }\n    const params = {\n      context_id: state.app.selectedContext.id,\n      years: uniq([state.app.selectedYears[0], state.app.selectedYears[1]]),\n      nodes_ids: selectedNodesIds,\n      target_column_id: state.tool.selectedColumnsIds[0]\n    };\n    const url = getURLFromParams(GET_LINKED_GEO_IDS_URL, params);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status >= 200 && xhr.status < 400) {\n        dispatch({\n          type: GET_LINKED_GEOIDS,\n          payload: JSON.parse(xhr.response)\n        });\n      }\n    };\n\n    xhr.send();\n    return xhr;\n  };\n}\n\nexport function saveMapView(latlng, zoom) {\n  return {\n    type: SAVE_MAP_VIEW,\n    latlng,\n    zoom\n  };\n}\n\nexport function toggleMapDimension(uid) {\n  return (dispatch, getState) => {\n    const { selectedYears } = getState().app;\n    dispatch({\n      type: TOGGLE_MAP_DIMENSION,\n      payload: {\n        uid,\n        selectedYears\n      }\n    });\n\n    loadMapChoropeth(getState, dispatch);\n  };\n}\n\nexport function setMapDimensions(uids) {\n  return (dispatch, getState) => {\n    const selectedYears = getState().app.selectedYears;\n    dispatch({\n      type: SET_MAP_DIMENSIONS_SELECTION,\n      payload: {\n        uids,\n        selectedYears\n      }\n    });\n\n    loadMapChoropeth(getState, dispatch);\n  };\n}\n\nexport function loadMapChoropeth(getState, dispatch) {\n  const state = getState();\n\n  const uids = state.tool.selectedMapDimensions;\n\n  if (compact(uids).length === 0) {\n    dispatch({\n      type: SET_NODE_ATTRIBUTES\n    });\n\n    return;\n  }\n\n  const selectedMapDimensions = compact(uids).map(uid =>\n    state.tool.mapDimensions.find(dimension => dimension.uid === uid)\n  );\n\n  const params = {\n    context_id: state.app.selectedContext.id,\n    start_year: state.app.selectedYears[0],\n    end_year: state.app.selectedYears[1],\n    layer_ids: selectedMapDimensions.map(layer => layer.id)\n  };\n\n  const getNodesURL = getURLFromParams(GET_NODE_ATTRIBUTES_URL, params);\n\n  fetch(getNodesURL)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error(response.statusText));\n    })\n    .then(payload => {\n      dispatch({\n        type: SET_NODE_ATTRIBUTES,\n        payload\n      });\n    });\n}\n\nexport function selectContextualLayers(contextualLayers) {\n  return {\n    type: SELECT_CONTEXTUAL_LAYERS,\n    contextualLayers\n  };\n}\n\nexport function selectMapBasemap(selectedMapBasemap) {\n  return {\n    type: SELECT_BASEMAP,\n    selectedMapBasemap\n  };\n}\n\nexport function toggleMapSidebarGroup(id) {\n  return {\n    type: TOGGLE_MAP_SIDEBAR_GROUP,\n    id: parseInt(id, 10)\n  };\n}\n\nconst _isNodeVisible = (getState, nodeId) =>\n  getState()\n    .tool.visibleNodes.map(node => node.id)\n    .indexOf(nodeId) > -1;\n"]}]}