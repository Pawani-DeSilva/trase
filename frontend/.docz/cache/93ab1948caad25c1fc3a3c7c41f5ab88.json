{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js","mtime":1548840708259},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable no-shadow */\nimport connect from 'connect';\nimport MapDimensions from 'components/tool/map-dimensions.component';\nimport { toggleMapSidebarGroup, toggleMapDimension } from 'actions/tool.actions';\nimport { loadTooltip } from 'actions/app.actions';\n\nvar mapMethodsToState = function mapMethodsToState(state) {\n  return {\n    loadMapDimensions: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.mapDimensionsGroups;\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          mapDimensionsGroups: state.tool.mapDimensionsGroups,\n          expandedMapSidebarGroupsIds: state.tool.expandedMapSidebarGroupsIds\n        };\n      }\n    },\n    selectMapDimensions: state.tool.selectedMapDimensions,\n    toggleSidebarGroups: state.tool.expandedMapSidebarGroupsIds,\n    setVisibility: {\n      _comparedValue: function _comparedValue(state) {\n        return state.tool.selectedColumnsIds;\n      },\n      _returnedValue: function _returnedValue(state) {\n        var firstColumnId = state.tool.selectedColumnsIds[0];\n        var column = state.tool.columns.find(function (c) {\n          return c.id === firstColumnId;\n        });\n        return column ? !column.isChoroplethDisabled : true;\n      }\n    }\n  };\n};\n\nvar mapViewCallbacksToActions = function mapViewCallbacksToActions() {\n  return {\n    onMapDimensionsLoaded: function onMapDimensionsLoaded() {\n      return loadTooltip();\n    },\n    onToggleGroup: function onToggleGroup(id) {\n      return toggleMapSidebarGroup(id);\n    },\n    onDimensionClick: function onDimensionClick(uid) {\n      return toggleMapDimension(uid);\n    }\n  };\n};\n\nvar _default = connect(MapDimensions, mapMethodsToState, mapViewCallbacksToActions);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapMethodsToState, \"mapMethodsToState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js\");\n  reactHotLoader.register(mapViewCallbacksToActions, \"mapViewCallbacksToActions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/map-dimensions.container.js"],"names":["mapMethodsToState","loadMapDimensions","_comparedValue","state","_returnedValue","mapDimensionsGroups","expandedMapSidebarGroupsIds","selectMapDimensions","toggleSidebarGroups","setVisibility","firstColumnId","column","c","mapViewCallbacksToActions","onMapDimensionsLoaded","loadTooltip","onToggleGroup","toggleMapSidebarGroup","onDimensionClick","toggleMapDimension","connect"],"mappings":";;;;;;AAAA;AACA,OAAA,OAAA,MAAA,SAAA;AACA,OAAA,aAAA,MAAA,0CAAA;AACA,SAAA,qBAAA,EAAA,kBAAA,QAAA,sBAAA;AACA,SAAA,WAAA,QAAA,qBAAA;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAK;AAAA,SAAK;AAClCC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAIC,KAAK,CAALA,IAAAA,CAAJ,mBAAA;AADJ,OAAA;AAEjBC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAK;AACxBC,UAAAA,mBAAmB,EAAEF,KAAK,CAALA,IAAAA,CADG,mBAAA;AAExBG,UAAAA,2BAA2B,EAAEH,KAAK,CAALA,IAAAA,CAAWG;AAFhB,SAAL;AAAA;AAFJ,KADe;AAQlCC,IAAAA,mBAAmB,EAAEJ,KAAK,CAALA,IAAAA,CARa,qBAAA;AASlCK,IAAAA,mBAAmB,EAAEL,KAAK,CAALA,IAAAA,CATa,2BAAA;AAUlCM,IAAAA,aAAa,EAAE;AACbP,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAIC,KAAK,CAALA,IAAAA,CAAJ,kBAAA;AADR,OAAA;AAEbC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAS;AACvB,YAAMM,aAAa,GAAGP,KAAK,CAALA,IAAAA,CAAAA,kBAAAA,CAAtB,CAAsBA,CAAtB;AACA,YAAMQ,MAAM,GAAG,KAAK,CAAL,IAAA,CAAA,OAAA,CAAA,IAAA,CAAwB,UAAA,CAAA,EAAC;AAAA,iBAAIC,CAAC,CAADA,EAAAA,KAAJ,aAAA;AAAxC,SAAe,CAAf;AAEA,eAAOD,MAAM,GAAG,CAACA,MAAM,CAAV,oBAAA,GAAb,IAAA;AACD;AAPY;AAVmB,GAAL;AAA/B,CAAA;;AAqBA,IAAME,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAA;AAAA,SAAO;AACvCC,IAAAA,qBAAqB,EAAE,SAAA,qBAAA,GAAA;AAAA,aAAMC,WAAN,EAAA;AADgB,KAAA;AAEvCC,IAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,EAAA,EAAE;AAAA,aAAIC,qBAAqB,CAAzB,EAAyB,CAAzB;AAFsB,KAAA;AAGvCC,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,GAAA,EAAG;AAAA,aAAIC,kBAAkB,CAAtB,GAAsB,CAAtB;AAAA;AAHkB,GAAP;AAAlC,CAAA;;eAMeC,OAAO,CAAA,aAAA,EAAA,iBAAA,EAAtB,yBAAsB,C;;AAAtB;;;;;;;;;;;;0BA3BMpB,iB;0BAqBAa,yB","sourcesContent":["/* eslint-disable no-shadow */\nimport connect from 'connect';\nimport MapDimensions from 'components/tool/map-dimensions.component';\nimport { toggleMapSidebarGroup, toggleMapDimension } from 'actions/tool.actions';\nimport { loadTooltip } from 'actions/app.actions';\n\nconst mapMethodsToState = state => ({\n  loadMapDimensions: {\n    _comparedValue: state => state.tool.mapDimensionsGroups,\n    _returnedValue: state => ({\n      mapDimensionsGroups: state.tool.mapDimensionsGroups,\n      expandedMapSidebarGroupsIds: state.tool.expandedMapSidebarGroupsIds\n    })\n  },\n  selectMapDimensions: state.tool.selectedMapDimensions,\n  toggleSidebarGroups: state.tool.expandedMapSidebarGroupsIds,\n  setVisibility: {\n    _comparedValue: state => state.tool.selectedColumnsIds,\n    _returnedValue: state => {\n      const firstColumnId = state.tool.selectedColumnsIds[0];\n      const column = state.tool.columns.find(c => c.id === firstColumnId);\n\n      return column ? !column.isChoroplethDisabled : true;\n    }\n  }\n});\n\nconst mapViewCallbacksToActions = () => ({\n  onMapDimensionsLoaded: () => loadTooltip(),\n  onToggleGroup: id => toggleMapSidebarGroup(id),\n  onDimensionClick: uid => toggleMapDimension(uid)\n});\n\nexport default connect(\n  MapDimensions,\n  mapMethodsToState,\n  mapViewCallbacksToActions\n);\n"]}]}