{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js","mtime":1548840716981},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport keyBy from 'lodash/keyBy';\nimport { UNITLESS_UNITS } from 'constants';\nimport getNodeMetaUid from './getNodeMetaUid';\n\nvar _default = function _default(nodesDict, nodesMeta, layers) {\n  var layersByUID = keyBy(layers, 'uid');\n  var nodesDictWithMeta = {};\n\n  if (!nodesMeta) {\n    return nodesDictWithMeta;\n  }\n\n  nodesMeta.data.forEach(function (nodeMeta) {\n    var nodeId = parseInt(nodeMeta.node_id, 10);\n\n    var nodeWithMeta = nodesDictWithMeta[nodeId] || _objectSpread({}, nodesDict[nodeId]);\n\n    if (!nodeWithMeta) {\n      console.warn(\"Loaded map attributes for node \".concat(nodeId, \", but node could not be found on the current context node list. You are probably loading map data for nodes of a different context\"));\n      return;\n    }\n\n    if (!nodeWithMeta.meta) {\n      nodeWithMeta.meta = {};\n    }\n\n    var uid = getNodeMetaUid(nodeMeta.attribute_type, nodeMeta.attribute_id);\n    var layerByUID = layersByUID[uid];\n    var dimensionMeta = {\n      rawValue: nodeMeta.value,\n      dualLayerBucket: nodeMeta.dual_layer_bucket,\n      singleLayerBucket: nodeMeta.single_layer_bucket,\n      name: layerByUID.name\n    };\n\n    if (layerByUID.unit !== undefined && UNITLESS_UNITS.indexOf(layerByUID.unit) === -1) {\n      dimensionMeta.unit = layerByUID.unit;\n    }\n\n    nodeWithMeta.meta = _objectSpread({}, nodeWithMeta.meta, _defineProperty({}, uid, dimensionMeta));\n    nodesDictWithMeta[nodeId] = nodeWithMeta;\n  });\n  return nodesDictWithMeta;\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/reducers/helpers/setNodesMeta.js"],"names":["layersByUID","keyBy","nodesDictWithMeta","nodesMeta","nodeId","parseInt","nodeMeta","nodeWithMeta","nodesDict","console","uid","getNodeMetaUid","layerByUID","dimensionMeta","rawValue","dualLayerBucket","singleLayerBucket","name","UNITLESS_UNITS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,cAAA;AACA,SAAA,cAAA,QAAA,WAAA;AACA,OAAA,cAAA,MAAA,kBAAA;;eAEe,kBAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAuC;AACpD,MAAMA,WAAW,GAAGC,KAAK,CAAA,MAAA,EAAzB,KAAyB,CAAzB;AACA,MAAMC,iBAAiB,GAAvB,EAAA;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,iBAAA;AACD;;AAEDC,EAAAA,SAAS,CAATA,IAAAA,CAAAA,OAAAA,CAAuB,UAAA,QAAA,EAAY;AACjC,QAAMC,MAAM,GAAGC,QAAQ,CAACC,QAAQ,CAAT,OAAA,EAAvB,EAAuB,CAAvB;;AACA,QAAMC,YAAY,GAAGL,iBAAiB,CAAjBA,MAAiB,CAAjBA,IAAAA,aAAAA,CAAAA,EAAAA,EAAkCM,SAAS,CAAhE,MAAgE,CAA3CN,CAArB;;AAEA,QAAI,CAAJ,YAAA,EAAmB;AACjBO,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,kCAAAA,MAAAA,CAAAA,MAAAA,EAAAA,oIAAAA,CAAAA;AAGA;AACD;;AAED,QAAI,CAACF,YAAY,CAAjB,IAAA,EAAwB;AACtBA,MAAAA,YAAY,CAAZA,IAAAA,GAAAA,EAAAA;AACD;;AAED,QAAMG,GAAG,GAAGC,cAAc,CAACL,QAAQ,CAAT,cAAA,EAA0BA,QAAQ,CAA5D,YAA0B,CAA1B;AACA,QAAMM,UAAU,GAAGZ,WAAW,CAA9B,GAA8B,CAA9B;AAEA,QAAMa,aAAa,GAAG;AACpBC,MAAAA,QAAQ,EAAER,QAAQ,CADE,KAAA;AAEpBS,MAAAA,eAAe,EAAET,QAAQ,CAFL,iBAAA;AAGpBU,MAAAA,iBAAiB,EAAEV,QAAQ,CAHP,mBAAA;AAIpBW,MAAAA,IAAI,EAAEL,UAAU,CAACK;AAJG,KAAtB;;AAOA,QAAIL,UAAU,CAAVA,IAAAA,KAAAA,SAAAA,IAAiCM,cAAc,CAAdA,OAAAA,CAAuBN,UAAU,CAAjCM,IAAAA,MAA4C,CAAjF,CAAA,EAAqF;AACnFL,MAAAA,aAAa,CAAbA,IAAAA,GAAqBD,UAAU,CAA/BC,IAAAA;AACD;;AAEDN,IAAAA,YAAY,CAAZA,IAAAA,GAAAA,aAAAA,CAAAA,EAAAA,EAAyBA,YAAY,CAArCA,IAAAA,EAAAA,eAAAA,CAAAA,EAAAA,EAAAA,GAAAA,EAAAA,aAAAA,CAAAA,CAAAA;AACAL,IAAAA,iBAAiB,CAAjBA,MAAiB,CAAjBA,GAAAA,YAAAA;AA9BFC,GAAAA;AAgCA,SAAA,iBAAA;AACD,C;;AAzCD","sourcesContent":["import keyBy from 'lodash/keyBy';\nimport { UNITLESS_UNITS } from 'constants';\nimport getNodeMetaUid from './getNodeMetaUid';\n\nexport default function(nodesDict, nodesMeta, layers) {\n  const layersByUID = keyBy(layers, 'uid');\n  const nodesDictWithMeta = {};\n\n  if (!nodesMeta) {\n    return nodesDictWithMeta;\n  }\n\n  nodesMeta.data.forEach(nodeMeta => {\n    const nodeId = parseInt(nodeMeta.node_id, 10);\n    const nodeWithMeta = nodesDictWithMeta[nodeId] || { ...nodesDict[nodeId] };\n\n    if (!nodeWithMeta) {\n      console.warn(\n        `Loaded map attributes for node ${nodeId}, but node could not be found on the current context node list. You are probably loading map data for nodes of a different context`\n      );\n      return;\n    }\n\n    if (!nodeWithMeta.meta) {\n      nodeWithMeta.meta = {};\n    }\n\n    const uid = getNodeMetaUid(nodeMeta.attribute_type, nodeMeta.attribute_id);\n    const layerByUID = layersByUID[uid];\n\n    const dimensionMeta = {\n      rawValue: nodeMeta.value,\n      dualLayerBucket: nodeMeta.dual_layer_bucket,\n      singleLayerBucket: nodeMeta.single_layer_bucket,\n      name: layerByUID.name\n    };\n\n    if (layerByUID.unit !== undefined && UNITLESS_UNITS.indexOf(layerByUID.unit) === -1) {\n      dimensionMeta.unit = layerByUID.unit;\n    }\n\n    nodeWithMeta.meta = { ...nodeWithMeta.meta, [uid]: dimensionMeta };\n    nodesDictWithMeta[nodeId] = nodeWithMeta;\n  });\n  return nodesDictWithMeta;\n}\n"]}]}