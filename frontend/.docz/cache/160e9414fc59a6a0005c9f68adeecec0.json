{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js","mtime":1548840716955},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1548840716937},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable no-shadow */\nimport { selectNode, navigateToProfile, resetState } from 'actions/tool.actions';\nimport connect from 'connect';\nimport NodesTitles from 'components/tool/nodesTitles.component';\nimport { getSelectedNodesData, getHighlightedNodesData } from 'react-components/tool/tool.selectors'; // this maps component methods to app state updates\n// keys correspond to method names, values to state prop path\n\nvar mapMethodsToState = function mapMethodsToState() {\n  return {\n    selectNodes: {\n      _comparedValue: function _comparedValue(state) {\n        return getSelectedNodesData(state.tool);\n      },\n      _returnedValue: function _returnedValue(state) {\n        return {\n          nodesData: getSelectedNodesData(state.tool),\n          recolorGroups: state.tool.recolorGroups,\n          currentQuant: state.tool.currentQuant,\n          selectedYears: state.app.selectedYears,\n          selectedContextId: state.app.selectedContext ? state.app.selectedContext.id : null\n        };\n      }\n    },\n    highlightNode: {\n      _comparedValue: function _comparedValue(state) {\n        return getHighlightedNodesData(state.tool);\n      },\n      _returnedValue: function _returnedValue(state) {\n        var highlightedNodesData = getHighlightedNodesData(state.tool);\n        return {\n          nodesData: highlightedNodesData.length === 0 ? getSelectedNodesData(state.tool) : highlightedNodesData,\n          isHighlight: highlightedNodesData.length > 0,\n          recolorGroups: state.tool.recolorGroups,\n          coordinates: state.tool.highlightedNodeCoordinates,\n          currentQuant: state.tool.currentQuant,\n          selectedYears: state.app.selectedYears,\n          selectedContextId: state.app.selectedContext ? state.app.selectedContext.id : null\n        };\n      }\n    }\n  };\n};\n\nvar mapViewCallbacksToActions = function mapViewCallbacksToActions() {\n  return {\n    onCloseNodeClicked: function onCloseNodeClicked(id) {\n      return selectNode(id);\n    },\n    onProfileLinkClicked: function onProfileLinkClicked(id, year, contextId) {\n      return navigateToProfile(id, year, contextId);\n    },\n    onClearClick: function onClearClick() {\n      return resetState();\n    }\n  };\n};\n\nvar _default = connect(NodesTitles, mapMethodsToState, mapViewCallbacksToActions);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mapMethodsToState, \"mapMethodsToState\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js\");\n  reactHotLoader.register(mapViewCallbacksToActions, \"mapViewCallbacksToActions\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/containers/tool/nodesTitles.container.js"],"names":["mapMethodsToState","selectNodes","_comparedValue","getSelectedNodesData","state","_returnedValue","nodesData","recolorGroups","currentQuant","selectedYears","selectedContextId","highlightNode","getHighlightedNodesData","highlightedNodesData","isHighlight","coordinates","mapViewCallbacksToActions","onCloseNodeClicked","selectNode","onProfileLinkClicked","navigateToProfile","onClearClick","resetState","connect"],"mappings":";;;;;;AAAA;AACA,SAAA,UAAA,EAAA,iBAAA,EAAA,UAAA,QAAA,sBAAA;AACA,OAAA,OAAA,MAAA,SAAA;AACA,OAAA,WAAA,MAAA,uCAAA;AACA,SAAA,oBAAA,EAAA,uBAAA,QAAA,sCAAA,C,CAKA;AACA;;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAA;AAAA,SAAO;AAC/BC,IAAAA,WAAW,EAAE;AACXC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAIC,oBAAoB,CAACC,KAAK,CAA9B,IAAwB,CAAxB;AADV,OAAA;AAEXC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAK;AACxBC,UAAAA,SAAS,EAAEH,oBAAoB,CAACC,KAAK,CADb,IACO,CADP;AAExBG,UAAAA,aAAa,EAAEH,KAAK,CAALA,IAAAA,CAFS,aAAA;AAGxBI,UAAAA,YAAY,EAAEJ,KAAK,CAALA,IAAAA,CAHU,YAAA;AAIxBK,UAAAA,aAAa,EAAEL,KAAK,CAALA,GAAAA,CAJS,aAAA;AAKxBM,UAAAA,iBAAiB,EAAEN,KAAK,CAALA,GAAAA,CAAAA,eAAAA,GAA4BA,KAAK,CAALA,GAAAA,CAAAA,eAAAA,CAA5BA,EAAAA,GAA2D;AALtD,SAAL;AAAA;AAFV,KADkB;AAW/BO,IAAAA,aAAa,EAAE;AACbT,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAK;AAAA,eAAIU,uBAAuB,CAACR,KAAK,CAAjC,IAA2B,CAA3B;AADR,OAAA;AAEbC,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAS;AACvB,YAAMQ,oBAAoB,GAAGD,uBAAuB,CAACR,KAAK,CAA1D,IAAoD,CAApD;AAEA,eAAO;AACLE,UAAAA,SAAS,EACPO,oBAAoB,CAApBA,MAAAA,KAAAA,CAAAA,GACIV,oBAAoB,CAACC,KAAK,CAD9BS,IACwB,CADxBA,GAFG,oBAAA;AAKLC,UAAAA,WAAW,EAAED,oBAAoB,CAApBA,MAAAA,GALR,CAAA;AAMLN,UAAAA,aAAa,EAAEH,KAAK,CAALA,IAAAA,CANV,aAAA;AAOLW,UAAAA,WAAW,EAAEX,KAAK,CAALA,IAAAA,CAPR,0BAAA;AAQLI,UAAAA,YAAY,EAAEJ,KAAK,CAALA,IAAAA,CART,YAAA;AASLK,UAAAA,aAAa,EAAEL,KAAK,CAALA,GAAAA,CATV,aAAA;AAULM,UAAAA,iBAAiB,EAAEN,KAAK,CAALA,GAAAA,CAAAA,eAAAA,GAA4BA,KAAK,CAALA,GAAAA,CAAAA,eAAAA,CAA5BA,EAAAA,GAA2D;AAVzE,SAAP;AAYD;AAjBY;AAXgB,GAAP;AAA1B,CAAA;;AAgCA,IAAMY,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAA;AAAA,SAAO;AACvCC,IAAAA,kBAAkB,EAAE,SAAA,kBAAA,CAAA,EAAA,EAAE;AAAA,aAAIC,UAAU,CAAd,EAAc,CAAd;AADiB,KAAA;AAEvCC,IAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,EAAA,EAAA,IAAA,EAAA,SAAA,EAAA;AAAA,aAAyBC,iBAAiB,CAAA,EAAA,EAAA,IAAA,EAA1C,SAA0C,CAA1C;AAFiB,KAAA;AAGvCC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAMC,UAAN,EAAA;AAAA;AAHyB,GAAP;AAAlC,CAAA;;eAMeC,OAAO,CAAA,WAAA,EAAA,iBAAA,EAAtB,yBAAsB,C;;AAAtB;;;;;;;;;;;;0BAtCMvB,iB;0BAgCAgB,yB","sourcesContent":["/* eslint-disable no-shadow */\nimport { selectNode, navigateToProfile, resetState } from 'actions/tool.actions';\nimport connect from 'connect';\nimport NodesTitles from 'components/tool/nodesTitles.component';\nimport {\n  getSelectedNodesData,\n  getHighlightedNodesData\n} from 'react-components/tool/tool.selectors';\n\n// this maps component methods to app state updates\n// keys correspond to method names, values to state prop path\nconst mapMethodsToState = () => ({\n  selectNodes: {\n    _comparedValue: state => getSelectedNodesData(state.tool),\n    _returnedValue: state => ({\n      nodesData: getSelectedNodesData(state.tool),\n      recolorGroups: state.tool.recolorGroups,\n      currentQuant: state.tool.currentQuant,\n      selectedYears: state.app.selectedYears,\n      selectedContextId: state.app.selectedContext ? state.app.selectedContext.id : null\n    })\n  },\n  highlightNode: {\n    _comparedValue: state => getHighlightedNodesData(state.tool),\n    _returnedValue: state => {\n      const highlightedNodesData = getHighlightedNodesData(state.tool);\n\n      return {\n        nodesData:\n          highlightedNodesData.length === 0\n            ? getSelectedNodesData(state.tool)\n            : highlightedNodesData,\n        isHighlight: highlightedNodesData.length > 0,\n        recolorGroups: state.tool.recolorGroups,\n        coordinates: state.tool.highlightedNodeCoordinates,\n        currentQuant: state.tool.currentQuant,\n        selectedYears: state.app.selectedYears,\n        selectedContextId: state.app.selectedContext ? state.app.selectedContext.id : null\n      };\n    }\n  }\n});\n\nconst mapViewCallbacksToActions = () => ({\n  onCloseNodeClicked: id => selectNode(id),\n  onProfileLinkClicked: (id, year, contextId) => navigateToProfile(id, year, contextId),\n  onClearClick: () => resetState()\n});\n\nexport default connect(\n  NodesTitles,\n  mapMethodsToState,\n  mapViewCallbacksToActions\n);\n"]}]}